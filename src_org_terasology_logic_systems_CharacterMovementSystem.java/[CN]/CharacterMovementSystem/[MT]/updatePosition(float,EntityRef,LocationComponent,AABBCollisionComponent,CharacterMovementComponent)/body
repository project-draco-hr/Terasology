{
  Vector3f desiredVelocity=new Vector3f(movementComp.getDrive());
  float maxSpeed=movementComp.isSwimming ? movementComp.maxWaterSpeed : movementComp.maxGroundSpeed;
  if (movementComp.isRunning) {
    maxSpeed*=movementComp.runFactor;
  }
  desiredVelocity.scale(maxSpeed);
  Vector3f velocityDiff=new Vector3f(desiredVelocity);
  velocityDiff.sub(movementComp.getVelocity());
  velocityDiff.y=0;
  float changeMag=velocityDiff.length();
  if (changeMag > movementComp.groundFriction * delta) {
    velocityDiff.scale(movementComp.groundFriction * delta / changeMag);
  }
  movementComp.getVelocity().x+=velocityDiff.x;
  movementComp.getVelocity().z+=velocityDiff.z;
  if (movementComp.isSwimming) {
    movementComp.getVelocity().y+=Math.signum(desiredVelocity.y - movementComp.getVelocity().y) * Math.min(UnderwaterInteria * delta,TeraMath.fastAbs(desiredVelocity.y - movementComp.getVelocity().y));
    movementComp.getVelocity().y=Math.max(-movementComp.maxWaterSpeed,(movementComp.getVelocity().y - UnderwaterGravity * delta));
  }
 else {
    movementComp.getVelocity().y=Math.max(-TerminalVelocity,(float)(movementComp.getVelocity().y - Gravity * delta));
  }
  Vector3f worldPos=location.getWorldPosition();
  Vector3f oldPos=new Vector3f(worldPos);
  worldPos.y+=movementComp.getVelocity().y * delta;
  Vector3f extents=new Vector3f(collision.getExtents());
  extents.scale(location.getWorldScale());
  if (verticalHitTest(worldPos,oldPos,extents)) {
    movementComp.getVelocity().y=0;
    if (movementComp.jump) {
      movementComp.jump=false;
      movementComp.isGrounded=false;
      movementComp.getVelocity().y+=movementComp.jumpSpeed;
    }
 else     if (!movementComp.isGrounded) {
      movementComp.isGrounded=true;
    }
  }
 else {
    movementComp.isGrounded=false;
  }
  oldPos.set(worldPos);
  worldPos.x+=movementComp.getVelocity().x * delta;
  worldPos.z+=movementComp.getVelocity().z * delta;
  if (horizontalHitTest(worldPos,oldPos,extents)) {
    entity.send(new HorizontalCollisionEvent());
  }
  movementComp.getVelocity().x=(worldPos.x - oldPos.x) / delta;
  movementComp.getVelocity().z=(worldPos.z - oldPos.z) / delta;
  Vector3f dist=new Vector3f(worldPos.x - oldPos.x,0,worldPos.z - oldPos.z);
  if (movementComp.isGrounded) {
    movementComp.footstepDelta+=dist.length();
    if (movementComp.footstepDelta > movementComp.distanceBetweenFootsteps) {
      movementComp.footstepDelta-=movementComp.distanceBetweenFootsteps;
      entity.send(new FootstepEvent());
    }
  }
  location.setWorldPosition(worldPos);
  if (movementComp.faceMovementDirection) {
    float yaw=(float)Math.atan2(movementComp.getVelocity().x,movementComp.getVelocity().z);
    AxisAngle4f axisAngle=new AxisAngle4f(0,1,0,yaw);
    location.getLocalRotation().set(axisAngle);
  }
}
