{
  PerformanceMonitor.startActivity("Physics Renderer");
  physics.update(time.getGameDelta());
  PerformanceMonitor.endActivity();
  Iterator<EntityRef> iter=physics.physicsEntitiesIterator();
  while (iter.hasNext()) {
    EntityRef entity=iter.next();
    RigidBodyComponent comp=entity.getComponent(RigidBodyComponent.class);
    RigidBody body=physics.getRigidBody(entity);
    if (body.isActive()) {
      body.getLinearVelocity(comp.velocity);
      body.getAngularVelocity(comp.angularVelocity);
      Vector3f vLocation=Vector3f.zero();
      body.getLocation(vLocation);
      Vector3f vDirection=comp.velocity;
      float fDistance=vDirection.length();
      vDirection.normalize();
      HitResult hitInfo=physics.rayTrace(vLocation,vDirection,fDistance * delta,StandardCollisionGroup.WORLD);
      if (hitInfo.isHit()) {
        entity.send(new ImpactEvent());
      }
    }
  }
  if (networkSystem.getMode().isServer() && time.getGameTimeInMs() - TIME_BETWEEN_NETSYNCS > lastNetsync) {
    sendSyncMessages();
    lastNetsync=time.getGameTimeInMs();
  }
  List<CollisionPair> collisionPairs=physics.getCollisionPairs();
  for (  CollisionPair pair : collisionPairs) {
    if (pair.b.exists()) {
      pair.a.send(new CollideEvent(pair.b));
    }
    if (pair.a.exists()) {
      pair.b.send(new CollideEvent(pair.a));
    }
  }
}
