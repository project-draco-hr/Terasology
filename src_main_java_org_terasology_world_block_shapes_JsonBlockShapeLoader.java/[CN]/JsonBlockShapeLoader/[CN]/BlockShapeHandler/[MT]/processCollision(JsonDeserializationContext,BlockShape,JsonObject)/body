{
  if (collisionInfo.has("symmetric") && collisionInfo.get("symmetric").isJsonPrimitive() && collisionInfo.get("symmetric").getAsJsonPrimitive().isBoolean()) {
    shape.setCollisionSymmetric(collisionInfo.get("symmetric").getAsBoolean());
  }
  if (collisionInfo.has("convexHull") && collisionInfo.get("convexHull").isJsonPrimitive() && collisionInfo.get("convexHull").getAsJsonPrimitive().isBoolean()) {
    ObjectArrayList<Vector3f> verts=buildVertList(shape);
    if (shape.isCollisionSymmetric()) {
      ConvexHullShape convexHull=new ConvexHullShape(verts);
      shape.setCollisionShape(convexHull);
    }
 else {
      for (      Rotation rot : Rotation.horizontalRotations()) {
        ObjectArrayList<Vector3f> transformedVerts=new ObjectArrayList<Vector3f>();
        for (        Vector3f vert : verts) {
          transformedVerts.add(QuaternionUtil.quatRotate(rot.getQuat4f(),vert,new Vector3f()));
        }
        ConvexHullShape convexHull=new ConvexHullShape(transformedVerts);
        shape.setCollisionShape(rot,convexHull);
      }
    }
  }
 else   if (collisionInfo.has("colliders") && collisionInfo.get("colliders").isJsonArray() && collisionInfo.get("colliders").getAsJsonArray().size() > 0) {
    JsonArray colliderArray=collisionInfo.get("colliders").getAsJsonArray();
    if (shape.isCollisionSymmetric()) {
      ColliderInfo info=processColliders(context,colliderArray,Rotation.none());
      shape.setCollisionShape(info.collisionShape);
      shape.setCollisionOffset(info.offset);
    }
 else {
      for (      Rotation rot : Rotation.horizontalRotations()) {
        ColliderInfo info=processColliders(context,colliderArray,rot);
        shape.setCollisionShape(rot,info.collisionShape);
        shape.setCollisionOffset(rot,info.offset);
        if (info.symmetric) {
          shape.setCollisionSymmetric(true);
          break;
        }
      }
    }
  }
 else {
    shape.setCollisionShape(CUBE_SHAPE);
    shape.setCollisionSymmetric(true);
  }
}
