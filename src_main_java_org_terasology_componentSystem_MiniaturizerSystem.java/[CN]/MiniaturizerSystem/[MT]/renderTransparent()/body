{
  for (  EntityRef entity : entityManager.iteratorEntities(MiniaturizerComponent.class)) {
    MiniaturizerComponent min=entity.getComponent(MiniaturizerComponent.class);
    min.blockGrid.render();
    if (min.chunkMesh == null || min.renderPosition == null)     continue;
    glPushMatrix();
    Vector3f cameraPosition=CoreRegistry.get(WorldRenderer.class).getActiveCamera().getPosition();
    GL11.glTranslated(min.renderPosition.x - cameraPosition.x,min.renderPosition.y - cameraPosition.y,min.renderPosition.z - cameraPosition.z);
    glScalef(MiniaturizerComponent.SCALE,MiniaturizerComponent.SCALE,MiniaturizerComponent.SCALE);
    glRotatef(min.orientation,0,1,0);
    ShaderManager.getInstance().enableShader("chunk");
    ShaderManager.getInstance().getShaderProgram("chunk").setFloat("blockScale",MiniaturizerComponent.SCALE);
    min.chunkMesh.render(ChunkMesh.RENDER_PHASE.OPAQUE);
    min.chunkMesh.render(ChunkMesh.RENDER_PHASE.BILLBOARD_AND_TRANSLUCENT);
    min.chunkMesh.render(ChunkMesh.RENDER_PHASE.WATER_AND_ICE);
    glPopMatrix();
  }
}
