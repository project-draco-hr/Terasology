{
  HashMap<String,List<String>> matrix=new HashMap<String,List<String>>();
  ArrayList<Integer> counterLines=new ArrayList<Integer>(width);
  ArrayList<Integer> counterColumns=new ArrayList<Integer>(height);
  int countLevels=recipe.size();
  for (int i=0; i < height; i++) {
    if (counterLines.size() < (i + 1)) {
      counterLines.add(0);
    }
    for (int j=0; j < width; j++) {
      for (      List<String> currentLevel : recipe.values()) {
        if (currentLevel.get(i * width + j).equals(EMPTY_ROW)) {
          counterLines.set(i,counterLines.get(i) + 1);
        }
      }
    }
  }
  if (counterLines.size() == 3 && counterLines.get(1) == countLevels * width && counterLines.get(0) < countLevels * width && counterLines.get(2) < countLevels * width) {
    counterLines.set(1,0);
  }
  for (int i=0; i < width; i++) {
    if (counterColumns.size() < (i + 1)) {
      counterColumns.add(0);
    }
    for (int j=0; j < height; j++) {
      for (      List<String> currentLevel : recipe.values()) {
        if (currentLevel.get(j * width + i).equals(EMPTY_ROW)) {
          counterColumns.set(i,counterColumns.get(i) + 1);
        }
      }
    }
  }
  if (counterColumns.size() == 3 && counterColumns.get(1) == countLevels * height && counterColumns.get(0) < countLevels * height && counterColumns.get(2) < countLevels * height) {
    counterColumns.set(1,0);
  }
  int countLines=0;
  if (counterLines.isEmpty() && counterColumns.isEmpty()) {
    return this;
  }
  for (int i=0; i < height; i++) {
    if (counterLines.get(i) < countLevels * width) {
      for (      String key : recipe.keySet()) {
        if (!matrix.containsKey(key)) {
          matrix.put(key,new ArrayList<String>());
        }
        for (int j=0; j < height; j++) {
          matrix.get(key).add(recipe.get(key).get(i * width + j));
        }
      }
      countLines++;
    }
  }
  int countColumns=width;
  for (int i=0, tCounter=0; i < countColumns; i++, tCounter++) {
    if (counterColumns.get(tCounter) == countLevels * height) {
      for (      String key : recipe.keySet()) {
        if (!matrix.containsKey(key)) {
          matrix.put(key,new ArrayList<String>());
        }
        for (int j=0; j < countLines; j++) {
          int t=j * (countColumns - 1) + i;
          matrix.get(key).remove(t);
        }
      }
      countColumns--;
      i--;
    }
  }
  return new RecipeMatrix(matrix,countColumns,countLines);
}
