{
  int chunkPosX=calcChunkPosX(x);
  int chunkPosZ=calcChunkPosZ(z);
  int blockPosX=calcBlockPosX(x,chunkPosX);
  int blockPosZ=calcBlockPosZ(z,chunkPosZ);
  Chunk c=_chunkCache.loadOrCreateChunk(calcChunkPosX(x),calcChunkPosZ(z));
  if (c == null) {
    return;
  }
  if (overwrite || c.getBlock(blockPosX,y,blockPosZ) == 0x0) {
    byte currentValue=getLight(x,y,z,Chunk.LIGHT_TYPE.SUN);
    if (Block.getBlockForType(c.getBlock(blockPosX,y,blockPosZ)).isRemovable()) {
      c.setBlock(blockPosX,y,blockPosZ,type);
    }
    if (update) {
      c.refreshSunlightAtLocalPos(blockPosX,blockPosZ,true,true);
      byte newValue=getLight(x,y,z,Chunk.LIGHT_TYPE.SUN);
      byte luminance=Block.getBlockForType(type).getLuminance();
      if (luminance > 0) {
        currentValue=getLight(x,y,z,Chunk.LIGHT_TYPE.BLOCK);
        c.setLight(blockPosX,y,blockPosZ,luminance,Chunk.LIGHT_TYPE.BLOCK);
        newValue=getLight(x,y,z,Chunk.LIGHT_TYPE.BLOCK);
      }
 else {
        currentValue=getLight(x,y,z,Chunk.LIGHT_TYPE.BLOCK);
        c.setLight(blockPosX,y,blockPosZ,(byte)0x0,Chunk.LIGHT_TYPE.BLOCK);
        newValue=getLight(x,y,z,Chunk.LIGHT_TYPE.BLOCK);
      }
      c.refreshLightAtLocalPos(blockPosX,y,blockPosZ,Chunk.LIGHT_TYPE.BLOCK);
      if (newValue > currentValue) {
        c.spreadLight(blockPosX,y,blockPosZ,luminance,Chunk.LIGHT_TYPE.BLOCK);
      }
 else       if (newValue < currentValue) {
        c.unspreadLight(blockPosX,y,blockPosZ,currentValue,Chunk.LIGHT_TYPE.BLOCK);
      }
    }
  }
}
