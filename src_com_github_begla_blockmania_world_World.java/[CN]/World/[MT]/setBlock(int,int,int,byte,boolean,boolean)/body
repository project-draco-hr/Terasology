{
  int chunkPosX=calcChunkPosX(x);
  int chunkPosZ=calcChunkPosZ(z);
  int blockPosX=calcBlockPosX(x,chunkPosX);
  int blockPosZ=calcBlockPosZ(z,chunkPosZ);
  Chunk c=_chunkCache.loadOrCreateChunk(calcChunkPosX(x),calcChunkPosZ(z));
  if (c == null) {
    return;
  }
  if (overwrite || c.getBlock(blockPosX,y,blockPosZ) == 0x0) {
    byte oldBlock=c.getBlock(blockPosX,y,blockPosZ);
    byte newBlock=oldBlock;
    if (Block.getBlockForType(c.getBlock(blockPosX,y,blockPosZ)).isRemovable()) {
      c.setBlock(blockPosX,y,blockPosZ,type);
      newBlock=type;
    }
 else {
      return;
    }
    if (updateLight) {
      c.refreshSunlightAtLocalPos(blockPosX,blockPosZ,true,true);
      byte blockLightPrev=getLight(x,y,z,Chunk.LIGHT_TYPE.BLOCK);
      byte blockLightCurrent=blockLightPrev;
      if (oldBlock == 0x0 && newBlock != 0x0) {
        byte luminance=Block.getBlockForType(type).getLuminance();
        c.setLight(blockPosX,y,blockPosZ,luminance,Chunk.LIGHT_TYPE.BLOCK);
        blockLightCurrent=luminance;
      }
 else {
        c.setLight(blockPosX,y,blockPosZ,(byte)0x0,Chunk.LIGHT_TYPE.BLOCK);
        c.refreshLightAtLocalPos(blockPosX,y,blockPosZ,Chunk.LIGHT_TYPE.BLOCK);
        blockLightCurrent=getLight(x,y,z,Chunk.LIGHT_TYPE.BLOCK);
      }
      if (blockLightCurrent > blockLightPrev) {
        c.spreadLight(blockPosX,y,blockPosZ,blockLightCurrent,Chunk.LIGHT_TYPE.BLOCK);
      }
 else       if (blockLightCurrent < blockLightPrev) {
        c.unspreadLight(blockPosX,y,blockPosZ,blockLightPrev,Chunk.LIGHT_TYPE.BLOCK);
      }
    }
  }
}
