{
  final Vector3f cameraPosition=camera.getPosition();
  if (mode == ChunkRenderMode.DEFAULT || mode == ChunkRenderMode.REFLECTION) {
    if (phase == ChunkMesh.RenderPhase.REFRACTIVE) {
      chunkShader.activateFeature(ShaderProgramFeature.FEATURE_REFRACTIVE_PASS);
    }
 else     if (phase == ChunkMesh.RenderPhase.ALPHA_REJECT) {
      chunkShader.activateFeature(ShaderProgramFeature.FEATURE_ALPHA_REJECT);
    }
    if (mode == ChunkRenderMode.REFLECTION) {
      chunkShader.setFloat("clip",camera.getClipHeight(),true);
    }
 else {
      chunkShader.setFloat("clip",0.0f,true);
    }
    chunkShader.enable();
  }
 else   if (mode == ChunkRenderMode.Z_PRE_PASS) {
    shaderManager.disableShader();
  }
  while (chunks.size() > 0) {
    RenderableChunk chunk=chunks.poll();
    if (chunk.hasMesh()) {
      final Vector3f chunkPosition=chunk.getPosition().toVector3f();
      final Vector3f chunkPositionRelativeToCamera=new Vector3f(chunkPosition.x * ChunkConstants.SIZE_X - cameraPosition.x,chunkPosition.y * ChunkConstants.SIZE_Y - cameraPosition.y,chunkPosition.z * ChunkConstants.SIZE_Z - cameraPosition.z);
      if (mode == ChunkRenderMode.DEFAULT || mode == ChunkRenderMode.REFLECTION) {
        chunkShader.setFloat3("chunkPositionWorld",chunkPosition.x * ChunkConstants.SIZE_X,chunkPosition.y * ChunkConstants.SIZE_Y,chunkPosition.z * ChunkConstants.SIZE_Z,true);
        chunkShader.setFloat("animated",chunk.isAnimated() ? 1.0f : 0.0f,true);
      }
      GL11.glPushMatrix();
      GL11.glTranslatef(chunkPositionRelativeToCamera.x,chunkPositionRelativeToCamera.y,chunkPositionRelativeToCamera.z);
      if (renderingDebugConfig.isRenderChunkBoundingBoxes()) {
        AABBRenderer aabbRenderer=new AABBRenderer(chunk.getAABB());
        aabbRenderer.renderLocally(1f);
        statRenderedTriangles+=12;
      }
      chunk.getMesh().render(phase);
      statRenderedTriangles+=chunk.getMesh().triangleCount();
      GL11.glPopMatrix();
    }
 else {
      statChunkNotReady++;
    }
  }
  if (mode == ChunkRenderMode.DEFAULT || mode == ChunkRenderMode.REFLECTION) {
    if (phase == ChunkMesh.RenderPhase.REFRACTIVE) {
      chunkShader.deactivateFeature(ShaderProgramFeature.FEATURE_REFRACTIVE_PASS);
    }
 else     if (phase == ChunkMesh.RenderPhase.ALPHA_REJECT) {
      chunkShader.deactivateFeature(ShaderProgramFeature.FEATURE_ALPHA_REJECT);
    }
  }
}
