{
  Vector3f positionViewSpace=new Vector3f();
  positionViewSpace.sub(lightWorldPosition,playerCamera.getPosition());
  boolean doRenderLight=lightComponent.lightType == LightComponent.LightType.DIRECTIONAL || lightComponent.lightRenderingDistance == 0.0f || positionViewSpace.lengthSquared() < (lightComponent.lightRenderingDistance * lightComponent.lightRenderingDistance);
  doRenderLight&=isLightVisible(positionViewSpace,lightComponent);
  if (!doRenderLight) {
    return false;
  }
  if (!geometryOnly) {
    if (lightComponent.lightType == LightComponent.LightType.POINT) {
      program.activateFeature(ShaderProgramFeature.FEATURE_LIGHT_POINT);
    }
 else     if (lightComponent.lightType == LightComponent.LightType.DIRECTIONAL) {
      program.activateFeature(ShaderProgramFeature.FEATURE_LIGHT_DIRECTIONAL);
    }
  }
  program.enable();
  program.setCamera(playerCamera);
  Vector3f worldPosition=new Vector3f();
  worldPosition.sub(lightWorldPosition,playerCamera.getPosition());
  Vector3f lightViewPosition=new Vector3f(worldPosition);
  playerCamera.getViewMatrix().transformPoint(lightViewPosition);
  program.setFloat3("lightViewPos",lightViewPosition.x,lightViewPosition.y,lightViewPosition.z,true);
  Matrix4f modelMatrix=new Matrix4f();
  modelMatrix.set(lightComponent.lightAttenuationRange);
  modelMatrix.setTranslation(worldPosition);
  program.setMatrix4("modelMatrix",modelMatrix,true);
  if (!geometryOnly) {
    program.setFloat3("lightColorDiffuse",lightComponent.lightColorDiffuse.x,lightComponent.lightColorDiffuse.y,lightComponent.lightColorDiffuse.z,true);
    program.setFloat3("lightColorAmbient",lightComponent.lightColorAmbient.x,lightComponent.lightColorAmbient.y,lightComponent.lightColorAmbient.z,true);
    program.setFloat3("lightProperties",lightComponent.lightAmbientIntensity,lightComponent.lightDiffuseIntensity,lightComponent.lightSpecularPower,true);
  }
  if (lightComponent.lightType == LightComponent.LightType.POINT) {
    if (!geometryOnly) {
      program.setFloat4("lightExtendedProperties",lightComponent.lightAttenuationRange,lightComponent.lightAttenuationFalloff,0.0f,0.0f,true);
    }
    LightGeometryHelper.renderSphereGeometry();
  }
 else   if (lightComponent.lightType == LightComponent.LightType.DIRECTIONAL) {
    postProcessor.renderFullscreenQuad();
  }
  if (!geometryOnly) {
    if (lightComponent.lightType == LightComponent.LightType.POINT) {
      program.deactivateFeature(ShaderProgramFeature.FEATURE_LIGHT_POINT);
    }
 else     if (lightComponent.lightType == LightComponent.LightType.DIRECTIONAL) {
      program.deactivateFeature(ShaderProgramFeature.FEATURE_LIGHT_DIRECTIONAL);
    }
  }
  return true;
}
