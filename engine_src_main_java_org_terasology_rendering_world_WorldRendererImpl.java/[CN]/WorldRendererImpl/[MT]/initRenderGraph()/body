{
  NodeFactory nodeFactory=new NodeFactory(context);
  BufferClearingNode.RequiredData shadowMapClearingData=new BufferClearingNode.RequiredData(new FBOConfig(ShadowMapNode.SHADOW_MAP,FBO.Type.NO_COLOR).useDepthBuffer(),shadowMapResolutionDependentFBOs,GL_DEPTH_BUFFER_BIT);
  Node shadowMapClearingNode=nodeFactory.createInstance(BufferClearingNode.class,shadowMapClearingData);
  shadowMapNode=nodeFactory.createInstance(ShadowMapNode.class);
  BufferClearingNode.RequiredData reflectedBufferClearingData=new BufferClearingNode.RequiredData(new FBOConfig(BackdropReflectionNode.REFLECTED,HALF_SCALE,FBO.Type.DEFAULT).useDepthBuffer(),displayResolutionDependentFBOs,GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  Node reflectedBufferClearingNode=nodeFactory.createInstance(BufferClearingNode.class,reflectedBufferClearingData);
  Node reflectedBackdropNode=nodeFactory.createInstance(BackdropReflectionNode.class);
  Node worldReflectionNode=nodeFactory.createInstance(WorldReflectionNode.class);
  Node backdropNode=nodeFactory.createInstance(BackdropNode.class);
  Node skybandsNode=nodeFactory.createInstance(SkyBandsNode.class);
  Node objectOpaqueNode=nodeFactory.createInstance(ObjectsOpaqueNode.class);
  Node chunksOpaqueNode=nodeFactory.createInstance(ChunksOpaqueNode.class);
  Node chunksAlphaRejectNode=nodeFactory.createInstance(ChunksAlphaRejectNode.class);
  Node overlaysNode=nodeFactory.createInstance(OverlaysNode.class);
  Node firstPersonViewNode=nodeFactory.createInstance(FirstPersonViewNode.class);
  Node lightGeometryNode=nodeFactory.createInstance(LightGeometryNode.class);
  Node directionalLightsNode=nodeFactory.createInstance(DirectionalLightsNode.class);
  Node chunksRefractiveReflectiveNode=nodeFactory.createInstance(ChunksRefractiveReflectiveNode.class);
  Node outlineNode=nodeFactory.createInstance(OutlineNode.class);
  Node ambientOcclusionPassesNode=nodeFactory.createInstance(AmbientOcclusionPassesNode.class);
  Node prePostCompositeNode=nodeFactory.createInstance(PrePostCompositeNode.class);
  Node simpleBlendMaterialsNode=nodeFactory.createInstance(SimpleBlendMaterialsNode.class);
  Node lightShaftsNode=nodeFactory.createInstance(LightShaftsNode.class);
  Node initialPostProcessingNode=nodeFactory.createInstance(InitialPostProcessingNode.class);
  Node downSampleSceneAndUpdateExposure=nodeFactory.createInstance(DownSampleSceneAndUpdateExposureNode.class);
  Node toneMappingNode=nodeFactory.createInstance(ToneMappingNode.class);
  Node bloomPassesNode=nodeFactory.createInstance(BloomPassesNode.class);
  Node blurPassesNode=nodeFactory.createInstance(BlurPassesNode.class);
  Node finalPostProcessingNode=nodeFactory.createInstance(FinalPostProcessingNode.class);
  RenderGraph renderGraph=new RenderGraph();
  renderGraph.addNode(shadowMapClearingNode,"shadowMapClearingNode");
  renderGraph.addNode(shadowMapNode,"shadowMapNode");
  renderGraph.addNode(reflectedBufferClearingNode,"reflectedBufferClearingNode");
  renderGraph.addNode(reflectedBackdropNode,"reflectedBackdropNode");
  renderGraph.addNode(worldReflectionNode,"worldReflectionNode");
  renderGraph.addNode(backdropNode,"backdropNode");
  renderGraph.addNode(skybandsNode,"skybandsNode");
  renderGraph.addNode(objectOpaqueNode,"objectOpaqueNode");
  renderGraph.addNode(chunksOpaqueNode,"chunksOpaqueNode");
  renderGraph.addNode(chunksAlphaRejectNode,"chunksAlphaRejectNode");
  renderGraph.addNode(overlaysNode,"overlaysNode");
  renderGraph.addNode(firstPersonViewNode,"firstPersonViewNode");
  renderGraph.addNode(lightGeometryNode,"lightGeometryNode");
  renderGraph.addNode(directionalLightsNode,"directionalLightsNode");
  renderGraph.addNode(chunksRefractiveReflectiveNode,"chunksRefractiveReflectiveNode");
  renderGraph.addNode(outlineNode,"outlineNode");
  renderGraph.addNode(ambientOcclusionPassesNode,"ambientOcclusionPassesNode");
  renderGraph.addNode(prePostCompositeNode,"prePostCompositeNode");
  renderGraph.addNode(simpleBlendMaterialsNode,"simpleBlendMaterialsNode");
  renderGraph.addNode(lightShaftsNode,"lightShaftsNode");
  renderGraph.addNode(initialPostProcessingNode,"initialPostProcessingNode");
  renderGraph.addNode(downSampleSceneAndUpdateExposure,"downSampleSceneAndUpdateExposure");
  renderGraph.addNode(toneMappingNode,"toneMappingNode");
  renderGraph.addNode(bloomPassesNode,"bloomPassesNode");
  renderGraph.addNode(blurPassesNode,"blurPassesNode");
  renderGraph.addNode(finalPostProcessingNode,"finalPostProcessingNode");
  RenderTaskListGenerator renderTaskListGenerator=new RenderTaskListGenerator();
  List<Node> orderedNodes=renderGraph.getNodesInTopologicalOrder();
  renderPipelineTaskList=renderTaskListGenerator.generateFrom(orderedNodes);
}
