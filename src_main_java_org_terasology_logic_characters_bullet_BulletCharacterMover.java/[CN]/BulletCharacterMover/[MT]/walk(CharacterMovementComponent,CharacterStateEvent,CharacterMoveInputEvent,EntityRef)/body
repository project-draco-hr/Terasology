{
  Vector3f desiredVelocity=new Vector3f(input.getMovementDirection());
  float lengthSquared=desiredVelocity.lengthSquared();
  if (lengthSquared > 1) {
    desiredVelocity.normalize();
  }
  float maxSpeed=movementComp.maxGroundSpeed;
  if (input.isRunning()) {
    maxSpeed*=movementComp.runFactor;
  }
  if (desiredVelocity.y != 0) {
    float speed=desiredVelocity.length();
    desiredVelocity.y=0;
    if (desiredVelocity.x != 0 || desiredVelocity.z != 0) {
      desiredVelocity.normalize();
      desiredVelocity.scale(speed);
    }
  }
  desiredVelocity.scale(maxSpeed);
  Vector3f velocityDiff=new Vector3f(desiredVelocity);
  velocityDiff.sub(state.getVelocity());
  velocityDiff.scale(Math.min(movementComp.groundFriction * input.getDelta(),1.0f));
  Vector3f endVelocity=new Vector3f(state.getVelocity());
  endVelocity.x+=velocityDiff.x;
  endVelocity.z+=velocityDiff.z;
  endVelocity.y=Math.max(-TERMINAL_VELOCITY,(state.getVelocity().y - GRAVITY * input.getDelta()));
  Vector3f moveDelta=new Vector3f(endVelocity);
  moveDelta.scale(input.getDelta());
  MoveResult moveResult=move(state.getPosition(),moveDelta,(state.isGrounded()) ? movementComp.stepHeight : 0,movementComp.slopeFactor,movementComp.collider);
  Vector3f distanceMoved=new Vector3f(moveResult.getFinalPosition());
  distanceMoved.sub(state.getPosition());
  state.getPosition().set(moveResult.getFinalPosition());
  if (input.isFirstRun() && distanceMoved.length() > 0) {
    entity.send(new MovedEvent(distanceMoved,state.getPosition()));
  }
  movementComp.collider.setWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),moveResult.getFinalPosition(),1.0f)));
  if (moveResult.isBottomHit()) {
    if (!state.isGrounded()) {
      if (input.isFirstRun()) {
        Vector3f landVelocity=new Vector3f(state.getVelocity());
        landVelocity.y+=(distanceMoved.y / moveDelta.y) * (endVelocity.y - state.getVelocity().y);
        logger.debug("Landed at " + landVelocity);
        entity.send(new VerticalCollisionEvent(landVelocity,state.getPosition()));
      }
      state.setGrounded(true);
    }
    endVelocity.y=0;
    if (input.isJumpRequested()) {
      state.setGrounded(false);
      endVelocity.y+=movementComp.jumpSpeed;
      entity.send(new JumpEvent());
    }
  }
 else {
    if (moveResult.isTopHit() && endVelocity.y > 0) {
      endVelocity.y=-0.5f * endVelocity.y;
    }
    state.setGrounded(false);
  }
  state.getVelocity().set(endVelocity);
  if (input.isFirstRun() && moveResult.isHorizontalHit()) {
    entity.send(new HorizontalCollisionEvent(state.getPosition(),state.getVelocity()));
  }
  if (state.isGrounded()) {
    state.setFootstepDelta(state.getFootstepDelta() + distanceMoved.length());
    if (input.isFirstRun() && state.getFootstepDelta() > movementComp.distanceBetweenFootsteps) {
      state.setFootstepDelta(state.getFootstepDelta() - movementComp.distanceBetweenFootsteps);
      entity.send(new FootstepEvent());
    }
  }
}
