{
  ShaderManager.getInstance().enableShader("particle");
  glDisable(GL11.GL_CULL_FACE);
  Vector3f cameraPosition=worldRenderer.getActiveCamera().getPosition();
  for (  EntityRef entity : entityManager.getEntitiesWith(BlockParticleEffectComponent.class,LocationComponent.class)) {
    LocationComponent location=entity.getComponent(LocationComponent.class);
    Vector3f worldPos=location.getWorldPosition();
    if (!worldProvider.isBlockActive(worldPos)) {
      continue;
    }
    float temperature=worldProvider.getBiomeProvider().getTemperatureAt((int)worldPos.x,(int)worldPos.z);
    float humidity=worldProvider.getBiomeProvider().getHumidityAt((int)worldPos.x,(int)worldPos.z);
    glPushMatrix();
    glTranslated(worldPos.x - cameraPosition.x,worldPos.y - cameraPosition.y,worldPos.z - cameraPosition.z);
    BlockParticleEffectComponent particleEffect=entity.getComponent(BlockParticleEffectComponent.class);
    if (particleEffect.blockType == null) {
      return;
    }
    for (    Particle particle : particleEffect.particles) {
      glPushMatrix();
      glTranslatef(particle.position.x,particle.position.y,particle.position.z);
      applyOrientation();
      glScalef(particle.size,particle.size,particle.size);
      float light=worldRenderer.getRenderingLightValueAt(new Vector3f(worldPos.x + particle.position.x,worldPos.y + particle.position.y,worldPos.z + particle.position.z));
      renderParticle(particle,particleEffect.blockType.getArchetypeBlock().getId(),temperature,humidity,light);
      glPopMatrix();
    }
    glPopMatrix();
  }
  glEnable(GL11.GL_CULL_FACE);
}
