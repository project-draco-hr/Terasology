{
  for (  Vector3i producerChanges : producersSignalsChanged)   networksToRecalculate.addAll(producerNetworks.get(producerChanges));
  Set<Vector3i> consumersToEvaluate=Sets.newHashSet();
  for (  Network network : networksToRecalculate) {
    if (signalNetwork.isNetworkActive(network)) {
      Collection<Vector3i> consumersInNetwork=this.consumersInNetwork.get(network);
      for (      Vector3i consumerLocation : consumersInNetwork) {
        boolean consumerSignalInNetwork=getConsumerSignalInNetwork(network,consumerLocation);
        consumerSignalInNetworks.get(consumerLocation).put(network,consumerSignalInNetwork);
      }
      consumersToEvaluate.addAll(consumersInNetwork);
    }
  }
  for (  Vector3i modifiedConsumer : consumersToRecalculate) {
    Collection<Network> networks=consumerNetworks.get(modifiedConsumer);
    for (    Network network : networks) {
      boolean consumerSignalInNetwork=getConsumerSignalInNetwork(network,modifiedConsumer);
      consumerSignalInNetworks.get(modifiedConsumer).put(network,consumerSignalInNetwork);
    }
    consumersToEvaluate.add(modifiedConsumer);
  }
  for (  Vector3i consumerToEvaluate : consumersToEvaluate) {
    if (signalConsumers.containsKey(consumerToEvaluate)) {
      final EntityRef blockEntity=blockEntityRegistry.getBlockEntityAt(consumerToEvaluate);
      final SignalConsumerStatusComponent consumerStatusComponent=blockEntity.getComponent(SignalConsumerStatusComponent.class);
      final SignalConsumerComponent consumerComponent=blockEntity.getComponent(SignalConsumerComponent.class);
      if (consumerComponent != null && consumerStatusComponent != null) {
        Map<Network,Boolean> consumerSignals=consumerSignalInNetworks.get(consumerToEvaluate);
        boolean newSignal=false;
        if (consumerSignals != null)         newSignal=calculateResultSignal(consumerSignals.values(),consumerComponent);
        if (newSignal != consumerStatusComponent.hasSignal) {
          consumerStatusComponent.hasSignal=newSignal;
          blockEntity.saveComponent(consumerStatusComponent);
          logger.info("Consumer has signal: " + newSignal);
        }
      }
    }
  }
  producersSignalsChanged.clear();
  networksToRecalculate.clear();
  consumersToRecalculate.clear();
}
