{
  TByteObjectMap<String>[] basicBlocks=new TByteObjectMap[7];
  TByteObjectMap<Block> blocksForConnections=new TByteObjectHashMap<>();
  basicBlocks[0]=new TByteObjectHashMap<>();
  basicBlocks[0].put(shapeMapping.get(NO_CONNECTIONS),NO_CONNECTIONS);
  basicBlocks[1]=new TByteObjectHashMap<>();
  basicBlocks[1].put(shapeMapping.get(ONE_CONNECTION),ONE_CONNECTION);
  basicBlocks[2]=new TByteObjectHashMap<>();
  basicBlocks[2].put(shapeMapping.get(TWO_CONNECTIONS_LINE),TWO_CONNECTIONS_LINE);
  basicBlocks[2].put(shapeMapping.get(TWO_CONNECTIONS_CORNER),TWO_CONNECTIONS_CORNER);
  basicBlocks[3]=new TByteObjectHashMap<>();
  basicBlocks[3].put(shapeMapping.get(THREE_CONNECTIONS_CORNER),THREE_CONNECTIONS_CORNER);
  basicBlocks[3].put(shapeMapping.get(THREE_CONNECTIONS_T),THREE_CONNECTIONS_T);
  basicBlocks[4]=new TByteObjectHashMap<>();
  basicBlocks[4].put(shapeMapping.get(FOUR_CONNECTIONS_CROSS),FOUR_CONNECTIONS_CROSS);
  basicBlocks[4].put(shapeMapping.get(FOUR_CONNECTIONS_SIDE),FOUR_CONNECTIONS_SIDE);
  basicBlocks[5]=new TByteObjectHashMap<>();
  basicBlocks[5].put(shapeMapping.get(FIVE_CONNECTIONS),FIVE_CONNECTIONS);
  basicBlocks[6]=new TByteObjectHashMap<>();
  basicBlocks[6].put(shapeMapping.get(SIX_CONNECTIONS),SIX_CONNECTIONS);
  BlockUri blockUri=new BlockUri(definition.getUrn());
  for (byte connections=0; connections < 64; connections++) {
    if ((connections & connectionSides) == connections) {
      Block block=constructBlockForConnections(connections,blockBuilder,definition,basicBlocks);
      if (block == null) {
        throw new IllegalStateException("Unable to find correct block definition for connections: " + connections);
      }
      block.setUri(new BlockUri(blockUri,new Name(String.valueOf(connections))));
      blocksForConnections.put(connections,block);
    }
  }
  final Block archetypeBlock=blocksForConnections.get(SideBitFlag.getSides(Side.RIGHT,Side.LEFT));
  return new UpdatesWithNeighboursFamily(connectionCondition,blockUri,definition.getCategories(),archetypeBlock,blocksForConnections,connectionSides);
}
