{
  TByteObjectMap<BlockDefinition>[] basicBlocks=new TByteObjectMap[7];
  TByteObjectMap<Block> blocksForConnections=new TByteObjectHashMap<>();
  basicBlocks[0]=new TByteObjectHashMap<>();
  basicBlocks[0].put((byte)0,getBlockDefinition(NO_CONNECTIONS,blockBuilder,blockDefJson));
  basicBlocks[1]=new TByteObjectHashMap<>();
  basicBlocks[1].put(SideBitFlag.getSides(Side.BACK),getBlockDefinition(ONE_CONNECTION,blockBuilder,blockDefJson));
  basicBlocks[2]=new TByteObjectHashMap<>();
  basicBlocks[2].put(SideBitFlag.getSides(Side.BACK,Side.FRONT),getBlockDefinition(TWO_CONNECTIONS_LINE,blockBuilder,blockDefJson));
  basicBlocks[2].put(SideBitFlag.getSides(Side.LEFT,Side.BACK),getBlockDefinition(TWO_CONNECTIONS_CORNER,blockBuilder,blockDefJson));
  basicBlocks[3]=new TByteObjectHashMap<>();
  basicBlocks[3].put(SideBitFlag.getSides(Side.LEFT,Side.BACK,Side.TOP),getBlockDefinition(THREE_CONNECTIONS_CORNER,blockBuilder,blockDefJson));
  basicBlocks[3].put(SideBitFlag.getSides(Side.LEFT,Side.BACK,Side.FRONT),getBlockDefinition(THREE_CONNECTIONS_T,blockBuilder,blockDefJson));
  basicBlocks[4]=new TByteObjectHashMap<>();
  basicBlocks[4].put(SideBitFlag.getSides(Side.RIGHT,Side.LEFT,Side.BACK,Side.FRONT),getBlockDefinition(FOUR_CONNECTIONS_CROSS,blockBuilder,blockDefJson));
  basicBlocks[4].put(SideBitFlag.getSides(Side.LEFT,Side.BACK,Side.FRONT,Side.TOP),getBlockDefinition(FOUR_CONNECTIONS_SIDE,blockBuilder,blockDefJson));
  basicBlocks[5]=new TByteObjectHashMap<>();
  basicBlocks[5].put(SideBitFlag.getSides(Side.LEFT,Side.BACK,Side.FRONT,Side.TOP,Side.BOTTOM),getBlockDefinition(FIVE_CONNECTIONS,blockBuilder,blockDefJson));
  basicBlocks[6]=new TByteObjectHashMap<>();
  basicBlocks[6].put((byte)63,getBlockDefinition(SIX_CONNECTIONS,blockBuilder,blockDefJson));
  BlockUri blockUri=new BlockUri(blockDefUri.getModuleName(),blockDefUri.getAssetName());
  for (byte connections=0; connections < 64; connections++) {
    Block block=constructBlockForConnections(connections,blockBuilder,blockDefUri,basicBlocks);
    if (block == null) {
      throw new IllegalStateException("Unable to find correct block definition for connections: " + connections);
    }
    block.setUri(new BlockUri(blockUri,String.valueOf(connections)));
    blocksForConnections.put(connections,block);
  }
  final Block archetypeBlock=blocksForConnections.get(SideBitFlag.getSides(Side.RIGHT,Side.LEFT));
  return new UpdatesWithNeighboursFamily(connectionCondition,blockUri,blockDefinition.categories,archetypeBlock,blocksForConnections,connectionSides);
}
