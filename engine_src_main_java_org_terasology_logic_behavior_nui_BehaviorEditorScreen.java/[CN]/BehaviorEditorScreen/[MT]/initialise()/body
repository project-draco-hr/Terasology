{
  entityProperties=find("entity_properties",PropertyLayout.class);
  behaviorEditor=find("tree",BehaviorEditor.class);
  properties=find("properties",PropertyLayout.class);
  selectTree=find("select_tree",UIDropdown.class);
  selectEntity=find("select_entity",UIDropdown.class);
  palette=find("palette",UIDropdown.class);
  behaviorEditor.bindSelection(new Binding<RenderableNode>(){
    @Override public RenderableNode get(){
      return selectedNode;
    }
    @Override public void set(    RenderableNode value){
      selectedNode=value;
      PropertyProvider<?> provider=new PropertyProvider<>(value.getNode());
      properties.clear();
      properties.addPropertyProvider("Behavior Node",provider);
    }
  }
);
  selectTree.bindOptions(new Binding<List<BehaviorTree>>(){
    @Override public List<BehaviorTree> get(){
      return Lists.newArrayList(CoreRegistry.get(BehaviorSystem.class).getTrees());
    }
    @Override public void set(    List<BehaviorTree> value){
    }
  }
);
  selectTree.bindSelection(new Binding<BehaviorTree>(){
    @Override public BehaviorTree get(){
      return behaviorEditor.getTree();
    }
    @Override public void set(    BehaviorTree value){
      selectedTree=value;
      behaviorEditor.setTree(value);
    }
  }
);
  selectEntity.bindOptions(new Binding<List<Interpreter>>(){
    @Override public List<Interpreter> get(){
      BehaviorTree selection=selectTree.getSelection();
      if (selection != null) {
        return CoreRegistry.get(BehaviorSystem.class).getInterpreter(selection);
      }
 else {
        return Arrays.asList();
      }
    }
    @Override public void set(    List<Interpreter> value){
    }
  }
);
  selectEntity.bindSelection(new Binding<Interpreter>(){
    @Override public Interpreter get(){
      return selectedInterpreter;
    }
    @Override public void set(    Interpreter value){
      selectedInterpreter=value;
      EntityRef minion=value.actor().minion();
      entityProperties.clear();
      for (      Component component : minion.iterateComponents()) {
        entityProperties.addPropertyProvider(component.getClass().getSimpleName(),new PropertyProvider<>(component));
      }
      debugger=new BehaviorDebugger(selectedTree);
      selectedInterpreter.setDebugger(debugger);
    }
  }
);
  palette.bindOptions(new Binding<List<BehaviorNodeComponent>>(){
    @Override public List<BehaviorNodeComponent> get(){
      return Lists.newArrayList(CoreRegistry.get(BehaviorNodeFactory.class).getNodeComponents());
    }
    @Override public void set(    List<BehaviorNodeComponent> value){
    }
  }
);
  UIScreenLayerUtil.trySubscribe(this,"create",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      behaviorEditor.createNode(palette.getSelection());
    }
  }
);
  UIScreenLayerUtil.trySubscribe(this,"copy",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      Clipboard systemClipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
      String data=behaviorEditor.save();
      StringSelection contents=new StringSelection(data);
      systemClipboard.setContents(contents,contents);
    }
  }
);
  UIScreenLayerUtil.trySubscribe(this,"layout",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      BehaviorTree selection=selectTree.getSelection();
      if (selection != null) {
        selection.layout(selectedNode);
      }
    }
  }
);
  UIScreenLayerUtil.trySubscribe(this,"debug_run",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      if (debugger != null) {
        debugger.run();
      }
    }
  }
);
  UIScreenLayerUtil.trySubscribe(this,"debug_pause",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      if (debugger != null) {
        debugger.pause();
      }
    }
  }
);
  UIScreenLayerUtil.trySubscribe(this,"debug_reset",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      if (selectedInterpreter != null) {
        selectedInterpreter.reset();
      }
    }
  }
);
  UIScreenLayerUtil.trySubscribe(this,"debug_step",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      if (debugger != null) {
        debugger.step();
      }
    }
  }
);
}
