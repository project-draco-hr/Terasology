{
  PropertyLayout entityProperties=find("entity_properties",PropertyLayout.class);
  entityProperties.addPropertyProvider("Location",new PropertyProvider<>(new LocationComponent()));
  entityProperties.addPropertyProvider("Movement",new PropertyProvider<>(new CharacterMovementComponent()));
  find("tree",BehaviorEditor.class).bindSelection(new Binding<RenderableNode>(){
    @Override public RenderableNode get(){
      return null;
    }
    @Override public void set(    RenderableNode value){
      PropertyProvider<?> provider=new PropertyProvider<>(value.getNode());
      PropertyLayout properties=find("properties",PropertyLayout.class);
      properties.clear();
      properties.addPropertyProvider("Behavior Node",provider);
    }
  }
);
  find("select_tree",UIDropdown.class).bindSelection(new Binding<BehaviorTree>(){
    @Override public BehaviorTree get(){
      return null;
    }
    @Override public void set(    BehaviorTree value){
      find("tree",BehaviorEditor.class).setTree(value);
    }
  }
);
  find("select_tree",UIDropdown.class).bindOptions(new Binding<List<BehaviorTree>>(){
    @Override public List<BehaviorTree> get(){
      return Lists.newArrayList(CoreRegistry.get(BehaviorSystem.class).getTrees());
    }
    @Override public void set(    List<BehaviorTree> value){
    }
  }
);
  find("select_entity",UIDropdown.class).bindOptions(new Binding<List<Interpreter>>(){
    @Override public List<Interpreter> get(){
      BehaviorTree selection=(BehaviorTree)find("select_tree",UIDropdown.class).getSelection();
      if (selection != null) {
        return CoreRegistry.get(BehaviorSystem.class).getInterpreter(selection);
      }
 else {
        return Arrays.asList();
      }
    }
    @Override public void set(    List<Interpreter> value){
    }
  }
);
  find("palette",UIDropdown.class).bindOptions(new Binding<List<BehaviorNodeComponent>>(){
    @Override public List<BehaviorNodeComponent> get(){
      return Lists.newArrayList(CoreRegistry.get(BehaviorNodeFactory.class).getNodeComponents());
    }
    @Override public void set(    List<BehaviorNodeComponent> value){
    }
  }
);
  UIScreenUtil.trySubscribe(this,"create",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      find("tree",BehaviorEditor.class).createNode((BehaviorNodeComponent)find("palette",UIDropdown.class).getSelection());
    }
  }
);
  UIScreenUtil.trySubscribe(this,"copy",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      Clipboard systemClipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
      String tree=find("tree",BehaviorEditor.class).save();
      StringSelection contents=new StringSelection(tree);
      systemClipboard.setContents(contents,contents);
    }
  }
);
}
