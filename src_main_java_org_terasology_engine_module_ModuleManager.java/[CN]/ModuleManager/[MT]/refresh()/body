{
  modules.clear();
  Gson gson=new Gson();
  for (  Path rootModPath : PathManager.getInstance().getModPaths()) {
    try {
      for (      Path modPath : Files.newDirectoryStream(rootModPath,FilesUtil.DIRECTORY_FILTER)) {
        processModDirectory(modPath,gson);
      }
    }
 catch (    IOException e) {
      logger.error("Failed to scan for directory modules",e);
    }
    try {
      for (      Path modPath : Files.newDirectoryStream(rootModPath,new DirectoryStream.Filter<Path>(){
        @Override public boolean accept(        Path entry) throws IOException {
          return Files.isRegularFile(entry) && (entry.toString().endsWith(".jar") || entry.toString().endsWith(".zip"));
        }
      }
)) {
        processModArchive(modPath,gson);
      }
    }
 catch (    IOException e) {
      logger.error("Failed to scan for jar and zip modules",e);
    }
  }
  List<URL> urls=Lists.newArrayList();
  for (  ExtensionModule module : getExtensionModules()) {
    if (module.isCodeModule()) {
      urls.add(module.getModuleClasspathUrl());
    }
  }
  if (allModuleClassLoader != null) {
    try {
      allModuleClassLoader.close();
    }
 catch (    IOException e) {
      logger.error("Failed to cloase allModuleClassLoader",e);
    }
  }
  allModuleClassLoader=new URLClassLoader(urls.toArray(new URL[urls.size()]),getClass().getClassLoader());
  for (  ExtensionModule module : getExtensionModules()) {
    module.setInactiveClassLoader(allModuleClassLoader);
  }
  if (activeModuleClassLoader != null) {
    try {
      activeModuleClassLoader.close();
    }
 catch (    IOException e) {
      logger.error("Failed to close activeModuleClassLoader",e);
    }
  }
  allReflections=null;
}
