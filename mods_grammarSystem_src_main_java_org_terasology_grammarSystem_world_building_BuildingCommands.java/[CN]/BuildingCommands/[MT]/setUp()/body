{
  ShapeSymbol axiom=new ShapeSymbol("axiom");
  ShapeSymbol house=new ShapeSymbol("house");
  ShapeSymbol floor=new ShapeSymbol("floor");
  ShapeSymbol roof=new ShapeSymbol("roof");
  SetRule setStone=new SetRule(new BlockUri("engine:cobblestone"));
  SetRule setPlank=new SetRule(new BlockUri("engine:plank"));
  SplitArg walls=new SplitArg(SplitArg.SplitType.WALLS,setStone);
  SplitRule splitWalls=new SplitRule(Arrays.asList(walls));
  DivideArg floorArg=new DivideArg(new Size(1f,false),floor);
  DivideArg roofArg=new DivideArg(new Size(1f,true),roof);
  List<DivideArg> divArgs=new ArrayList<DivideArg>(2);
  divArgs.add(floorArg);
  divArgs.add(roofArg);
  DivideRule divHouse=new DivideRule(divArgs,DivideRule.Direction.Y);
  Map<String,List<Shape>> rules=new HashMap<String,List<Shape>>();
  rules.put(axiom.getLabel(),Arrays.<Shape>asList(house));
  rules.put(house.getLabel(),Arrays.<Shape>asList(divHouse));
  rules.put(floor.getLabel(),Arrays.<Shape>asList(splitWalls));
  rules.put(roof.getLabel(),Arrays.<Shape>asList(setPlank));
  ProductionSystem system=new ProductionSystem(rules,axiom);
  Grammar grammar=new Grammar(system);
  return new BuildingGenerator(grammar);
}
