{
  ShapeSymbol house=new ShapeSymbol("house");
  ShapeSymbol ground_floor=new ShapeSymbol("ground_floor");
  ShapeSymbol wall=new ShapeSymbol("wall");
  ShapeSymbol wall_inner=new ShapeSymbol("wall_inner");
  ShapeSymbol win_wall=new ShapeSymbol("win_wall");
  ShapeSymbol door=new ShapeSymbol("door");
  ShapeSymbol border=new ShapeSymbol("border");
  ShapeSymbol middle_part=new ShapeSymbol("middle_part");
  ShapeSymbol middle_part_walls=new ShapeSymbol("middle_part_walls");
  SetRule setStone=new SetRule(BlockManager.getInstance().resolveBlockUri("stone").get(0));
  SetRule setCobblestone=new SetRule(BlockManager.getInstance().resolveBlockUri("cobblestone").get(0));
  SetRule setOaktrunk=new SetRule(BlockManager.getInstance().resolveBlockUri("oaktrunk").get(0));
  SetRule setGlass=new SetRule(BlockManager.getInstance().resolveBlockUri("glass").get(0));
  SetRule setPlank=new SetRule(BlockManager.getInstance().resolveBlockUri("plank").get(0));
  SetRule setAir=new SetRule(BlockManager.getInstance().resolveBlockUri("air").get(0));
  DivideArg divideHouseGroundFloorArg=new DivideArg(new Size(3f,true),ground_floor);
  DivideArg divideHouseBorderArg=new DivideArg(new Size(1f,true),border);
  DivideArg divideHouseMiddlePartArg=new DivideArg(new Size(1f,false),middle_part);
  DivideArg divideHouseRoofArg=new DivideArg(new Size(1f,true),setPlank.clone());
  LinkedList<DivideArg> divideHouseArgs=new LinkedList<DivideArg>();
  divideHouseArgs.add(divideHouseGroundFloorArg);
  divideHouseArgs.add(divideHouseBorderArg);
  divideHouseArgs.add(divideHouseMiddlePartArg);
  divideHouseArgs.add(divideHouseRoofArg);
  DivideRule divideHouse=new DivideRule(divideHouseArgs,DivideRule.Direction.Y);
  DivideArg divideWallStone1Arg=new DivideArg(new Size(1f,true),setStone.clone());
  DivideArg divideWallInnerArg=new DivideArg(new Size(1f,false),wall_inner);
  DivideArg divideWallStone2Arg=new DivideArg(new Size(1f,true),setStone.clone());
  LinkedList<DivideArg> divideWallArgs=new LinkedList<DivideArg>();
  divideWallArgs.add(divideWallStone1Arg);
  divideWallArgs.add(divideWallInnerArg);
  divideWallArgs.add(divideWallStone2Arg);
  DivideRule divideWall=new DivideRule(divideWallArgs,DivideRule.Direction.X);
  DivideArg divideWallInnerCobblestoneArg=new DivideArg(new Size(.3f,false),setCobblestone.clone());
  DivideArg divideWallInnerDoorArg=new DivideArg(new Size(1f,true),door);
  DivideArg divideWallInnerWinWallArg=new DivideArg(new Size(.7f,false),win_wall);
  LinkedList<DivideArg> divideWallInnerArgs=new LinkedList<DivideArg>();
  divideWallInnerArgs.add(divideWallInnerCobblestoneArg);
  divideWallInnerArgs.add(divideWallInnerDoorArg);
  divideWallInnerArgs.add(divideWallInnerWinWallArg);
  DivideRule divideWallInner=new DivideRule(divideWallInnerArgs,DivideRule.Direction.X);
  DivideArg divideWinWallBottomArg=new DivideArg(new Size(1f,true),setCobblestone.clone());
  DivideArg divideWinWallMiddleArg=new DivideArg(new Size(1f,true),setGlass.clone());
  DivideArg divideWinWallTopArg=new DivideArg(new Size(1f,true),setCobblestone.clone());
  LinkedList<DivideArg> divideWinWallArgs=new LinkedList<DivideArg>();
  divideWinWallArgs.add(divideWinWallBottomArg);
  divideWinWallArgs.add(divideWinWallMiddleArg);
  divideWinWallArgs.add(divideWinWallTopArg);
  DivideRule divideWinWall=new DivideRule(divideWinWallArgs,DivideRule.Direction.Y);
  DivideArg doorAirArg=new DivideArg(new Size(2f,true),setAir);
  DivideArg doorTopArg=new DivideArg(new Size(1f,true),setCobblestone);
  LinkedList<DivideArg> divideDoorArgs=new LinkedList<DivideArg>();
  divideDoorArgs.add(doorAirArg);
  divideDoorArgs.add(doorTopArg);
  DivideRule divideDoor=new DivideRule(divideDoorArgs,DivideRule.Direction.Y);
  DivideArg divideMiddlePartWallsLeft=new DivideArg(new Size(1f,true),setOaktrunk.clone());
  DivideArg divideMiddlePartWallsCenter=new DivideArg(new Size(1f,false),setStone.clone());
  DivideArg divideMiddlePartWallsRight=new DivideArg(new Size(1f,true),setOaktrunk.clone());
  LinkedList<DivideArg> divideMiddlePartWallsArgs=new LinkedList<DivideArg>();
  divideMiddlePartWallsArgs.add(divideMiddlePartWallsLeft);
  divideMiddlePartWallsArgs.add(divideMiddlePartWallsCenter);
  divideMiddlePartWallsArgs.add(divideMiddlePartWallsRight);
  DivideRule divideMiddlePartWalls=new DivideRule(divideMiddlePartWallsArgs,DivideRule.Direction.X);
  SplitArg splitWallArg=new SplitArg(SplitArg.SplitType.WALLS,wall);
  SplitRule splitGroundFloor=new SplitRule(Arrays.asList(splitWallArg));
  SplitArg splitBorderArg=new SplitArg(SplitArg.SplitType.WALLS,setOaktrunk);
  SplitRule splitBorder=new SplitRule(Arrays.asList(splitBorderArg));
  SplitArg splitMiddlePartArg=new SplitArg(SplitArg.SplitType.WALLS,middle_part_walls);
  SplitRule splitMiddlePart=new SplitRule(Arrays.asList(splitMiddlePartArg));
  Map<String,List<Shape>> rules=new HashMap<String,List<Shape>>();
  rules.put(house.getLabel(),Arrays.<Shape>asList(divideHouse));
  rules.put(ground_floor.getLabel(),Arrays.<Shape>asList(splitGroundFloor));
  rules.put(wall.getLabel(),Arrays.<Shape>asList(divideWall));
  rules.put(wall_inner.getLabel(),Arrays.<Shape>asList(divideWallInner));
  rules.put(win_wall.getLabel(),Arrays.<Shape>asList(divideWinWall));
  rules.put(door.getLabel(),Arrays.<Shape>asList(divideDoor));
  rules.put(border.getLabel(),Arrays.<Shape>asList(splitBorder));
  rules.put(middle_part.getLabel(),Arrays.<Shape>asList(splitMiddlePart));
  rules.put(middle_part_walls.getLabel(),Arrays.<Shape>asList(divideMiddlePartWalls));
  ProductionSystem system=new ProductionSystem(rules,house);
  Grammar grammar=new Grammar(system);
  return new BuildingGenerator(grammar);
}
