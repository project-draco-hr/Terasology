{
  Map<String,List<Shape>> rules=new HashMap<String,List<Shape>>();
  SetRule setStone=new SetRule(new BlockUri("engine:stone"));
  SetRule setGlass=new SetRule(new BlockUri("engine:glass"));
  DivideArg winWallStoneArg1=new DivideArg(new Size(.5f,false),setStone);
  DivideArg winWallGlassArg=new DivideArg(new Size(1f,true),setGlass);
  DivideArg winWallStoneArg2=new DivideArg(new Size(.5f,false),setStone);
  List<DivideArg> args=new ArrayList<DivideArg>();
  args.add(winWallStoneArg1);
  args.add(winWallGlassArg);
  args.add(winWallStoneArg2);
  DivideRule winWallDivide=new DivideRule(args,DivideRule.Direction.X);
  ShapeSymbol wall=new ShapeSymbol("wall");
  rules.put(wall.getLabel(),Arrays.<Shape>asList(winWallDivide));
  SplitArg splitWallsArgs=new SplitArg(SplitArg.SplitType.WALLS,wall);
  SplitRule splitWalls=new SplitRule(Arrays.asList(splitWallsArgs));
  ShapeSymbol floor=new ShapeSymbol("floor");
  rules.put(floor.getLabel(),Arrays.<Shape>asList(splitWalls));
  Grammar grammar=new Grammar(new ProductionSystem(rules,floor));
  return new BuildingGenerator(grammar);
}
