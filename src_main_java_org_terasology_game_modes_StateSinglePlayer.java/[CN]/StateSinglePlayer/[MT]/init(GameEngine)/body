{
  ModManager modManager=new ModManager();
  for (  Mod mod : modManager.getMods()) {
    mod.setEnabled(true);
  }
  modManager.saveModSelectionToConfig();
  cacheTextures();
  BlockShapeManager.getInstance().reload();
  componentLibrary=new ComponentLibraryImpl();
  CoreRegistry.put(ComponentLibrary.class,componentLibrary);
  componentLibrary.registerTypeHandler(BlockFamily.class,new BlockFamilyTypeHandler());
  componentLibrary.registerTypeHandler(Color4f.class,new Color4fTypeHandler());
  componentLibrary.registerTypeHandler(Quat4f.class,new Quat4fTypeHandler());
  componentLibrary.registerTypeHandler(Mesh.class,new AssetTypeHandler(AssetType.MESH,Mesh.class));
  componentLibrary.registerTypeHandler(Sound.class,new AssetTypeHandler(AssetType.SOUND,Sound.class));
  componentLibrary.registerTypeHandler(Material.class,new AssetTypeHandler(AssetType.MATERIAL,Material.class));
  componentLibrary.registerTypeHandler(Vector3f.class,new Vector3fTypeHandler());
  componentLibrary.registerTypeHandler(Vector2f.class,new Vector2fTypeHandler());
  componentLibrary.registerTypeHandler(Vector3i.class,new Vector3iTypeHandler());
  PrefabManager prefabManager=new PojoPrefabManager(componentLibrary);
  CoreRegistry.put(PrefabManager.class,prefabManager);
  _entityManager=new PojoEntityManager(componentLibrary,prefabManager);
  EventSystem eventSystem=new PojoEventSystem(_entityManager);
  _entityManager.setEventSystem(eventSystem);
  CoreRegistry.put(EntityManager.class,_entityManager);
  _componentSystemManager=new ComponentSystemManager();
  CoreRegistry.put(ComponentSystemManager.class,_componentSystemManager);
  CoreRegistry.put(WorldPersister.class,new WorldPersister(componentLibrary,_entityManager));
  eventSystem.registerEvent("engine:inputEvent",InputEvent.class);
  eventSystem.registerEvent("engine:keyDownEvent",KeyDownEvent.class);
  eventSystem.registerEvent("engine:keyEvent",KeyEvent.class);
  eventSystem.registerEvent("engine:keyUpEvent",KeyUpEvent.class);
  eventSystem.registerEvent("engine:keyRepeatEvent",KeyRepeatEvent.class);
  eventSystem.registerEvent("engine:leftMouseDownButtonEvent",LeftMouseDownButtonEvent.class);
  eventSystem.registerEvent("engine:leftMouseUpButtonEvent",LeftMouseUpButtonEvent.class);
  eventSystem.registerEvent("engine:mouseDownButtonEvent",MouseDownButtonEvent.class);
  eventSystem.registerEvent("engine:mouseUpButtonEvent",MouseUpButtonEvent.class);
  eventSystem.registerEvent("engine:mouseButtonEvent",MouseButtonEvent.class);
  eventSystem.registerEvent("engine:mouseWheelEvent",MouseWheelEvent.class);
  eventSystem.registerEvent("engine:rightMouseDownButtonEvent",RightMouseDownButtonEvent.class);
  eventSystem.registerEvent("engine:rightMouseUpButtonEvent",RightMouseUpButtonEvent.class);
  eventSystem.registerEvent("engine:bindButtonEvent",BindButtonEvent.class);
  eventSystem.registerEvent("engine:inventoryButtonEvent",InventoryButton.class);
  componentLibrary.registerComponentClass(ExplosionActionComponent.class);
  componentLibrary.registerComponentClass(PlaySoundActionComponent.class);
  componentLibrary.registerComponentClass(TunnelActionComponent.class);
  componentLibrary.registerComponentClass(AABBCollisionComponent.class);
  componentLibrary.registerComponentClass(BlockComponent.class);
  componentLibrary.registerComponentClass(BlockItemComponent.class);
  componentLibrary.registerComponentClass(BlockParticleEffectComponent.class);
  componentLibrary.registerComponentClass(CameraComponent.class);
  componentLibrary.registerComponentClass(CharacterMovementComponent.class);
  componentLibrary.registerComponentClass(CharacterSoundComponent.class);
  componentLibrary.registerComponentClass(HealthComponent.class);
  componentLibrary.registerComponentClass(InventoryComponent.class);
  componentLibrary.registerComponentClass(ItemComponent.class);
  componentLibrary.registerComponentClass(LightComponent.class);
  componentLibrary.registerComponentClass(LocalPlayerComponent.class);
  componentLibrary.registerComponentClass(LocationComponent.class);
  componentLibrary.registerComponentClass(MeshComponent.class);
  componentLibrary.registerComponentClass(PlayerComponent.class);
  componentLibrary.registerComponentClass(SimpleAIComponent.class);
  componentLibrary.registerComponentClass(SimpleMinionAIComponent.class);
  componentLibrary.registerComponentClass(MinionBarComponent.class);
  componentLibrary.registerComponentClass(MinionComponent.class);
  componentLibrary.registerComponentClass(AccessInventoryActionComponent.class);
  componentLibrary.registerComponentClass(SpawnPrefabActionComponent.class);
  componentLibrary.registerComponentClass(BookComponent.class);
  componentLibrary.registerComponentClass(BookshelfComponent.class);
  componentLibrary.registerComponentClass(PotionComponent.class);
  componentLibrary.registerComponentClass(SpeedBoostComponent.class);
  componentLibrary.registerComponentClass(PoisonedComponent.class);
  loadPrefabs();
  BlockEntityRegistry blockEntityRegistry=new BlockEntityRegistry();
  _inputSystem=new InputSystem();
  CoreRegistry.put(InputSystem.class,_inputSystem);
  _componentSystemManager.register(_inputSystem,"engine:InputSystem");
  _componentSystemManager.register(blockEntityRegistry,"engine:BlockEntityRegistry");
  CoreRegistry.put(BlockEntityRegistry.class,blockEntityRegistry);
  _componentSystemManager.register(new CharacterMovementSystem(),"engine:CharacterMovementSystem");
  _componentSystemManager.register(new SimpleAISystem(),"engine:SimpleAISystem");
  _componentSystemManager.register(new SimpleMinionAISystem(),"engine:SimpleMinionAISystem");
  _componentSystemManager.register(new ItemSystem(),"engine:ItemSystem");
  _componentSystemManager.register(new CharacterSoundSystem(),"engine:CharacterSoundSystem");
  _localPlayerSys=new LocalPlayerSystem();
  _componentSystemManager.register(_localPlayerSys,"engine:LocalPlayerSystem");
  _componentSystemManager.register(new FirstPersonRenderer(),"engine:FirstPersonRenderer");
  _componentSystemManager.register(new HealthSystem(),"engine:HealthSystem");
  _componentSystemManager.register(new BlockEntitySystem(),"engine:BlockEntitySystem");
  _componentSystemManager.register(new BlockParticleEmitterSystem(),"engine:BlockParticleSystem");
  _componentSystemManager.register(new BlockDamageRenderer(),"engine:BlockDamageRenderer");
  _componentSystemManager.register(new InventorySystem(),"engine:InventorySystem");
  _componentSystemManager.register(new MeshRenderer(),"engine:MeshRenderer");
  _componentSystemManager.register(new ExplosionAction(),"engine:ExplosionAction");
  _componentSystemManager.register(new PlaySoundAction(),"engine:PlaySoundAction");
  _componentSystemManager.register(new TunnelAction(),"engine:TunnelAction");
  _componentSystemManager.register(new AccessInventoryAction(),"engine:AccessInventoryAction");
  _componentSystemManager.register(new SpawnPrefabAction(),"engine:SpawnPrefabAction");
  _componentSystemManager.register(new ReadBookAction(),"engine:ReadBookAction");
  _componentSystemManager.register(new BookshelfHandler(),"engine:BookshelfHandler");
  _componentSystemManager.register(new DrinkPotionAction(),"engine:DrinkPotionAction");
  _componentSystemManager.register(new StatusAffectorSystem(),"engine:StatusAffectorSystem");
  _componentSystemManager.register(new MenuControlSystem(),"engine:MenuControlSystem");
  _componentSystemManager.register(new DebugControlSystem(),"engine:DebugControlSystem");
}
