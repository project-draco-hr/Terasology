{
  ModManager modManager=new ModManager();
  for (  Mod mod : modManager.getMods()) {
    mod.setEnabled(true);
  }
  modManager.saveModSelectionToConfig();
  BlockShapeManager.getInstance().reload();
  componentLibrary=new ComponentLibraryImpl();
  componentLibrary.registerTypeHandler(BlockFamily.class,new BlockFamilyTypeHandler());
  componentLibrary.registerTypeHandler(Color4f.class,new Color4fTypeHandler());
  componentLibrary.registerTypeHandler(Quat4f.class,new Quat4fTypeHandler());
  componentLibrary.registerTypeHandler(Sound.class,new SoundTypeHandler(AudioManager.getInstance()));
  componentLibrary.registerTypeHandler(Vector3f.class,new Vector3fTypeHandler());
  componentLibrary.registerTypeHandler(Vector2f.class,new Vector2fTypeHandler());
  componentLibrary.registerTypeHandler(Vector3i.class,new Vector3iTypeHandler());
  PrefabManager prefabManager=new PojoPrefabManager();
  CoreRegistry.put(PrefabManager.class,prefabManager);
  _entityManager=new PojoEntityManager(componentLibrary,prefabManager);
  _entityManager.setEventSystem(new PojoEventSystem(_entityManager));
  CoreRegistry.put(EntityManager.class,_entityManager);
  _componentSystemManager=new ComponentSystemManager();
  CoreRegistry.put(ComponentSystemManager.class,_componentSystemManager);
  CoreRegistry.put(WorldPersister.class,new WorldPersister(componentLibrary,_entityManager));
  componentLibrary.registerComponentClass(ExplosionActionComponent.class);
  componentLibrary.registerComponentClass(PlaySoundActionComponent.class);
  componentLibrary.registerComponentClass(TunnelActionComponent.class);
  componentLibrary.registerComponentClass(AABBCollisionComponent.class);
  componentLibrary.registerComponentClass(BlockComponent.class);
  componentLibrary.registerComponentClass(BlockItemComponent.class);
  componentLibrary.registerComponentClass(BlockParticleEffectComponent.class);
  componentLibrary.registerComponentClass(CameraComponent.class);
  componentLibrary.registerComponentClass(CharacterMovementComponent.class);
  componentLibrary.registerComponentClass(CharacterSoundComponent.class);
  componentLibrary.registerComponentClass(HealthComponent.class);
  componentLibrary.registerComponentClass(InventoryComponent.class);
  componentLibrary.registerComponentClass(ItemComponent.class);
  componentLibrary.registerComponentClass(LightComponent.class);
  componentLibrary.registerComponentClass(LocalPlayerComponent.class);
  componentLibrary.registerComponentClass(LocationComponent.class);
  componentLibrary.registerComponentClass(MeshComponent.class);
  componentLibrary.registerComponentClass(PlayerComponent.class);
  componentLibrary.registerComponentClass(SimpleAIComponent.class);
  componentLibrary.registerComponentClass(AccessInventoryActionComponent.class);
  componentLibrary.registerComponentClass(SpawnPrefabActionComponent.class);
  componentLibrary.registerComponentClass(BookComponent.class);
  componentLibrary.registerComponentClass(BookshelfComponent.class);
  componentLibrary.registerComponentClass(PotionComponent.class);
  componentLibrary.registerComponentClass(SpeedBoostComponent.class);
  componentLibrary.registerComponentClass(PoisonedComponent.class);
  loadPrefabs();
  BlockEntityRegistry blockEntityRegistry=new BlockEntityRegistry();
  _componentSystemManager.register(blockEntityRegistry,"engine:BlockEntityRegistry");
  CoreRegistry.put(BlockEntityRegistry.class,blockEntityRegistry);
  _componentSystemManager.register(new CharacterMovementSystem(),"engine:CharacterMovementSystem");
  _componentSystemManager.register(new SimpleAISystem(),"engine:SimpleAISystem");
  _componentSystemManager.register(new ItemSystem(),"engine:ItemSystem");
  _componentSystemManager.register(new CharacterSoundSystem(),"engine:CharacterSoundSystem");
  _localPlayerSys=new LocalPlayerSystem();
  _componentSystemManager.register(_localPlayerSys,"engine:LocalPlayerSystem");
  _componentSystemManager.register(new FirstPersonRenderer(),"engine:FirstPersonRenderer");
  _componentSystemManager.register(new HealthSystem(),"engine:HealthSystem");
  _componentSystemManager.register(new BlockEntitySystem(),"engine:BlockEntitySystem");
  _componentSystemManager.register(new BlockParticleEmitterSystem(),"engine:BlockParticleSystem");
  _componentSystemManager.register(new BlockDamageRenderer(),"engine:BlockDamageRenderer");
  _componentSystemManager.register(new InventorySystem(),"engine:InventorySystem");
  _componentSystemManager.register(new MeshRenderer(),"engine:MeshRenderer");
  _componentSystemManager.register(new ExplosionAction(),"engine:ExplosionAction");
  _componentSystemManager.register(new PlaySoundAction(),"engine:PlaySoundAction");
  _componentSystemManager.register(new TunnelAction(),"engine:TunnelAction");
  _componentSystemManager.register(new AccessInventoryAction(),"engine:AccessInventoryAction");
  _componentSystemManager.register(new SpawnPrefabAction(),"engine:SpawnPrefabAction");
  _componentSystemManager.register(new ReadBookAction(),"engine: ReadBookAction");
  _componentSystemManager.register(new BookshelfHandler(),"engine: BookshelfHandler");
  _componentSystemManager.register(new DrinkPotionAction(),"engine : DrinkPotionAction");
  _componentSystemManager.register(new StatusAffectorSystem(),"engine : StatusAffectorSystem");
  _hud=new UIHeadsUpDisplay();
  _hud.setVisible(true);
  _pauseMenu=new UIPauseMenu();
  _loadingScreen=new UILoadingScreen();
  _statusScreen=new UIStatusScreen();
  _inventoryScreen=new UIInventoryScreen();
  _metrics=new UIMetrics();
  _metrics.setVisible(true);
  _guiScreens.add(_metrics);
  _guiScreens.add(_hud);
  _guiScreens.add(_pauseMenu);
  _guiScreens.add(_loadingScreen);
  _guiScreens.add(_inventoryScreen);
  _guiScreens.add(_statusScreen);
}
