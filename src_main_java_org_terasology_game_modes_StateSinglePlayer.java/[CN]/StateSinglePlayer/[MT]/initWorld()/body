{
  final FastRandom random=new FastRandom();
  if (worldRenderer != null) {
    worldRenderer.dispose();
    worldRenderer=null;
  }
  if (worldInfo.getSeed() == null || worldInfo.getSeed().isEmpty()) {
    worldInfo.setSeed(random.randomCharacterString(16));
  }
  logger.info("World seed: \"{0}\"",worldInfo.getSeed());
  ChunkGeneratorManager chunkGeneratorManager=ChunkGeneratorManagerImpl.buildChunkGenerator(Arrays.asList(worldInfo.getChunkGenerators()));
  chunkGeneratorManager.setWorldSeed(worldInfo.getSeed());
  chunkGeneratorManager.setWorldBiomeProvider(new WorldBiomeProviderImpl(worldInfo.getSeed()));
  worldRenderer=new WorldRenderer(worldInfo,chunkGeneratorManager,entityManager,localPlayerSys);
  CoreRegistry.put(WorldRenderer.class,worldRenderer);
  CoreRegistry.put(WorldRenderer.class,worldRenderer);
  CoreRegistry.put(WorldProvider.class,worldRenderer.getWorldProvider());
  CoreRegistry.put(LocalPlayer.class,new LocalPlayer(EntityRef.NULL));
  CoreRegistry.put(Camera.class,worldRenderer.getActiveCamera());
  CoreRegistry.put(BulletPhysics.class,worldRenderer.getBulletRenderer());
  for (  ComponentSystem system : componentSystemManager.iterateAll()) {
    system.initialise();
  }
  File entityDataFile=new File(PathManager.getInstance().getWorldSavePath(worldInfo.getTitle()),ENTITY_DATA_FILE);
  entityManager.clear();
  if (entityDataFile.exists()) {
    try {
      CoreRegistry.get(WorldPersister.class).load(entityDataFile,WorldPersister.SaveFormat.Binary);
    }
 catch (    IOException e) {
      logger.error("Failed to load entity data",e);
    }
  }
  Iterator<EntityRef> worldEntityIterator=entityManager.iteratorEntities(WorldComponent.class).iterator();
  if (worldEntityIterator.hasNext()) {
    worldRenderer.getChunkProvider().setWorldEntity(worldEntityIterator.next());
  }
 else {
    EntityRef worldEntity=entityManager.create();
    worldEntity.addComponent(new WorldComponent());
    worldRenderer.getChunkProvider().setWorldEntity(worldEntity);
  }
  prepareWorld();
}
