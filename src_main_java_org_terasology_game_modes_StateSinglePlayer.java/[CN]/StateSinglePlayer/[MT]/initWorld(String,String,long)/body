{
  final FastRandom random=new FastRandom();
  if (worldRenderer != null) {
    worldRenderer.dispose();
    worldRenderer=null;
  }
  if (seed == null) {
    seed=random.randomCharacterString(16);
  }
 else   if (seed.isEmpty()) {
    seed=random.randomCharacterString(16);
  }
  logger.log(Level.INFO,"Creating new World with seed \"{0}\"",seed);
  ChunkGeneratorManager chunkGeneratorManager=initChunkGeneratorManager(title);
  chunkGeneratorManager.setWorldSeed(seed);
  chunkGeneratorManager.setWorldBiomeProvider(new WorldBiomeProviderImpl(seed));
  worldRenderer=new WorldRenderer(title,seed,time,chunkGeneratorManager,entityManager,localPlayerSys);
  CoreRegistry.put(WorldRenderer.class,worldRenderer);
  Iterator<EntityRef> worldEntityIterator=entityManager.iteratorEntities(WorldComponent.class).iterator();
  if (worldEntityIterator.hasNext()) {
    worldRenderer.getChunkProvider().setWorldEntity(worldEntityIterator.next());
  }
 else {
    EntityRef worldEntity=entityManager.create();
    worldEntity.addComponent(new WorldComponent());
    worldRenderer.getChunkProvider().setWorldEntity(worldEntity);
  }
  CoreRegistry.put(WorldRenderer.class,worldRenderer);
  CoreRegistry.put(WorldProvider.class,worldRenderer.getWorldProvider());
  CoreRegistry.put(LocalPlayer.class,new LocalPlayer(EntityRef.NULL));
  CoreRegistry.put(Camera.class,worldRenderer.getActiveCamera());
  CoreRegistry.put(BulletPhysicsRenderer.class,worldRenderer.getBulletRenderer());
  for (  ComponentSystem system : componentSystemManager.iterateAll()) {
    system.initialise();
  }
  File entityDataFile=new File(PathManager.getInstance().getWorldSavePath(title),ENTITY_DATA_FILE);
  entityManager.clear();
  if (entityDataFile.exists()) {
    try {
      CoreRegistry.get(WorldPersister.class).load(entityDataFile,WorldPersister.SaveFormat.Binary);
    }
 catch (    IOException e) {
      logger.log(Level.SEVERE,"Failed to load entity data",e);
    }
  }
  prepareWorld();
}
