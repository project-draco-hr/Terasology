{
  _loadingScreen.setVisible(true);
  _hud.setVisible(false);
  _metrics.setVisible(false);
  Display.update();
  int chunksGenerated=0;
  Timer timer=CoreRegistry.get(Timer.class);
  long startTime=timer.getTimeInMs();
  Iterator<EntityRef> iterator=entityManager.iteratorEntities(LocalPlayerComponent.class).iterator();
  if (iterator.hasNext()) {
    CoreRegistry.get(LocalPlayer.class).setEntity(iterator.next());
    _worldRenderer.setPlayer(CoreRegistry.get(LocalPlayer.class));
  }
 else {
    EntityRef spawnZoneEntity=entityManager.create();
    spawnZoneEntity.addComponent(new LocationComponent(new Vector3f(Chunk.SIZE_X / 2,Chunk.SIZE_Y / 2,Chunk.SIZE_Z / 2)));
    _worldRenderer.getChunkProvider().addRegionEntity(spawnZoneEntity,1);
    while (!_worldRenderer.getWorldProvider().isBlockActive(new Vector3i(Chunk.SIZE_X / 2,Chunk.SIZE_Y / 2,Chunk.SIZE_Z / 2))) {
      _loadingScreen.updateStatus(String.format("Loading spawn area... %.2f%%! :-)",(timer.getTimeInMs() - startTime) / 50.0f));
      renderUserInterface();
      updateUserInterface();
      Display.update();
    }
    Vector3i spawnPoint=new Vector3i(Chunk.SIZE_X / 2,Chunk.SIZE_Y,Chunk.SIZE_Z / 2);
    while (_worldRenderer.getWorldProvider().getBlock(spawnPoint) == BlockManager.getInstance().getAir() && spawnPoint.y > 0) {
      spawnPoint.y--;
    }
    PlayerFactory playerFactory=new PlayerFactory(entityManager);
    CoreRegistry.get(LocalPlayer.class).setEntity(playerFactory.newInstance(new Vector3f(spawnPoint.x + 0.5f,spawnPoint.y + 2.0f,spawnPoint.z + 0.5f)));
    _worldRenderer.setPlayer(CoreRegistry.get(LocalPlayer.class));
    _worldRenderer.getChunkProvider().removeRegionEntity(spawnZoneEntity);
    spawnZoneEntity.destroy();
  }
  while (!getWorldRenderer().pregenerateChunks() && timer.getTimeInMs() - startTime < 5000) {
    chunksGenerated++;
    _loadingScreen.updateStatus(String.format("Fast forwarding world... %.2f%%! :-)",(timer.getTimeInMs() - startTime) / 50.0f));
    renderUserInterface();
    updateUserInterface();
    Display.update();
  }
  _worldRenderer.initPortal();
  _loadingScreen.setVisible(false);
  _hud.setVisible(true);
  _metrics.setVisible(true);
}
