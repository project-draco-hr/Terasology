{
  nodeFactory=CoreRegistry.get(BehaviorNodeFactory.class);
  layout=new BTLayout();
  layout.init(new Vector2f(),new Vector2f(50,50),new Vector2i(1200,1000));
  MigLayout treeSelectBar=new MigLayout();
  treeSelectBar.addElement(new UIDropdown<BehaviorTree>("tree"),"w 180!, h 40!");
  treeSelectBar.addElement(new UIDropdown<Interpreter>("entity"),"w 180!, h 40!");
  MigLayout debugTools=new MigLayout();
  debugTools.addElement(new UIButton("stop","[]"),"w 40!, h 40!");
  debugTools.addElement(new UIButton("pause","||"),"w 40!, h 40!");
  debugTools.addElement(new UIButton("step","|>"),"w 40!, h 40!");
  debugTools.addElement(new UIButton("continue",">>"),"w 40!, h 40!");
  MigLayout palette=createPalette();
  MigLayout migLayout=new MigLayout("","[min][grow][min]","");
  migLayout.addElement(treeSelectBar,"cell 0 0 3");
  migLayout.addElement(debugTools,"cell 0 1 3");
  migLayout.addElement(palette,"cell 0 2, top");
  migLayout.addElement(layout,"cell 1 2, w 500!, h 500!");
  setContents(migLayout);
  find("tree",UIDropdown.class).bindSelection(new Binding<BehaviorTree>(){
    @Override public BehaviorTree get(){
      return null;
    }
    @Override public void set(    BehaviorTree value){
      layout.setTree(value);
    }
  }
);
  find("tree",UIDropdown.class).bindOptions(new Binding<List<BehaviorTree>>(){
    @Override public List<BehaviorTree> get(){
      return Lists.newArrayList(CoreRegistry.get(BehaviorSystem.class).getTrees());
    }
    @Override public void set(    List<BehaviorTree> value){
    }
  }
);
  find("entity",UIDropdown.class).bindOptions(new Binding<List<Interpreter>>(){
    @Override public List<Interpreter> get(){
      BehaviorTree selection=(BehaviorTree)find("tree",UIDropdown.class).getSelection();
      if (selection != null) {
        return CoreRegistry.get(BehaviorSystem.class).getInterpreter(selection);
      }
 else {
        return Arrays.asList();
      }
    }
    @Override public void set(    List<Interpreter> value){
    }
  }
);
}
