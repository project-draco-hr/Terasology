{
  final TypeAdapter<T> delegate=gson.getDelegateAdapter(this,type);
  return new TypeAdapter<T>(){
    @Override public void write(    JsonWriter out,    T value) throws IOException {
      if (value instanceof Node) {
        out.beginObject();
        idNodes.put(currentId,(Node)value);
        nodeIds.put((Node)value,currentId);
        TypeAdapter<T> delegateAdapter=getDelegateAdapter(value.getClass());
        out.name("nodeType").value(CoreRegistry.get(NodesClassLibrary.class).getMetadata(((Node)value).getClass()).getUri().toString()).name("nodeId").value(currentId);
        currentId++;
        out.name("node");
        delegateAdapter.write(out,value);
        out.endObject();
      }
 else {
        delegate.write(out,value);
      }
    }
    @Override public T read(    JsonReader in) throws IOException {
      if (in.peek() == JsonToken.BEGIN_OBJECT) {
        in.beginObject();
        nextName(in,"nodeType");
        String nodeType=in.nextString();
        ClassMetadata<? extends Node,?> classMetadata=CoreRegistry.get(NodesClassLibrary.class).resolve(nodeType);
        if (classMetadata != null) {
          TypeAdapter<T> delegateAdapter=getDelegateAdapter(classMetadata.getType());
          nextName(in,"nodeId");
          int id=in.nextInt();
          nextName(in,"node");
          Node result;
          if (classMetadata.getType() == LookupNode.class) {
            result=classMetadata.newInstance();
            in.beginObject();
            nextName(in,"tree");
            String uri=in.nextString();
            ((LookupNode)result).tree=(BehaviorTree)Assets.resolve(AssetType.BEHAVIOR,uri);
            in.endObject();
          }
 else {
            result=(Node)delegateAdapter.read(in);
          }
          idNodes.put(id,result);
          nodeIds.put(result,id);
          in.endObject();
          return (T)result;
        }
 else {
          throw new RuntimeException("Unambiguous type " + nodeType);
        }
      }
 else {
        return delegate.read(in);
      }
    }
    private TypeAdapter<T> getDelegateAdapter(    Class cls){
      return (TypeAdapter<T>)gson.getDelegateAdapter(NodeTypeAdapterFactory.this,TypeToken.get(cls));
    }
  }
;
}
