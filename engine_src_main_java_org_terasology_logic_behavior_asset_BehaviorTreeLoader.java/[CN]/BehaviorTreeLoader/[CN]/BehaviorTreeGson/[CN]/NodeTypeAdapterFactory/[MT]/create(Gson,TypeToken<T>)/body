{
  final TypeAdapter<T> delegate=gson.getDelegateAdapter(this,type);
  return new TypeAdapter<T>(){
    @Override public void write(    JsonWriter out,    T value) throws IOException {
      if (value instanceof Node) {
        idNodes.put(currentId,(Node)value);
        nodeIds.put((Node)value,currentId);
        TypeAdapter<T> delegateAdapter=(TypeAdapter<T>)gson.getDelegateAdapter(NodeTypeAdapterFactory.this,TypeToken.get(value.getClass()));
        out.beginObject().name("nodeType").value(value.getClass().getCanonicalName()).name("nodeId").value(currentId);
        currentId++;
        out.name("node");
        delegateAdapter.write(out,value);
        out.endObject();
      }
 else {
        delegate.write(out,value);
      }
    }
    @Override public T read(    JsonReader in) throws IOException {
      if (in.peek() == JsonToken.BEGIN_OBJECT) {
        in.beginObject();
        nextName(in,"nodeType");
        String nodeType=in.nextString();
        ModuleManager moduleManager=CoreRegistry.get(ModuleManager.class);
        ClassLoader[] classLoaders;
        if (moduleManager != null) {
          classLoaders=moduleManager.getActiveModuleReflections().getConfiguration().getClassLoaders();
        }
 else {
          classLoaders=new ClassLoader[]{getClass().getClassLoader()};
        }
        Class cls=null;
        for (        ClassLoader classLoader : classLoaders) {
          try {
            cls=(Class<? extends Node>)classLoader.loadClass(nodeType);
            break;
          }
 catch (          ClassNotFoundException e) {
          }
        }
        TypeAdapter<T> delegateAdapter=(TypeAdapter<T>)gson.getDelegateAdapter(NodeTypeAdapterFactory.this,TypeToken.get(cls));
        nextName(in,"nodeId");
        int id=in.nextInt();
        nextName(in,"node");
        T read=delegateAdapter.read(in);
        idNodes.put(id,(Node)read);
        nodeIds.put((Node)read,id);
        in.endObject();
        return read;
      }
 else {
        return delegate.read(in);
      }
    }
  }
;
}
