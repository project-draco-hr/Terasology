{
  if (means != null) {
    for (    final Entry entry : list) {
      entry.active=false;
    }
    means.forEachEntry(new TObjectDoubleProcedure<String>(){
      @Override public boolean execute(      String key,      double value){
        Entry entry=map.get(key);
        if (entry == null) {
          entry=new Entry(key);
          list.add(entry);
          map.put(key,entry);
          invokeIntervalAdded(list.size() - 1,list.size() - 1);
        }
        entry.active=true;
        entry.mean=value;
        return true;
      }
    }
);
    spikes.forEachEntry(new TObjectDoubleProcedure<String>(){
      @Override public boolean execute(      String key,      double value){
        Entry entry=map.get(key);
        if (entry != null) {
          entry.spike=value;
        }
        return true;
      }
    }
);
    Collections.sort(list);
    invokeContentsChanged(0,list.size() - 1);
  }
}
