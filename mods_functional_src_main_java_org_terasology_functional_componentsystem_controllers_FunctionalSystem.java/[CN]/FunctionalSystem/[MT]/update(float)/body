{
  for (  EntityRef entity : entityManager.iteratorEntities(FunctionalComponent.class,LocationComponent.class)) {
    LocationComponent location=entity.getComponent(LocationComponent.class);
    Vector3f worldPos=location.getWorldPosition();
    if (!worldProvider.isBlockActive(worldPos)) {
      continue;
    }
    FunctionalComponent loco=entity.getComponent(FunctionalComponent.class);
    logger.info("loco {}",loco.getLocomotiveType());
    if (!localPlayer.isValid())     return;
    entity.saveComponent(loco);
    if (standingOn(entity)) {
      logger.info("Player standing on functional");
      Vector3f movementDirection=localPlayer.getViewDirection();
      float speed=movementDirection.length();
      movementDirection=new Vector3f(movementDirection.x,0,movementDirection.z);
      movementDirection.normalize();
      movementDirection.scale(speed);
      Vector3f desiredVelocity=new Vector3f(movementDirection);
      desiredVelocity.scale(loco.getMaximumSpeed());
      CharacterMovementComponent movement=entity.getComponent(CharacterMovementComponent.class);
      movement.setDrive(desiredVelocity);
      entity.saveComponent(movement);
    }
 else {
      logger.info("Player left functional");
      CharacterMovementComponent movement=entity.getComponent(CharacterMovementComponent.class);
      movement.setDrive(new Vector3f(0,0,0));
      entity.saveComponent(movement);
    }
  }
}
