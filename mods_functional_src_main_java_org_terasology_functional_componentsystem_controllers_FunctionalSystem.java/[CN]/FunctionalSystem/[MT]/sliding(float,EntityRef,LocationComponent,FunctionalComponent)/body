{
  if (loco.shouldMove) {
    Vector3f movementDirection=localPlayer.getViewDirection();
    float speed=movementDirection.length();
    movementDirection=new Vector3f(movementDirection.x,0,movementDirection.z);
    movementDirection.normalize();
    movementDirection.scale(speed);
    Vector3f desiredVelocity=new Vector3f(movementDirection);
    desiredVelocity.scale(loco.getMaximumSpeed());
    Vector3f velocityDiff=new Vector3f(desiredVelocity);
    velocityDiff.sub(loco.currentVelocity);
    velocityDiff.scale(Math.min(GROUND_FRICTION * delta,1.0f));
    loco.currentVelocity.x+=velocityDiff.x;
    loco.currentVelocity.z+=velocityDiff.z;
    loco.currentVelocity.y=Math.max(-TERMINAL_VELOCITY,(loco.currentVelocity.y - GRAVITY * delta));
  }
  Vector3f moveDelta=new Vector3f(loco.currentVelocity);
  moveDelta.scale(delta);
  MoveResult moveResult=move(location.getWorldPosition(),moveDelta,loco.stepHeight,loco.slopeFactor,loco.collider);
  Vector3f distanceMoved=new Vector3f(moveResult.finalPosition);
  distanceMoved.sub(location.getWorldPosition());
  if (!loco.shouldMove) {
    distanceMoved=new Vector3f(loco.currentVelocity);
  }
  loco.collider.setWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),moveResult.finalPosition,1.0f)));
  updatePositions(distanceMoved,entity,location,localPlayer.getEntity().getComponent(LocationComponent.class),loco);
}
