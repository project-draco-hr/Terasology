{
  setModal(true);
  maximize();
  overlay=new UIImageOverlay(AssetManager.loadTexture("engine:menuBackground"));
  overlay.setVisible(true);
  list=new UIList(new Vector2f(512f,256f));
  list.setVisible(true);
  list.addDoubleClickListener(new ClickListener(){
    @Override public void click(    UIDisplayElement element,    int button){
      loadSelectedWorld();
    }
  }
);
  goToBack=new UIButton(new Vector2f(256f,32f),UIButton.eButtonType.NORMAL);
  goToBack.getLabel().setText("Go back");
  goToBack.setVisible(true);
  goToBack.addClickListener(new ClickListener(){
    @Override public void click(    UIDisplayElement element,    int button){
      GUIManager.getInstance().setFocusedWindow(GUIManager.getInstance().getWindowById("menuMain"));
    }
  }
);
  loadFromList=new UIButton(new Vector2f(128f,32f),UIButton.eButtonType.NORMAL);
  loadFromList.getLabel().setText("Load");
  loadFromList.setVisible(true);
  createNewWorld=new UIButton(new Vector2f(192f,32f),UIButton.eButtonType.NORMAL);
  createNewWorld.getLabel().setText("Create new world");
  createNewWorld.setVisible(true);
  deleteFromList=new UIButton(new Vector2f(128f,32f),UIButton.eButtonType.NORMAL);
  deleteFromList.getLabel().setText("Delete");
  deleteFromList.setVisible(true);
  createNewWorld.addClickListener(new ClickListener(){
    @Override public void click(    UIDisplayElement element,    int button){
      UIDialogCreateNewWorld _window=new UIDialogCreateNewWorld("Create new world",new Vector2f(512f,320f));
      _window.center();
      _window.clearInputControls();
      GUIManager.getInstance().addWindow(_window,"generate_world");
      GUIManager.getInstance().setFocusedWindow(_window);
      UIInput inputWorldName=(UIInput)_window.getElementById("inputWorldTitle");
      inputWorldName.setValue(_window.getWorldName());
    }
  }
);
  deleteFromList.addClickListener(new ClickListener(){
    @Override public void click(    UIDisplayElement element,    int button){
      if (list.getSelectedItem() == null) {
        GUIManager.getInstance().showMessage("Error","Please choose a world first.");
        return;
      }
      try {
        WorldInfo worldInfo=(WorldInfo)list.getSelectedItem().getValue();
        File world=PathManager.getInstance().getWorldSavePath(worldInfo.getTitle());
        WorldUtil.deleteWorld(world);
        list.removeSelectedItem();
      }
 catch (      Exception e) {
        GUIManager.getInstance().showMessage("Error","Failed deleting world data object. Sorry.");
      }
    }
  }
);
  loadFromList.addClickListener(new ClickListener(){
    @Override public void click(    UIDisplayElement element,    int button){
      loadSelectedWorld();
    }
  }
);
  fillList();
  addDisplayElement(overlay);
  addDisplayElement(list,"list");
  addDisplayElement(loadFromList,"loadFromListButton");
  addDisplayElement(goToBack,"goToBackButton");
  addDisplayElement(createNewWorld,"createWorldButton");
  addDisplayElement(deleteFromList,"deleteFromListButton");
  layout();
}
