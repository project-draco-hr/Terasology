{
  Predicate<? super Method> predicate=Predicates.<Method>and(ReflectionUtils.withModifier(Modifier.PUBLIC),ReflectionUtils.withAnnotation(CommandDefinition.class));
  Set<Method> commandMethods=ReflectionUtils.getAllMethods(provider.getClass(),predicate);
  Console console=CoreRegistry.get(Console.class);
  for (  Method method : commandMethods) {
    logger.debug("Registering referenced command method {} in class {}",method.getName(),method.getDeclaringClass().getCanonicalName());
    try {
      SpecificAccessibleObject<Method> specificMethod=new SpecificAccessibleObject<>(method,provider);
      MethodCommand command=referringTo(specificMethod);
      console.registerCommand(command);
      logger.debug("Registered referenced command method {} in class {}",method.getName(),method.getDeclaringClass().getCanonicalName());
    }
 catch (    Throwable t) {
      logger.error("Failed to load referenced command method {} in class {}",method.getName(),method.getDeclaringClass().getCanonicalName(),t);
    }
  }
}
