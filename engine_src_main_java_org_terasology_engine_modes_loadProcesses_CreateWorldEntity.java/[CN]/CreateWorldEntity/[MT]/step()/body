{
  EntityManager entityManager=context.get(EntityManager.class);
  WorldRenderer worldRenderer=context.get(WorldRenderer.class);
  Iterator<EntityRef> worldEntityIterator=entityManager.getEntitiesWith(WorldComponent.class).iterator();
  if (worldEntityIterator.hasNext()) {
    EntityRef worldEntity=worldEntityIterator.next();
    worldRenderer.getChunkProvider().setWorldEntity(worldEntity);
    WorldGenerator worldGenerator=context.get(WorldGenerator.class);
    Optional<WorldConfigurator> ocf=worldGenerator.getConfigurator();
    if (ocf.isPresent()) {
      Map<String,Component> params=ocf.get().getProperties();
      for (      Map.Entry<String,Component> entry : params.entrySet()) {
        Class<? extends Component> clazz=entry.getValue().getClass();
        Component comp=worldEntity.getComponent(clazz);
        if (comp != null) {
          entry.setValue(comp);
        }
      }
      worldGenerator.setConfigurator(ocf.get());
    }
  }
 else {
    EntityRef worldEntity=entityManager.create();
    worldEntity.addComponent(new WorldComponent());
    worldRenderer.getChunkProvider().setWorldEntity(worldEntity);
    WorldGenerator worldGenerator=context.get(WorldGenerator.class);
    Optional<WorldConfigurator> ocf=worldGenerator.getConfigurator();
    if (ocf.isPresent()) {
      SimpleUri generatorUri=worldGenerator.getUri();
      Config config=context.get(Config.class);
      Map<String,Component> params=ocf.get().getProperties();
      for (      Map.Entry<String,Component> entry : params.entrySet()) {
        Class<? extends Component> clazz=entry.getValue().getClass();
        Component comp=config.getModuleConfig(generatorUri,entry.getKey(),clazz);
        if (comp != null) {
          worldEntity.addComponent(comp);
          entry.setValue(comp);
        }
 else {
          worldEntity.addComponent(entry.getValue());
        }
      }
      worldGenerator.setConfigurator(ocf.get());
    }
  }
  return true;
}
