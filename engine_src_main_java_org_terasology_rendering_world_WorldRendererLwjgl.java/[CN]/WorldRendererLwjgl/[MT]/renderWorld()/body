{
  if (renderingDebugConfig.isWireframe()) {
    glPolygonMode(GL_FRONT_AND_BACK,GL_LINE);
  }
  DefaultRenderingProcess.getInstance().clear();
  DefaultRenderingProcess.getInstance().beginRenderSceneOpaque();
  activeCamera.lookThroughNormalized();
  PerformanceMonitor.startActivity("Render Sky");
  DefaultRenderingProcess.getInstance().beginRenderSceneSky();
  skysphere.render(activeCamera);
  DefaultRenderingProcess.getInstance().endRenderSceneSky();
  PerformanceMonitor.endActivity();
  PerformanceMonitor.startActivity("Render World");
  activeCamera.lookThrough();
  PerformanceMonitor.startActivity("Render Objects (Opaque)");
  for (  RenderSystem renderer : systemManager.iterateRenderSubscribers()) {
    renderer.renderOpaque();
  }
  PerformanceMonitor.endActivity();
  PerformanceMonitor.startActivity("Render Chunks (Opaque)");
  while (renderQueues.chunksOpaque.size() > 0) {
    renderChunk(renderQueues.chunksOpaque.poll(),ChunkMesh.RenderPhase.OPAQUE,activeCamera,ChunkRenderMode.DEFAULT);
  }
  PerformanceMonitor.endActivity();
  PerformanceMonitor.startActivity("Render Chunks (Alpha Reject)");
  while (renderQueues.chunksAlphaReject.size() > 0) {
    renderChunk(renderQueues.chunksAlphaReject.poll(),ChunkMesh.RenderPhase.ALPHA_REJECT,activeCamera,ChunkRenderMode.DEFAULT);
  }
  PerformanceMonitor.endActivity();
  PerformanceMonitor.startActivity("Render Overlays");
  for (  RenderSystem renderer : systemManager.iterateRenderSubscribers()) {
    renderer.renderOverlay();
  }
  PerformanceMonitor.endActivity();
  if (!renderingDebugConfig.isFirstPersonElementsHidden()) {
    PerformanceMonitor.startActivity("Render First Person");
    glPushMatrix();
    glLoadIdentity();
    activeCamera.updateMatrices(90f);
    activeCamera.loadProjectionMatrix();
    glDepthFunc(GL11.GL_ALWAYS);
    for (    RenderSystem renderer : systemManager.iterateRenderSubscribers()) {
      renderer.renderFirstPerson();
    }
    glDepthFunc(GL_LEQUAL);
    activeCamera.updateMatrices();
    activeCamera.loadProjectionMatrix();
    glPopMatrix();
    PerformanceMonitor.endActivity();
  }
  DefaultRenderingProcess.getInstance().endRenderSceneOpaque();
  PerformanceMonitor.startActivity("Render Light Geometry");
  DefaultRenderingProcess.getInstance().beginRenderLightGeometryStencilPass();
  Material program=Assets.getMaterial("engine:prog.simple");
  program.enable();
  program.setCamera(activeCamera);
  EntityManager entityManager=CoreRegistry.get(EntityManager.class);
  for (  EntityRef entity : entityManager.getEntitiesWith(LightComponent.class,LocationComponent.class)) {
    LocationComponent locationComponent=entity.getComponent(LocationComponent.class);
    LightComponent lightComponent=entity.getComponent(LightComponent.class);
    final Vector3f worldPosition=locationComponent.getWorldPosition();
    renderLightComponent(lightComponent,worldPosition,program,true);
  }
  DefaultRenderingProcess.getInstance().endRenderLightGeometryStencilPass();
  DefaultRenderingProcess.getInstance().beginRenderLightGeometry();
  program=Assets.getMaterial("engine:prog.lightGeometryPass");
  for (  EntityRef entity : entityManager.getEntitiesWith(LightComponent.class,LocationComponent.class)) {
    LocationComponent locationComponent=entity.getComponent(LocationComponent.class);
    LightComponent lightComponent=entity.getComponent(LightComponent.class);
    final Vector3f worldPosition=locationComponent.getWorldPosition();
    renderLightComponent(lightComponent,worldPosition,program,false);
  }
  DefaultRenderingProcess.getInstance().endRenderLightGeometry();
  DefaultRenderingProcess.getInstance().beginRenderDirectionalLights();
  Vector3f sunlightWorldPosition=new Vector3f(skysphere.getSunDirection(true));
  sunlightWorldPosition.scale(50000f);
  sunlightWorldPosition.add(activeCamera.getPosition());
  renderLightComponent(mainDirectionalLight,sunlightWorldPosition,program,false);
  DefaultRenderingProcess.getInstance().endRenderDirectionalLights();
  PerformanceMonitor.endActivity();
  PerformanceMonitor.startActivity("Render Chunks (Refractive/Reflective)");
  DefaultRenderingProcess.getInstance().beginRenderSceneReflectiveRefractive();
  boolean isHeadUnderWater=isHeadUnderWater();
  if (isHeadUnderWater) {
    glDisable(GL11.GL_CULL_FACE);
  }
  while (renderQueues.chunksAlphaBlend.size() > 0) {
    renderChunk(renderQueues.chunksAlphaBlend.poll(),ChunkMesh.RenderPhase.REFRACTIVE,activeCamera,ChunkRenderMode.DEFAULT);
  }
  PerformanceMonitor.endActivity();
  if (isHeadUnderWater) {
    glEnable(GL11.GL_CULL_FACE);
  }
  PerformanceMonitor.endActivity();
  DefaultRenderingProcess.getInstance().endRenderSceneReflectiveRefractive();
  if (renderingDebugConfig.isWireframe()) {
    glPolygonMode(GL_FRONT_AND_BACK,GL_FILL);
  }
}
