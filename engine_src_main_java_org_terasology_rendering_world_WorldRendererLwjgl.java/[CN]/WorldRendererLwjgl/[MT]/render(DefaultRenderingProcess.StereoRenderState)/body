{
  resetStats();
switch (stereoRenderState) {
case MONO:
    currentRenderingStage=WorldRenderingStage.DEFAULT;
  break;
case OCULUS_LEFT_EYE:
currentRenderingStage=WorldRenderingStage.OCULUS_LEFT_EYE;
activeCamera.updateFrustum();
break;
case OCULUS_RIGHT_EYE:
currentRenderingStage=WorldRenderingStage.OCULUS_RIGHT_EYE;
activeCamera.updateFrustum();
break;
}
if (stereoRenderState == DefaultRenderingProcess.StereoRenderState.MONO || stereoRenderState == DefaultRenderingProcess.StereoRenderState.OCULUS_LEFT_EYE) {
renderableWorld.updateAndQueueVisibleChunks();
}
 else {
renderableWorld.updateAndQueueVisibleChunks(false,false);
}
if (renderingConfig.isDynamicShadows() && (stereoRenderState == DefaultRenderingProcess.StereoRenderState.MONO || stereoRenderState == DefaultRenderingProcess.StereoRenderState.OCULUS_LEFT_EYE)) {
DefaultRenderingProcess.getInstance().beginRenderSceneShadowMap();
renderShadowMap();
DefaultRenderingProcess.getInstance().endRenderSceneShadowMap();
}
DefaultRenderingProcess.getInstance().beginRenderReflectedScene();
glCullFace(GL11.GL_FRONT);
activeCamera.setReflected(true);
renderWorldReflection();
activeCamera.setReflected(false);
glCullFace(GL11.GL_BACK);
DefaultRenderingProcess.getInstance().endRenderReflectedScene();
renderWorld();
PerformanceMonitor.startActivity("Render Combined Scene");
DefaultRenderingProcess.getInstance().renderPreCombinedScene();
PerformanceMonitor.endActivity();
PerformanceMonitor.startActivity("Render Objects (Transparent)");
DefaultRenderingProcess.getInstance().beginRenderSceneOpaque();
glEnable(GL_BLEND);
glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
glDepthMask(false);
for (RenderSystem renderer : systemManager.iterateRenderSubscribers()) {
renderer.renderAlphaBlend();
}
glDisable(GL_BLEND);
glDepthMask(true);
DefaultRenderingProcess.getInstance().endRenderSceneOpaque();
PerformanceMonitor.endActivity();
PerformanceMonitor.startActivity("Render Post-Processing");
DefaultRenderingProcess.getInstance().renderPost(stereoRenderState);
PerformanceMonitor.endActivity();
activeCamera.updatePrevViewProjectionMatrix();
}
