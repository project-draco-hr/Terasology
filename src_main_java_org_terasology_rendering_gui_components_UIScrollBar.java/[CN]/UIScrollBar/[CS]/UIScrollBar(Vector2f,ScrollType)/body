{
  setScrollType(scrollType);
switch (_scrollType) {
case vertical:
    setSize(new Vector2f(15f,size.y));
  _scrolBarThumb=new UIScrollBarThumb(getSize(),ScrollType.vertical);
break;
case horizontal:
setSize(new Vector2f(size.x,15f));
_scrolBarThumb=new UIScrollBarThumb(getSize(),ScrollType.horizontal);
break;
}
_scrolBarThumb.setVisible(true);
_scrolBarThumb.addMouseButtonListener(new MouseButtonListener(){
@Override public void wheel(UIDisplayElement element,int wheel,boolean intersect){
scrolled(calculateScrollFromWheel(((-1) * wheel / 30) / _step));
}
@Override public void up(UIDisplayElement element,int button,boolean intersect){
_scrolled=false;
}
@Override public void down(UIDisplayElement element,int button,boolean intersect){
if (intersect) {
_scrolled=true;
if (_prevMousePos == -1) {
Vector2f mousePos=new Vector2f(Mouse.getX(),Display.getHeight() - Mouse.getY());
if (_scrollType == ScrollType.vertical) {
_prevMousePos=mousePos.y;
}
 else {
_prevMousePos=mousePos.x;
}
}
}
}
}
);
addMouseMoveListener(new MouseMoveListener(){
@Override public void move(UIDisplayElement element){
if (_scrolled) {
Vector2f mousePos=new Vector2f(Mouse.getX(),Display.getHeight() - Mouse.getY());
scrolled(calculateScrollFromMouse(_scrollType == ScrollType.vertical ? mousePos.y : mousePos.x));
updateThumb();
}
}
@Override public void leave(UIDisplayElement element){
}
@Override public void hover(UIDisplayElement element){
}
@Override public void enter(UIDisplayElement element){
}
}
);
addDisplayElement(_scrolBarThumb);
}
