{
  boolean moveUpStep;
  boolean hitStep=false;
  float stepSlope=1f;
  Vector3f lookAheadOffset=new Vector3f(direction);
  lookAheadOffset.y=0;
  lookAheadOffset.normalize();
  lookAheadOffset.scale(checkForwardDistance);
  Vector3f fromWorld=new Vector3f(this.getHitPointWorld());
  fromWorld.y+=stepHeight + 0.05f;
  fromWorld.add(lookAheadOffset);
  Vector3f toWorld=new Vector3f(this.getHitPointWorld());
  toWorld.y-=0.05f;
  toWorld.add(lookAheadOffset);
  CollisionWorld.ClosestRayResultCallback rayResult=new CollisionWorld.ClosestRayResultCallback(fromWorld,toWorld);
  Transform transformFrom=new Transform(new Matrix4f(new Quat4f(0,0,0,1),fromWorld,1.0f));
  Transform transformTo=new Transform(new Matrix4f(new Quat4f(0,0,0,1),toWorld,1.0f));
  Transform targetTransform=this.hitCollisionObject.getWorldTransform(new Transform());
  CollisionWorld.rayTestSingle(transformFrom,transformTo,this.hitCollisionObject,this.hitCollisionObject.getCollisionShape(),targetTransform,rayResult);
  if (rayResult.hasHit()) {
    hitStep=true;
    stepSlope=rayResult.hitNormalWorld.dot(new Vector3f(0,1,0));
  }
  fromWorld.add(lookAheadOffset);
  toWorld.add(lookAheadOffset);
  rayResult=new CollisionWorld.ClosestRayResultCallback(fromWorld,toWorld);
  transformFrom=new Transform(new Matrix4f(new Quat4f(0,0,0,1),fromWorld,1.0f));
  transformTo=new Transform(new Matrix4f(new Quat4f(0,0,0,1),toWorld,1.0f));
  targetTransform=this.hitCollisionObject.getWorldTransform(new Transform());
  CollisionWorld.rayTestSingle(transformFrom,transformTo,this.hitCollisionObject,this.hitCollisionObject.getCollisionShape(),targetTransform,rayResult);
  if (rayResult.hasHit()) {
    hitStep=true;
    stepSlope=Math.min(stepSlope,rayResult.hitNormalWorld.dot(new Vector3f(0,1,0)));
  }
  moveUpStep=hitStep && stepSlope >= slopeFactor;
  return moveUpStep;
}
