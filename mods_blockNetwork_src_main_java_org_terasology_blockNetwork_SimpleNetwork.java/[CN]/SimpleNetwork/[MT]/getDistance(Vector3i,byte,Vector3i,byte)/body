{
  if ((!hasNetworkingNode(from) && !hasLeafNode(from,fromConnectionSides)) || (!hasNetworkingNode(to) && !hasLeafNode(to,toConnectionSides)))   throw new IllegalArgumentException("Cannot test nodes not in network");
  if (from.equals(to) && fromConnectionSides == toConnectionSides)   return 0;
  if (SimpleNetwork.areNodesConnecting(from,fromConnectionSides,to,toConnectionSides))   return 1;
  Set<Vector3i> visitedNodes=Sets.newHashSet();
  visitedNodes.add(from);
  Map<Vector3i,Byte> networkingNodesToTest=Maps.newHashMap();
  listConnectedNotVisitedNetworkingNodes(visitedNodes,from,fromConnectionSides,networkingNodesToTest);
  int distanceSearched=1;
  while (networkingNodesToTest.size() > 0) {
    distanceSearched++;
    for (    Map.Entry<Vector3i,Byte> nodeToTest : networkingNodesToTest.entrySet()) {
      if (SimpleNetwork.areNodesConnecting(nodeToTest.getKey(),nodeToTest.getValue(),to,toConnectionSides)) {
        distanceCache.put(new TwoNetworkNodes(new NetworkNode(from,fromConnectionSides),new NetworkNode(to,toConnectionSides)),distanceSearched);
        return distanceSearched;
      }
      visitedNodes.add(nodeToTest.getKey());
    }
    Map<Vector3i,Byte> nextNetworkingNodesToTest=Maps.newHashMap();
    for (    Map.Entry<Vector3i,Byte> nodeToTest : networkingNodesToTest.entrySet())     listConnectedNotVisitedNetworkingNodes(visitedNodes,nodeToTest.getKey(),nodeToTest.getValue(),nextNetworkingNodesToTest);
    networkingNodesToTest=nextNetworkingNodesToTest;
  }
  return -1;
}
