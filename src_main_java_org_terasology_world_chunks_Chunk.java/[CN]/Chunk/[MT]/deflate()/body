{
  lock();
  try {
    AdvancedConfig config=CoreRegistry.get(org.terasology.config.Config.class).getAdvanced();
    final TeraDeflator def=new TeraStandardDeflator();
    if (config.isChunkDeflationLoggingEnabled()) {
      int blocksSize=blockData.getEstimatedMemoryConsumptionInBytes();
      int sunlightSize=sunlightData.getEstimatedMemoryConsumptionInBytes();
      int lightSize=lightData.getEstimatedMemoryConsumptionInBytes();
      int liquidSize=extraData.getEstimatedMemoryConsumptionInBytes();
      int totalSize=blocksSize + sunlightSize + lightSize+ liquidSize;
      blockData=def.deflate(blockData);
      sunlightData=def.deflate(sunlightData);
      lightData=def.deflate(lightData);
      extraData=def.deflate(extraData);
      int blocksReduced=blockData.getEstimatedMemoryConsumptionInBytes();
      int sunlightReduced=sunlightData.getEstimatedMemoryConsumptionInBytes();
      int lightReduced=lightData.getEstimatedMemoryConsumptionInBytes();
      int liquidReduced=extraData.getEstimatedMemoryConsumptionInBytes();
      int totalReduced=blocksReduced + sunlightReduced + lightReduced+ liquidReduced;
      double blocksPercent=100d - (100d / blocksSize * blocksReduced);
      double sunlightPercent=100d - (100d / sunlightSize * sunlightReduced);
      double lightPercent=100d - (100d / lightSize * lightReduced);
      double liquidPercent=100d - (100d / liquidSize * liquidReduced);
      double totalPercent=100d - (100d / totalSize * totalReduced);
      logger.info(String.format("chunk (%d, %d, %d): size-before: %s bytes, size-after: %s bytes, total-deflated-by: %s%%, blocks-deflated-by=%s%%, sunlight-deflated-by=%s%%, light-deflated-by=%s%%, liquid-deflated-by=%s%%",pos.x,pos.y,pos.z,SIZE_FORMAT.format(totalSize),SIZE_FORMAT.format(totalReduced),PERCENT_FORMAT.format(totalPercent),PERCENT_FORMAT.format(blocksPercent),PERCENT_FORMAT.format(sunlightPercent),PERCENT_FORMAT.format(lightPercent),PERCENT_FORMAT.format(liquidPercent)));
    }
 else {
      blockData=def.deflate(blockData);
      sunlightData=def.deflate(sunlightData);
      lightData=def.deflate(lightData);
      extraData=def.deflate(extraData);
    }
  }
  finally {
    unlock();
  }
}
