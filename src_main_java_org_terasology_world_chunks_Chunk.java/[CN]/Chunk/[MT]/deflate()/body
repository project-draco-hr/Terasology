{
  lock();
  try {
    final TeraDeflator def=new TeraStandardDeflator();
    if (logger.isDebugEnabled()) {
      int blocksSize=blockData.getEstimatedMemoryConsumptionInBytes();
      int sunlightSize=sunlightData.getEstimatedMemoryConsumptionInBytes();
      int lightSize=lightData.getEstimatedMemoryConsumptionInBytes();
      int liquidSize=extraData.getEstimatedMemoryConsumptionInBytes();
      int totalSize=blocksSize + sunlightSize + lightSize+ liquidSize;
      blockData=def.deflate(blockData);
      sunlightData=def.deflate(sunlightData);
      lightData=def.deflate(lightData);
      extraData=def.deflate(extraData);
      int blocksReduced=blockData.getEstimatedMemoryConsumptionInBytes();
      int sunlightReduced=sunlightData.getEstimatedMemoryConsumptionInBytes();
      int lightReduced=lightData.getEstimatedMemoryConsumptionInBytes();
      int liquidReduced=extraData.getEstimatedMemoryConsumptionInBytes();
      int totalReduced=blocksReduced + sunlightReduced + lightReduced+ liquidReduced;
      double blocksPercent=100d - (100d / blocksSize * blocksReduced);
      double sunlightPercent=100d - (100d / sunlightSize * sunlightReduced);
      double lightPercent=100d - (100d / lightSize * lightReduced);
      double liquidPercent=100d - (100d / liquidSize * liquidReduced);
      double totalPercent=100d - (100d / totalSize * totalReduced);
      logger.debug("chunk {}: size-before: {} bytes, size-after: {} bytes, total-deflated-by: {}%, blocks-deflated-by={}%, sunlight-deflated-by={}%, light-deflated-by={}%, liquid-deflated-by={}%",pos,SIZE_FORMAT.format(totalSize),SIZE_FORMAT.format(totalReduced),PERCENT_FORMAT.format(totalPercent),PERCENT_FORMAT.format(blocksPercent),PERCENT_FORMAT.format(sunlightPercent),PERCENT_FORMAT.format(lightPercent),PERCENT_FORMAT.format(liquidPercent));
      ChunkMonitor.fireChunkDeflated(this,totalSize,totalReduced);
    }
 else {
      final int oldSize=getEstimatedMemoryConsumptionInBytes();
      blockData=def.deflate(blockData);
      sunlightData=def.deflate(sunlightData);
      lightData=def.deflate(lightData);
      extraData=def.deflate(extraData);
      ChunkMonitor.fireChunkDeflated(this,oldSize,getEstimatedMemoryConsumptionInBytes());
    }
  }
  finally {
    unlock();
  }
}
