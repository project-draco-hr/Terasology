{
  ModuleManager moduleManager=CoreRegistry.get(ModuleManager.class);
  List<WorldGeneratorInfo> infos=Lists.newArrayList();
  for (  Name moduleId : moduleManager.getRegistry().getModuleIds()) {
    Module module=moduleManager.getRegistry().getLatestModuleVersion(moduleId);
    if (module.isCodeModule()) {
      DependencyResolver resolver=new DependencyResolver(moduleManager.getRegistry());
      ResolutionResult resolutionResult=resolver.resolve(module.getId());
      if (resolutionResult.isSuccess()) {
        try (ModuleEnvironment tempEnvironment=moduleManager.loadEnvironment(resolutionResult.getModules(),false)){
          for (          Class<?> generatorClass : tempEnvironment.getTypesAnnotatedWith(RegisterWorldGenerator.class)) {
            if (tempEnvironment.getModuleProviding(generatorClass).equals(module.getId())) {
              RegisterWorldGenerator annotation=generatorClass.getAnnotation(RegisterWorldGenerator.class);
              if (isValidWorldGenerator(generatorClass)) {
                SimpleUri uri=new SimpleUri(moduleId,annotation.id());
                infos.add(new WorldGeneratorInfo(uri,annotation.displayName(),annotation.description()));
              }
 else {
                logger.error("{} marked to be registered as a World Generator, but is not a subclass of WorldGenerator or lacks the correct constructor",generatorClass);
              }
            }
          }
        }
 catch (        Exception e) {
          logger.error("Error loading world generator in module {}, skipping",module.getId(),e);
        }
      }
    }
  }
  Collections.sort(infos);
  generatorInfo=ImmutableList.copyOf(infos);
}
