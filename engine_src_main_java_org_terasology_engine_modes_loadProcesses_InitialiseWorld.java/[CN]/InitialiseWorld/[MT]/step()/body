{
  BlockManager blockManager=context.get(BlockManager.class);
  BiomeManager biomeManager=context.get(BiomeManager.class);
  ModuleEnvironment environment=context.get(ModuleManager.class).getEnvironment();
  context.put(WorldGeneratorPluginLibrary.class,new DefaultWorldGeneratorPluginLibrary(environment,context));
  WorldInfo worldInfo=gameManifest.getWorldInfo(TerasologyConstants.MAIN_WORLD);
  if (worldInfo.getSeed() == null || worldInfo.getSeed().isEmpty()) {
    FastRandom random=new FastRandom();
    worldInfo.setSeed(random.nextString(16));
  }
  logger.info("World seed: \"{}\"",worldInfo.getSeed());
  WorldGeneratorManager worldGeneratorManager=context.get(WorldGeneratorManager.class);
  WorldGenerator worldGenerator;
  try {
    worldGenerator=WorldGeneratorManager.createGenerator(worldInfo.getWorldGenerator(),context);
    worldGenerator.setWorldSeed(worldInfo.getSeed());
    context.put(WorldGenerator.class,worldGenerator);
  }
 catch (  UnresolvedWorldGeneratorException e) {
    logger.error("Unable to load world generator {}. Available world generators: {}",worldInfo.getWorldGenerator(),worldGeneratorManager.getWorldGenerators());
    context.get(GameEngine.class).changeState(new StateMainMenu("Failed to resolve world generator."));
    return true;
  }
  EngineEntityManager entityManager=(EngineEntityManager)context.get(EntityManager.class);
  boolean writeSaveGamesEnabled=context.get(Config.class).getSystem().isWriteSaveGamesEnabled();
  Path savePath=PathManager.getInstance().getSavePath(gameManifest.getTitle());
  StorageManager storageManager;
  try {
    storageManager=writeSaveGamesEnabled ? new ReadWriteStorageManager(savePath,environment,entityManager,blockManager,biomeManager) : new ReadOnlyStorageManager(savePath,environment,entityManager,blockManager,biomeManager);
  }
 catch (  IOException e) {
    logger.error("Unable to create storage manager!",e);
    context.get(GameEngine.class).changeState(new StateMainMenu("Unable to create storage manager!"));
    return true;
  }
  context.put(StorageManager.class,storageManager);
  LocalChunkProvider chunkProvider=new LocalChunkProvider(storageManager,entityManager,worldGenerator,blockManager,biomeManager);
  context.get(ComponentSystemManager.class).register(new RelevanceSystem(chunkProvider),"engine:relevanceSystem");
  EntityAwareWorldProvider entityWorldProvider=new EntityAwareWorldProvider(new WorldProviderCoreImpl(worldInfo,chunkProvider,blockManager.getBlock(BlockManager.UNLOADED_ID),context),context);
  WorldProvider worldProvider=new WorldProviderWrapper(entityWorldProvider);
  context.put(WorldProvider.class,worldProvider);
  chunkProvider.setBlockEntityRegistry(entityWorldProvider);
  context.put(BlockEntityRegistry.class,entityWorldProvider);
  context.get(ComponentSystemManager.class).register(entityWorldProvider,"engine:BlockEntityRegistry");
  DefaultCelestialSystem celestialSystem=new DefaultCelestialSystem(new BasicCelestialModel(),context);
  context.put(CelestialSystem.class,celestialSystem);
  context.get(ComponentSystemManager.class).register(celestialSystem);
  Skysphere skysphere=new Skysphere();
  BackdropProvider backdropProvider=skysphere;
  BackdropRenderer backdropRenderer=skysphere;
  context.put(BackdropProvider.class,backdropProvider);
  context.put(BackdropRenderer.class,backdropRenderer);
  RenderingSubsystemFactory engineSubsystemFactory=context.get(RenderingSubsystemFactory.class);
  WorldRenderer worldRenderer=engineSubsystemFactory.createWorldRenderer(context);
  context.put(WorldRenderer.class,worldRenderer);
  context.put(LocalPlayer.class,new LocalPlayer());
  context.put(Camera.class,worldRenderer.getActiveCamera());
  return true;
}
