{
  CoreRegistry.put(WorldGeneratorPluginLibrary.class,new WorldGeneratorPluginLibrary(CoreRegistry.get(ModuleManager.class),CoreRegistry.get(ReflectFactory.class),CoreRegistry.get(CopyStrategyLibrary.class)));
  StorageManager storageManager=CoreRegistry.put(StorageManager.class,new StorageManagerInternal(CoreRegistry.get(ModuleManager.class),(EngineEntityManager)CoreRegistry.get(EntityManager.class)));
  WorldInfo worldInfo=gameManifest.getWorldInfo(TerasologyConstants.MAIN_WORLD);
  if (worldInfo.getSeed() == null || worldInfo.getSeed().isEmpty()) {
    FastRandom random=new FastRandom();
    worldInfo.setSeed(random.nextString(16));
  }
  logger.info("World seed: \"{}\"",worldInfo.getSeed());
  WorldGenerator worldGenerator;
  try {
    worldGenerator=CoreRegistry.get(WorldGeneratorManager.class).createGenerator(worldInfo.getWorldGenerator());
    CoreRegistry.put(WorldGenerator.class,worldGenerator);
  }
 catch (  UnresolvedWorldGeneratorException e) {
    logger.error("Unable to load world generator",e);
    CoreRegistry.get(GameEngine.class).changeState(new StateMainMenu("Failed to resolve world generator."));
    return false;
  }
  BlockManager blockManager=CoreRegistry.get(BlockManager.class);
  World world=new WorldBuilder(0).addProvider(new PerlinHumidityProvider()).addProvider(new PerlinTemperatureProvider()).addProvider(new PerlinBaseSurfaceProvider()).addProvider(new PerlinRiverProvider()).addProvider(new PerlinOceanProvider()).addProvider(new PerlinHillsAndMountainsProvider()).addProvider(new PerlinBiomeProvider()).addProvider(new PerlinSurfaceToDensityProvider()).addProvider(new PerlinFloraProvider()).addRasterizer(new SolidRasterizer(blockManager)).addRasterizer(new FloraRasterizer(blockManager)).build();
  LocalChunkProvider chunkProvider=new LocalChunkProvider(storageManager,world);
  CoreRegistry.get(ComponentSystemManager.class).register(new RelevanceSystem(chunkProvider),"engine:relevanceSystem");
  EntityAwareWorldProvider entityWorldProvider=new EntityAwareWorldProvider(new WorldProviderCoreImpl(worldInfo,chunkProvider));
  WorldProvider worldProvider=new WorldProviderWrapper(entityWorldProvider);
  CoreRegistry.put(WorldProvider.class,worldProvider);
  chunkProvider.setBlockEntityRegistry(entityWorldProvider);
  CoreRegistry.put(BlockEntityRegistry.class,entityWorldProvider);
  CoreRegistry.get(ComponentSystemManager.class).register(entityWorldProvider,"engine:BlockEntityRegistry");
  RenderingSubsystemFactory engineSubsystemFactory=CoreRegistry.get(RenderingSubsystemFactory.class);
  WorldRenderer worldRenderer=engineSubsystemFactory.createWorldRenderer(worldProvider,chunkProvider,CoreRegistry.get(LocalPlayerSystem.class));
  CoreRegistry.put(WorldRenderer.class,worldRenderer);
  CoreRegistry.put(LocalPlayer.class,new LocalPlayer());
  CoreRegistry.put(Camera.class,worldRenderer.getActiveCamera());
  worldProvider.getTime().setMilliseconds(worldInfo.getTime());
  return true;
}
