{
  Module context=ModuleContext.getContext();
  PrefabData result=new PrefabData();
  result.setPersisted((prefabData.hasPersisted()) ? prefabData.getPersisted() : true);
  result.setAlwaysRelevant(prefabData.hasAlwaysRelevant() ? prefabData.getAlwaysRelevant() : false);
  if (prefabData.hasParentName()) {
    Prefab parent=Assets.get(AssetType.PREFAB,prefabData.getParentName(),Prefab.class);
    result.setParent(parent);
  }
  if (result.getParent() != null) {
    for (    Component comp : result.getParent().iterateComponents()) {
      result.addComponent(componentLibrary.copy(comp));
    }
  }
  for (  String removedComponent : prefabData.getRemovedComponentList()) {
    ComponentMetadata<?> metadata=componentLibrary.resolve(removedComponent,context);
    if (metadata != null) {
      result.removeComponent(metadata.getType());
    }
  }
  for (  EntityData.Component componentData : prefabData.getComponentList()) {
    ComponentMetadata<?> metadata=componentLibrary.resolve(componentData.getType(),context);
    if (metadata != null) {
      Component existing=result.getComponent(metadata.getType());
      if (existing != null) {
        componentSerializer.deserializeOnto(existing,componentData,context);
      }
 else {
        Component newComponent=componentSerializer.deserialize(componentData,context);
        if (newComponent != null) {
          result.addComponent(newComponent);
        }
      }
    }
 else     if (componentData.hasType()) {
      logger.error("Prefab contains unknown component '{}'",componentData.getType());
    }
  }
  return result;
}
