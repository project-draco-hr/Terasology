{
  Class handlerClass=handler.getClass();
  if (!Modifier.isPublic(handlerClass.getModifiers())) {
    logger.error("Cannot register handler {}, must be public",handler.getClass().getName());
    return;
  }
  logger.debug("Registering event handler " + handlerClass.getName());
  for (  Method method : handlerClass.getMethods()) {
    ReceiveEvent receiveEventAnnotation=method.getAnnotation(ReceiveEvent.class);
    if (receiveEventAnnotation != null) {
      if (!receiveEventAnnotation.netFilter().isValidFor(networkSystem.getMode())) {
        continue;
      }
      method.setAccessible(true);
      Class<?>[] types=method.getParameterTypes();
      if (types.length == 2 && Event.class.isAssignableFrom(types[0]) && EntityRef.class.isAssignableFrom(types[1])) {
        logger.debug("Found method: " + method.toString());
        ReflectedEventHandlerInfo handlerInfo=new ReflectedEventHandlerInfo(handler,method,receiveEventAnnotation.priority(),receiveEventAnnotation.components());
        if (receiveEventAnnotation.components().length == 0) {
          generalHandlers.put((Class<? extends Event>)types[0],handlerInfo);
        }
 else {
          for (          Class<? extends Component> c : receiveEventAnnotation.components()) {
            addEventHandler((Class<? extends Event>)types[0],handlerInfo,c);
            for (            Class<? extends Event> childType : childEvents.get((Class<? extends Event>)types[0])) {
              addEventHandler(childType,handlerInfo,c);
            }
          }
        }
      }
 else {
        logger.error("Invalid event handler method: {}",method.getName());
      }
    }
  }
}
