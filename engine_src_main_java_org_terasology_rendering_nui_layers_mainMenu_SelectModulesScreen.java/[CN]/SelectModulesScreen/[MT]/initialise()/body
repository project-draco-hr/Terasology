{
  resolver=new DependencyResolver(moduleManager.getRegistry());
  modulesLookup=Maps.newHashMap();
  sortedModules=Lists.newArrayList();
  populateModuleInformation();
  Collections.sort(sortedModules,new Comparator<ModuleSelectionInfo>(){
    @Override public int compare(    ModuleSelectionInfo o1,    ModuleSelectionInfo o2){
      return o1.getMetadata().getDisplayName().toString().compareTo(o2.getMetadata().getDisplayName().toString());
    }
  }
);
  final UIList<ModuleSelectionInfo> moduleList=find("moduleList",UIList.class);
  if (moduleList != null) {
    moduleList.setList(sortedModules);
    moduleList.setItemRenderer(new AbstractItemRenderer<ModuleSelectionInfo>(){
      public String getString(      ModuleSelectionInfo value){
        return value.getMetadata().getDisplayName().toString();
      }
      @Override public void draw(      ModuleSelectionInfo value,      Canvas canvas){
        if (value.isSelected() && value.isExplicitSelection()) {
          canvas.setMode("enabled");
        }
 else         if (value.isSelected()) {
          canvas.setMode("dependency");
        }
 else         if (value.isValidToSelect()) {
          canvas.setMode("disabled");
        }
 else {
          canvas.setMode("invalid");
        }
        canvas.drawText(getString(value),canvas.getRegion());
      }
      @Override public Vector2i getPreferredSize(      ModuleSelectionInfo value,      Canvas canvas){
        String text=getString(value);
        return new Vector2i(canvas.getCurrentStyle().getFont().getWidth(text),canvas.getCurrentStyle().getFont().getLineHeight());
      }
    }
);
    moduleList.subscribe(new ItemActivateEventListener<ModuleSelectionInfo>(){
      @Override public void onItemActivated(      UIWidget widget,      ModuleSelectionInfo item){
        if (item.isSelected() && moduleList.getSelection().isExplicitSelection()) {
          deselect(item);
        }
 else         if (item.isValidToSelect()) {
          select(item);
        }
      }
    }
);
    final Binding<ModuleMetadata> moduleInfoBinding=new ReadOnlyBinding<ModuleMetadata>(){
      @Override public ModuleMetadata get(){
        if (moduleList.getSelection() != null) {
          return moduleList.getSelection().getMetadata();
        }
        return null;
      }
    }
;
    UILabel name=find("name",UILabel.class);
    if (name != null) {
      name.bindText(new ReadOnlyBinding<String>(){
        @Override public String get(){
          if (moduleInfoBinding.get() != null) {
            return moduleInfoBinding.get().getDisplayName().toString();
          }
          return "";
        }
      }
);
    }
    UILabel version=find("version",UILabel.class);
    if (version != null) {
      version.bindText(new ReadOnlyBinding<String>(){
        @Override public String get(){
          if (moduleInfoBinding.get() != null) {
            return moduleInfoBinding.get().getVersion().toString();
          }
          return "";
        }
      }
);
    }
    UILabel description=find("description",UILabel.class);
    if (description != null) {
      description.bindText(new ReadOnlyBinding<String>(){
        @Override public String get(){
          if (moduleInfoBinding.get() != null) {
            return moduleInfoBinding.get().getDescription().toString();
          }
          return "";
        }
      }
);
    }
    UILabel error=find("errorMessage",UILabel.class);
    if (error != null) {
      error.bindText(new ReadOnlyBinding<String>(){
        @Override public String get(){
          if (moduleList.getSelection() != null) {
            if (!moduleList.getSelection().isValidToSelect()) {
              return "Incompatible with existing selection, or dependencies cannot be resolved";
            }
          }
          return "";
        }
      }
);
    }
    UIButton toggle=find("toggleActivation",UIButton.class);
    if (toggle != null) {
      toggle.subscribe(new ActivateEventListener(){
        @Override public void onActivated(        UIWidget button){
          if (moduleList.getSelection() != null) {
            if (moduleList.getSelection().isSelected() && moduleList.getSelection().isExplicitSelection()) {
              deselect(moduleList.getSelection());
            }
 else             if (moduleList.getSelection().isValidToSelect()) {
              select(moduleList.getSelection());
            }
          }
        }
      }
);
      toggle.bindVisible(new ReadOnlyBinding<Boolean>(){
        @Override public Boolean get(){
          return moduleList.getSelection() != null && (moduleList.getSelection().isSelected() || moduleList.getSelection().isValidToSelect());
        }
      }
);
      toggle.bindText(new ReadOnlyBinding<String>(){
        @Override public String get(){
          if (moduleList.getSelection() != null) {
            if (moduleList.getSelection().isExplicitSelection()) {
              return "Deactivate";
            }
 else {
              return "Activate";
            }
          }
          return "";
        }
      }
);
    }
    UIButton enableAll=find("enableAll",UIButton.class);
    if (enableAll != null) {
      enableAll.subscribe(new ActivateEventListener(){
        @Override public void onActivated(        UIWidget button){
          for (          ModuleSelectionInfo info : sortedModules) {
            if (!info.isExplicitSelection() && info.isValidToSelect()) {
              select(info);
            }
          }
        }
      }
);
    }
    UIButton disableAll=find("disableAll",UIButton.class);
    if (disableAll != null) {
      disableAll.subscribe(new ActivateEventListener(){
        @Override public void onActivated(        UIWidget button){
          for (          ModuleSelectionInfo info : sortedModules) {
            if (info.isSelected() && info.isExplicitSelection()) {
              deselect(info);
            }
          }
        }
      }
);
    }
  }
  WidgetUtil.trySubscribe(this,"close",new ActivateEventListener(){
    @Override public void onActivated(    UIWidget button){
      getManager().popScreen();
    }
  }
);
}
