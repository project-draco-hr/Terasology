{
  selection=new ModuleSelection(moduleManager);
  for (  String moduleId : config.getDefaultModSelection().listModules()) {
    ModuleSelection newSelection=selection.add(moduleId);
    if (newSelection.isValid()) {
      selection=newSelection;
    }
  }
  List<String> moduleIds=Lists.newArrayList(moduleManager.getModuleIds());
  moduleIds.remove("engine");
  List<Module> modules=Lists.newArrayListWithCapacity(moduleIds.size());
  for (  String id : moduleIds) {
    modules.add(moduleManager.getLatestModuleVersion(id));
  }
  Collections.sort(modules,new Comparator<Module>(){
    @Override public int compare(    Module o1,    Module o2){
      return o1.getModuleInfo().getDisplayName().compareTo(o2.getModuleInfo().getDisplayName());
    }
  }
);
  final UIList<Module> moduleList=find("moduleList",UIList.class);
  if (moduleList != null) {
    moduleList.setList(modules);
    moduleList.setItemRenderer(new AbstractItemRenderer<Module>(){
      public String getString(      Module value){
        return value.getModuleInfo().getDisplayName();
      }
      @Override public void draw(      Module value,      Canvas canvas){
        if (selection.contains(value.getId())) {
          canvas.setMode("enabled");
        }
 else {
          canvas.setMode("disabled");
        }
        canvas.drawText(getString(value),canvas.getRegion());
      }
      @Override public Vector2i getPreferredSize(      Module value,      Canvas canvas){
        String text=getString(value);
        return new Vector2i(canvas.getCurrentStyle().getFont().getWidth(text),canvas.getCurrentStyle().getFont().getLineHeight());
      }
    }
);
    moduleList.subscribe(new ItemActivateEventListener<Module>(){
      @Override public void onItemActivated(      UIWidget widget,      Module item){
        String id=item.getId();
        if (id.equals("core")) {
          return;
        }
        if (selection.contains(id)) {
          ModuleSelection newSelection=selection.remove(id);
          if (newSelection.isValid()) {
            selection=newSelection;
          }
        }
 else {
          ModuleSelection newSelection=selection.add(id);
          if (newSelection.isValid()) {
            selection=newSelection;
          }
        }
      }
    }
);
    Binding<ModuleInfo> moduleInfoBinding=new ReadOnlyBinding<ModuleInfo>(){
      @Override public ModuleInfo get(){
        if (moduleList.getSelection() != null) {
          return moduleList.getSelection().getModuleInfo();
        }
        return null;
      }
    }
;
    UILabel name=find("name",UILabel.class);
    if (name != null) {
      name.bindText(BindHelper.bindBoundBeanProperty("displayName",moduleInfoBinding,ModuleInfo.class,String.class));
    }
    UILabel version=find("version",UILabel.class);
    if (version != null) {
      version.bindText(BindHelper.bindBoundBeanProperty("version",moduleInfoBinding,ModuleInfo.class,String.class));
    }
    UILabel description=find("description",UILabel.class);
    if (description != null) {
      description.bindText(BindHelper.bindBoundBeanProperty("description",moduleInfoBinding,ModuleInfo.class,String.class));
    }
    UILabel error=find("errorMessage",UILabel.class);
    if (error != null) {
      error.bindText(new ReadOnlyBinding<String>(){
        @Override public String get(){
          if (moduleList.getSelection() != null) {
            ModuleSelection newModuleSelection=selection.add(moduleList.getSelection().getId());
            if (!newModuleSelection.isValid()) {
              return newModuleSelection.getValidationMessages().get(0);
            }
          }
          return "";
        }
      }
);
    }
    UIButton toggle=find("toggleActivation",UIButton.class);
    if (toggle != null) {
      toggle.subscribe(new ActivateEventListener(){
        @Override public void onActivated(        UIWidget button){
          if (moduleList.getSelection() != null) {
            String id=moduleList.getSelection().getId();
            if (id.equals("core")) {
              return;
            }
            if (selection.contains(id)) {
              ModuleSelection newSelection=selection.remove(id);
              if (newSelection.isValid()) {
                selection=newSelection;
              }
            }
 else {
              ModuleSelection newSelection=selection.add(id);
              if (newSelection.isValid()) {
                selection=newSelection;
              }
            }
          }
        }
      }
);
      toggle.bindVisible(new ReadOnlyBinding<Boolean>(){
        @Override public Boolean get(){
          return moduleList.getSelection() != null && (selection.contains(moduleList.getSelection().getId()) || selection.add(moduleList.getSelection().getId()).isValid());
        }
      }
);
      toggle.bindText(new ReadOnlyBinding<String>(){
        @Override public String get(){
          if (moduleList.getSelection() != null) {
            String id=moduleList.getSelection().getId();
            if (selection.contains(id)) {
              return "Deactivate";
            }
 else {
              return "Activate";
            }
          }
          return "";
        }
      }
);
    }
    UIButton enableAll=find("enableAll",UIButton.class);
    if (enableAll != null) {
      enableAll.subscribe(new ActivateEventListener(){
        @Override public void onActivated(        UIWidget button){
          for (          Module m : moduleList.getList()) {
            ModuleSelection newSelection=selection.add(m);
            if (newSelection.isValid()) {
              selection=newSelection;
            }
          }
        }
      }
);
    }
    UIButton disableAll=find("disableAll",UIButton.class);
    if (disableAll != null) {
      disableAll.subscribe(new ActivateEventListener(){
        @Override public void onActivated(        UIWidget button){
          for (          Module m : moduleList.getList()) {
            if (m.getId().equals("core")) {
              continue;
            }
            ModuleSelection newSelection=selection.remove(m.getId());
            selection=newSelection;
          }
        }
      }
);
    }
  }
  WidgetUtil.trySubscribe(this,"close",new ActivateEventListener(){
    @Override public void onActivated(    UIWidget button){
      getManager().popScreen();
    }
  }
);
}
