{
  byte[][] inflated=new byte[sizeY][];
  byte[] deflated=new byte[sizeY];
  int packed=0;
  for (int y=0; y < sizeY; y++) {
    int start=y * sizeXZ;
    byte first=data[start];
    boolean packable=true;
    for (int i=1; i < sizeXZ; i++) {
      if (data[start + i] != first) {
        packable=false;
        break;
      }
    }
    if (packable) {
      deflated[y]=first;
      ++packed;
    }
 else {
      byte[] tmp=new byte[sizeXZ];
      System.arraycopy(data,start,tmp,0,sizeXZ);
      inflated[y]=tmp;
    }
  }
  if (packed == sizeY) {
    byte first=deflated[0];
    boolean packable=true;
    for (int i=1; i < sizeY; i++) {
      if (deflated[i] != first) {
        packable=false;
        break;
      }
    }
    if (packable)     return new TeraSparseArray8Bit(sizeX,sizeY,sizeZ,first);
  }
  if (packed >= 4) {
    return new TeraSparseArray8Bit(sizeX,sizeY,sizeZ,inflated,deflated);
  }
  return this;
}
