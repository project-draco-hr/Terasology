{
  int texId=0;
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  READ_ONLY_GBUFFER.bindTexture();
  lightBufferPass.setInt("texSceneOpaque",texId++,true);
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  READ_ONLY_GBUFFER.bindDepthTexture();
  lightBufferPass.setInt("texSceneOpaqueDepth",texId++,true);
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  READ_ONLY_GBUFFER.bindNormalsTexture();
  lightBufferPass.setInt("texSceneOpaqueNormals",texId++,true);
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  READ_ONLY_GBUFFER.bindLightBufferTexture();
  lightBufferPass.setInt("texSceneOpaqueLightBuffer",texId,true);
  sceneReflectiveRefractive=dynamicFBOsManager.get(REFRACTIVE_REFLECTIVE_URN);
  WRITE_ONLY_GBUFFER.bind();
  WRITE_ONLY_GBUFFER.setRenderBufferMask(true,true,true);
  setViewportToSizeOf(WRITE_ONLY_GBUFFER);
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  renderFullscreenQuad();
  bindDisplay();
  setViewportToSizeOf(READ_ONLY_GBUFFER);
  dynamicFBOsManager.swapReadWriteBuffers();
  READ_ONLY_GBUFFER.attachDepthBufferTo(sceneReflectiveRefractive);
}
