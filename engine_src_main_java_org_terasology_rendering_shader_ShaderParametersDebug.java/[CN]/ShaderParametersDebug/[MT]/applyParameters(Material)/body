{
  super.applyParameters(program);
  Config config=CoreRegistry.get(Config.class);
  int texId=0;
  DisplayResolutionDependentFBOs displayResolutionDependentFBOs=CoreRegistry.get(DisplayResolutionDependentFBOs.class);
  ShadowMapResolutionDependentFBOs shadowMapResolutionDependentFBOs=CoreRegistry.get(ShadowMapResolutionDependentFBOs.class);
switch (config.getRendering().getDebug().getStage()) {
case SHADOW_MAP:
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  shadowMapResolutionDependentFBOs.bindFboDepthTexture(ShadowMapNode.SHADOW_MAP);
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_COLOR:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboColorTexture(READ_ONLY_GBUFFER.getName());
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_NORMALS:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboNormalsTexture(READ_ONLY_GBUFFER.getName());
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_DEPTH:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboDepthTexture(READ_ONLY_GBUFFER.getName());
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_SUNLIGHT:
case OPAQUE_LIGHT_BUFFER:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboLightBufferTexture(READ_ONLY_GBUFFER.getName());
program.setInt("texDebug",texId++,true);
break;
case TRANSPARENT_COLOR:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboColorTexture(ChunksRefractiveReflectiveNode.REFRACTIVE_REFLECTIVE);
program.setInt("texDebug",texId++,true);
break;
case SSAO:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboColorTexture(AmbientOcclusionPassesNode.SSAO);
program.setInt("texDebug",texId++,true);
break;
case SOBEL:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboColorTexture(OutlineNode.OUTLINE);
program.setInt("texDebug",texId++,true);
break;
case BAKED_OCCLUSION:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboColorTexture(READ_ONLY_GBUFFER.getName());
program.setInt("texDebug",texId++,true);
break;
case RECONSTRUCTED_POSITION:
Camera activeCamera=CoreRegistry.get(WorldRenderer.class).getActiveCamera();
if (activeCamera != null) {
program.setMatrix4("invProjMatrix",activeCamera.getInverseProjectionMatrix(),true);
}
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboDepthTexture(READ_ONLY_GBUFFER.getName());
program.setInt("texDebug",texId++,true);
break;
case BLOOM:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboColorTexture(BloomPassesNode.BLOOM_2);
program.setInt("texDebug",texId++,true);
break;
case HIGH_PASS:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboColorTexture(BloomPassesNode.HIGH_PASS);
program.setInt("texDebug",texId++,true);
break;
case SKY_BAND:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboColorTexture(SkyBandsNode.SKY_BAND_1);
program.setInt("texDebug",texId++,true);
break;
case LIGHT_SHAFTS:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
displayResolutionDependentFBOs.bindFboColorTexture(LightShaftsNode.LIGHT_SHAFTS);
program.setInt("texDebug",texId++,true);
break;
default :
break;
}
program.setInt("debugRenderingStage",CoreRegistry.get(Config.class).getRendering().getDebug().getStage().getIndex());
}
