{
  super.applyParameters(program);
  Config config=CoreRegistry.get(Config.class);
  int texId=0;
  LwjglRenderingProcess renderingProcess=CoreRegistry.get(LwjglRenderingProcess.class);
switch (config.getRendering().getDebug().getStage()) {
case SHADOW_MAP:
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  renderingProcess.bindFboDepthTexture("sceneShadowMap");
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_COLOR:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboColorTexture("sceneOpaque");
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_NORMALS:
case OPAQUE_SUNLIGHT:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboNormalsTexture("sceneOpaque");
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_DEPTH:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboDepthTexture("sceneOpaque");
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_LIGHT_BUFFER:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboLightBufferTexture("sceneOpaque");
program.setInt("texDebug",texId++,true);
break;
case TRANSPARENT_COLOR:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboColorTexture("sceneReflectiveRefractive");
program.setInt("texDebug",texId++,true);
break;
case SSAO:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboColorTexture("ssaoBlurred");
program.setInt("texDebug",texId++,true);
break;
case SOBEL:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboColorTexture("outline");
program.setInt("texDebug",texId++,true);
break;
case BAKED_OCCLUSION:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboColorTexture("sceneOpaque");
program.setInt("texDebug",texId++,true);
break;
case RECONSTRUCTED_POSITION:
Camera activeCamera=CoreRegistry.get(WorldRenderer.class).getActiveCamera();
if (activeCamera != null) {
program.setMatrix4("invProjMatrix",activeCamera.getInverseProjectionMatrix(),true);
}
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboDepthTexture("sceneOpaque");
program.setInt("texDebug",texId++,true);
break;
case BLOOM:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboColorTexture("sceneBloom2");
program.setInt("texDebug",texId++,true);
break;
case HIGH_PASS:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboColorTexture("sceneHighPass");
program.setInt("texDebug",texId++,true);
break;
case SKY_BAND:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboColorTexture("sceneSkyBand1");
program.setInt("texDebug",texId++,true);
break;
case LIGHT_SHAFTS:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
renderingProcess.bindFboColorTexture("lightShafts");
program.setInt("texDebug",texId++,true);
break;
default :
break;
}
program.setInt("debugRenderingStage",CoreRegistry.get(Config.class).getRendering().getDebug().getStage().getIndex());
}
