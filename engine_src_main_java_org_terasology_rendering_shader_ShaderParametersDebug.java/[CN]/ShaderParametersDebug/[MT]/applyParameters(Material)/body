{
  super.applyParameters(program);
  Config config=CoreRegistry.get(Config.class);
  int texId=0;
  DynamicFBM dynamicFBM=CoreRegistry.get(DynamicFBM.class);
  final ResourceUrn sceneOpaqueUrn=DefaultDynamicFBOs.ReadOnlyGBuffer.getResourceUrn();
switch (config.getRendering().getDebug().getStage()) {
case SHADOW_MAP:
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  dynamicFBM.bindFboDepthTexture(ShadowMapNode.SHADOW_MAP_URN);
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_COLOR:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboColorTexture(sceneOpaqueUrn);
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_NORMALS:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboNormalsTexture(sceneOpaqueUrn);
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_DEPTH:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboDepthTexture(sceneOpaqueUrn);
program.setInt("texDebug",texId++,true);
break;
case OPAQUE_SUNLIGHT:
case OPAQUE_LIGHT_BUFFER:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboLightBufferTexture(sceneOpaqueUrn);
program.setInt("texDebug",texId++,true);
break;
case TRANSPARENT_COLOR:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboColorTexture(ChunksRefractiveReflectiveNode.REFRACTIVE_REFLECTIVE_URN);
program.setInt("texDebug",texId++,true);
break;
case SSAO:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboColorTexture(AmbientOcclusionPassesNode.SSAO_URN);
program.setInt("texDebug",texId++,true);
break;
case SOBEL:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboColorTexture(OutlineNode.OUTLINE_URN);
program.setInt("texDebug",texId++,true);
break;
case BAKED_OCCLUSION:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboColorTexture(sceneOpaqueUrn);
program.setInt("texDebug",texId++,true);
break;
case RECONSTRUCTED_POSITION:
Camera activeCamera=CoreRegistry.get(WorldRenderer.class).getActiveCamera();
if (activeCamera != null) {
program.setMatrix4("invProjMatrix",activeCamera.getInverseProjectionMatrix(),true);
}
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboDepthTexture(sceneOpaqueUrn);
program.setInt("texDebug",texId++,true);
break;
case BLOOM:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboColorTexture(BloomPassesNode.BLOOM_2_URN);
program.setInt("texDebug",texId++,true);
break;
case HIGH_PASS:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboColorTexture(BloomPassesNode.HIGH_PASS_URN);
program.setInt("texDebug",texId++,true);
break;
case SKY_BAND:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboColorTexture(SkyBandsNode.SKY_BAND_1_URN);
program.setInt("texDebug",texId++,true);
break;
case LIGHT_SHAFTS:
GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
dynamicFBM.bindFboColorTexture(LightShaftsNode.LIGHT_SHAFTS_URN);
program.setInt("texDebug",texId++,true);
break;
default :
break;
}
program.setInt("debugRenderingStage",CoreRegistry.get(Config.class).getRendering().getDebug().getStage().getIndex());
}
