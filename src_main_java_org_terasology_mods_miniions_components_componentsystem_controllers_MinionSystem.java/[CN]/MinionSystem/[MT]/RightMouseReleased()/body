{
  UIMinion minionbehaviourmenu=(UIMinion)GUIManager.getInstance().getWindowById(BEHAVIOUR_MENU);
  if (minionbehaviourmenu != null) {
    GUIManager.getInstance().removeWindow(minionbehaviourmenu);
    if (GUIManager.getInstance().getWindowById("container") != null) {
      GUIManager.getInstance().setFocusedWindow("container");
    }
  }
  setMinionSelectMode(false);
switch (getSelectedBehaviour()) {
case Clear:
{
      SimpleMinionAIComponent minionai=getSelectedMinion().getComponent(SimpleMinionAIComponent.class);
      minionai.ClearCommands();
      getSelectedMinion().saveComponent(minionai);
      MinionComponent minioncomp=getSelectedMinion().getComponent(MinionComponent.class);
      minioncomp.minionBehaviour=MinionBehaviour.Stay;
      getSelectedMinion().saveComponent(minioncomp);
      break;
    }
case Inventory:
{
    LocalPlayer localPlayer=CoreRegistry.get(LocalPlayer.class);
    if (localPlayer == null)     return;
    getSelectedMinion().send(new ActivateEvent(getSelectedMinion(),localPlayer.getEntity()));
    MinionComponent minioncomp=getSelectedMinion().getComponent(MinionComponent.class);
    minioncomp.minionBehaviour=MinionBehaviour.Stay;
    getSelectedMinion().saveComponent(minioncomp);
    break;
  }
case Test:
{
  LocalPlayer localPlayer=CoreRegistry.get(LocalPlayer.class);
  if (localPlayer == null)   return;
  EntityRef entity=getSelectedMinion();
  MinionMessage messagetosend=new MinionMessage(MinionMessagePriority.Debug,"test","testdesc","testcont",entity,localPlayer.getEntity());
  entity.send(new MinionMessageEvent(messagetosend));
  break;
}
case Disappear:
{
destroyActiveMinion();
break;
}
}
}
