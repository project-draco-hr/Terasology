{
  super.applyParameters(program);
  DefaultRenderingProcess.FBO sceneOpaque=DefaultRenderingProcess.getInstance().getFBO("sceneOpaque");
  int texId=0;
  if (sceneOpaque != null) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindDepthTexture();
    program.setInt("texSceneOpaqueDepth",texId++,true);
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindNormalsTexture();
    program.setInt("texSceneOpaqueNormals",texId++,true);
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindLightBufferTexture();
    program.setInt("texSceneOpaqueLightBuffer",texId++,true);
  }
  if (CoreRegistry.get(Config.class).getRendering().isDynamicShadows()) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    DefaultRenderingProcess.getInstance().bindFboDepthTexture("sceneShadowMap");
    program.setInt("texSceneShadowMap",texId++,true);
    Camera lightCamera=CoreRegistry.get(WorldRenderer.class).getLightCamera();
    Camera activeCamera=CoreRegistry.get(WorldRenderer.class).getActiveCamera();
    if (lightCamera != null && activeCamera != null) {
      program.setMatrix4("lightViewProjMatrix",lightCamera.getViewProjectionMatrix(),true);
      program.setMatrix4("invViewProjMatrix",activeCamera.getInverseViewProjectionMatrix(),true);
      Vector3f activeCameraToLightSpace=new Vector3f();
      activeCameraToLightSpace.sub(activeCamera.getPosition(),lightCamera.getPosition());
      program.setFloat3("activeCameraToLightSpace",activeCameraToLightSpace.x,activeCameraToLightSpace.y,activeCameraToLightSpace.z,true);
    }
    if (CoreRegistry.get(Config.class).getRendering().isCloudShadows()) {
      Texture clouds=Assets.getTexture("engine:perlinNoiseTileable");
      GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
      glBindTexture(GL11.GL_TEXTURE_2D,clouds.getId());
      program.setInt("texSceneClouds",texId++,true);
    }
  }
}
