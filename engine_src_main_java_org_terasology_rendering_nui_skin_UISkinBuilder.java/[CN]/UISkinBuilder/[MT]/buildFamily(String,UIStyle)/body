{
  UIStyle baseStyle=new UIStyle(defaultStyle);
  if (!family.isEmpty()) {
    UIStyleFragment fragment=baseStyles.get(family);
    fragment.applyTo(baseStyle);
  }
  Map<Class<? extends UIWidget>,Table<String,String,UIStyle>> familyStyles=Maps.newHashMap();
  Map<StyleKey,UIStyleFragment> styleLookup=elementStyles.row(family);
  Map<StyleKey,UIStyleFragment> baseStyleLookup=(family.isEmpty()) ? Maps.<StyleKey,UIStyleFragment>newHashMap() : elementStyles.row("");
  for (  StyleKey styleKey : Sets.union(styleLookup.keySet(),baseStyleKeys)) {
    UIStyle elementStyle=new UIStyle(baseStyle);
    List<Class<? extends UIWidget>> inheritanceTree=ReflectionUtil.getInheritanceTree(styleKey.element,UIWidget.class);
    applyStylesForInheritanceTree(inheritanceTree,"","",elementStyle,styleLookup,baseStyleLookup);
    if (!styleKey.part.isEmpty()) {
      applyStylesForInheritanceTree(inheritanceTree,styleKey.part,"",elementStyle,styleLookup,baseStyleLookup);
    }
    if (!styleKey.mode.isEmpty()) {
      applyStylesForInheritanceTree(inheritanceTree,styleKey.part,styleKey.mode,elementStyle,styleLookup,baseStyleLookup);
    }
    Table<String,String,UIStyle> elementTable=familyStyles.get(styleKey.element);
    if (elementTable == null) {
      elementTable=HashBasedTable.create();
      familyStyles.put(styleKey.element,elementTable);
    }
    elementTable.put(styleKey.part,styleKey.mode,elementStyle);
  }
  return new UIStyleFamily(baseStyle,familyStyles);
}
