{
  Table<Class<? extends UIElement>,String,UIStyle> results=HashBasedTable.create();
  Table<Class<? extends UIElement>,String,UIStyleFragment> defaultTable=getElementTable("");
  for (  Class<? extends UIElement> element : elementClasses) {
    UIStyleFragment fragment=defaultTable.get(element,"");
    if (fragment != null) {
      UIStyle style=new UIStyle(defaultStyle);
      List<Class<? extends UIElement>> inheritanceTree=ReflectionUtil.getInheritanceTree(element,UIElement.class);
      for (      Class<? extends UIElement> elementType : inheritanceTree) {
        UIStyleFragment frag=defaultTable.get(elementType,"");
        if (frag != null) {
          frag.applyTo(style);
        }
      }
      results.put(element,"",style);
      Map<String,UIStyle> modeStyles=Maps.newLinkedHashMap();
      for (      Class<? extends UIElement> elementType : inheritanceTree) {
        for (        String state : modes.get(elementType)) {
          UIStyleFragment stateFrag=defaultTable.get(element,state);
          if (stateFrag != null) {
            UIStyle modeStyle=modeStyles.get(state);
            if (modeStyle == null) {
              modeStyle=new UIStyle(style);
              modeStyles.put(state,modeStyle);
            }
            stateFrag.applyTo(modeStyle);
          }
        }
      }
      for (      Map.Entry<String,UIStyle> entry : modeStyles.entrySet()) {
        results.put(element,entry.getKey(),entry.getValue());
      }
    }
  }
  return results;
}
