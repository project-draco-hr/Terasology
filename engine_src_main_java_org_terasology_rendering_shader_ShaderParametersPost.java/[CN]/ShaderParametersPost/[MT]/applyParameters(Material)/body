{
  super.applyParameters(program);
  CameraTargetSystem cameraTargetSystem=CoreRegistry.get(CameraTargetSystem.class);
  DynamicFBM dynamicFBM=CoreRegistry.get(DynamicFBM.class);
  int texId=0;
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  dynamicFBM.bindFboColorTexture(ToneMappingNode.TONE_MAPPED_URN);
  program.setInt("texScene",texId++,true);
  if (CoreRegistry.get(Config.class).getRendering().getBlurIntensity() != 0) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    dynamicFBM.getFBO(BlurPassesNode.BLUR_1_URN).bindTexture();
    program.setInt("texBlur",texId++,true);
    if (cameraTargetSystem != null) {
      program.setFloat("focalDistance",cameraTargetSystem.getFocalDistance(),true);
    }
  }
  Texture colorGradingLut=Assets.getTexture("engine:colorGradingLut1").get();
  if (colorGradingLut != null) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    glBindTexture(GL12.GL_TEXTURE_3D,colorGradingLut.getId());
    program.setInt("texColorGradingLut",texId++,true);
  }
  FBO sceneCombined=dynamicFBM.getFBO(DefaultDynamicFBOs.ReadOnlyGBuffer.getResourceUrn());
  if (sceneCombined != null) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneCombined.bindDepthTexture();
    program.setInt("texDepth",texId++,true);
    ResourceUrn noiseTextureUri=TextureUtil.getTextureUriForWhiteNoise(1024,0x1234,0,512);
    Texture filmGrainNoiseTexture=Assets.getTexture(noiseTextureUri).get();
    if (CoreRegistry.get(Config.class).getRendering().isFilmGrain()) {
      GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
      glBindTexture(GL11.GL_TEXTURE_2D,filmGrainNoiseTexture.getId());
      program.setInt("texNoise",texId++,true);
      program.setFloat("grainIntensity",filmGrainIntensity,true);
      program.setFloat("noiseOffset",rand.nextFloat(),true);
      program.setFloat2("noiseSize",filmGrainNoiseTexture.getWidth(),filmGrainNoiseTexture.getHeight(),true);
      program.setFloat2("renderTargetSize",sceneCombined.width(),sceneCombined.height(),true);
    }
  }
  Camera activeCamera=CoreRegistry.get(WorldRenderer.class).getActiveCamera();
  if (activeCamera != null && CoreRegistry.get(Config.class).getRendering().isMotionBlur()) {
    program.setMatrix4("invViewProjMatrix",activeCamera.getInverseViewProjectionMatrix(),true);
    program.setMatrix4("prevViewProjMatrix",activeCamera.getPrevViewProjectionMatrix(),true);
  }
}
