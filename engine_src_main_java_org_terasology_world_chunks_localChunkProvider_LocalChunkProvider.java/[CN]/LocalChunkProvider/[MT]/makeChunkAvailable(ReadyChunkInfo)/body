{
  ChunkImpl chunk=nearCache.get(readyChunkInfo.getPos());
  if (chunk == null) {
    return false;
  }
  for (  Vector3i pos : Region3i.createFromCenterExtents(readyChunkInfo.getPos(),1)) {
    if (nearCache.get(pos) == null) {
      return false;
    }
  }
  chunk.lock();
  try {
    chunk.markReady();
    if (!readyChunkInfo.isNewChunk()) {
      PerformanceMonitor.startActivity("Generating Block Entities");
      generateBlockEntities(chunk);
      PerformanceMonitor.endActivity();
    }
    if (readyChunkInfo.getChunkStore() != null) {
      readyChunkInfo.getChunkStore().restoreEntities();
    }
    if (!readyChunkInfo.isNewChunk()) {
      PerformanceMonitor.startActivity("Sending OnAddedBlocks");
      readyChunkInfo.getBlockPositionMapppings().forEachEntry(new TShortObjectProcedure<TIntList>(){
        @Override public boolean execute(        short id,        TIntList positions){
          if (positions.size() > 0) {
            blockManager.getBlock(id).getEntity().send(new OnAddedBlocks(positions,registry));
          }
          return true;
        }
      }
);
      PerformanceMonitor.endActivity();
    }
    PerformanceMonitor.startActivity("Sending OnActivateBlocks");
    readyChunkInfo.getBlockPositionMapppings().forEachEntry(new TShortObjectProcedure<TIntList>(){
      @Override public boolean execute(      short id,      TIntList positions){
        if (positions.size() > 0) {
          blockManager.getBlock(id).getEntity().send(new OnActivatedBlocks(positions,registry));
        }
        return true;
      }
    }
);
    PerformanceMonitor.endActivity();
    PerformanceMonitor.startActivity("Light Merge");
    ChunkImpl[] localChunks=new ChunkImpl[27];
    int index=0;
    for (int z=-1; z < 2; ++z) {
      for (int y=-1; y < 2; ++y) {
        for (int x=-1; x < 2; ++x) {
          ChunkImpl localChunk=getChunk(chunk.getPos().x + x,chunk.getPos().y + y,chunk.getPos().z + z);
          if (localChunk != null) {
            localChunks[index]=localChunk;
          }
          index++;
        }
      }
    }
    List<BatchPropagator> propagators=Lists.newArrayList();
    LightPropagationRules lightRules=new LightPropagationRules();
    SunlightRegenPropagationRules sunlightRegenRules=new SunlightRegenPropagationRules();
    propagators.add(new StandardBatchPropagator(new LightPropagationRules(),new LocalChunkView(localChunks,lightRules)));
    PropagatorWorldView regenWorldView=new LocalChunkView(localChunks,sunlightRegenRules);
    PropagationRules sunlightRules=new SunlightPropagationRules(regenWorldView);
    PropagatorWorldView sunlightWorldView=new LocalChunkView(localChunks,sunlightRules);
    BatchPropagator sunlightPropagator=new StandardBatchPropagator(sunlightRules,sunlightWorldView);
    propagators.add(new SunlightRegenBatchPropagator(sunlightRegenRules,regenWorldView,sunlightPropagator,sunlightWorldView));
    propagators.add(sunlightPropagator);
    for (    BatchPropagator propagator : propagators) {
      for (      Side side : Side.values()) {
        Vector3i adjChunkPos=side.getAdjacentPos(readyChunkInfo.getPos());
        ChunkImpl adjChunk=nearCache.get(adjChunkPos);
        if (adjChunk != null) {
          propagator.propagateBetween(adjChunk,chunk,side.reverse(),false);
        }
      }
      for (      Side side : Side.values()) {
        Vector3i adjChunkPos=side.getAdjacentPos(readyChunkInfo.getPos());
        ChunkImpl adjChunk=getChunk(adjChunkPos);
        if (adjChunk != null) {
          propagator.propagateBetween(chunk,adjChunk,side,true);
        }
      }
    }
    for (    BatchPropagator propagator : propagators) {
      propagator.process();
    }
    chunk.deflateSunlight();
    PerformanceMonitor.endActivity();
    if (!readyChunkInfo.isNewChunk()) {
      worldEntity.send(new OnChunkGenerated(readyChunkInfo.getPos()));
    }
    worldEntity.send(new OnChunkLoaded(readyChunkInfo.getPos()));
    for (    ChunkRelevanceRegion region : regions.values()) {
      region.chunkReady(chunk);
    }
  }
  finally {
    chunk.unlock();
  }
  return true;
}
