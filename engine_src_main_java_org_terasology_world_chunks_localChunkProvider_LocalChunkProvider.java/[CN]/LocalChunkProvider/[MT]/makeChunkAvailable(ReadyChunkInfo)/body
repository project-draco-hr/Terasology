{
  ChunkImpl chunk=getChunk(readyChunkInfo.getPos());
  if (chunk == null) {
    return;
  }
  chunk.lock();
  try {
    chunk.markReady();
    boolean loaded=chunk.isInitialGenerationComplete();
    if (!loaded) {
      chunk.setInitialGenerationComplete();
      PerformanceMonitor.startActivity("Generating Block Entities");
      generateBlockEntities(chunk);
      PerformanceMonitor.endActivity();
    }
    if (readyChunkInfo.getChunkStore() != null) {
      readyChunkInfo.getChunkStore().restoreEntities();
    }
    if (!loaded) {
      PerformanceMonitor.startActivity("Sending OnAddedBlocks");
      readyChunkInfo.getBlockPositionMapppings().forEachEntry(new TShortObjectProcedure<TIntList>(){
        @Override public boolean execute(        short id,        TIntList positions){
          if (positions.size() > 0) {
            blockManager.getBlock(id).getEntity().send(new OnAddedBlocks(positions,registry));
          }
          return true;
        }
      }
);
      PerformanceMonitor.endActivity();
    }
    PerformanceMonitor.startActivity("Sending OnActivateBlocks");
    readyChunkInfo.getBlockPositionMapppings().forEachEntry(new TShortObjectProcedure<TIntList>(){
      @Override public boolean execute(      short id,      TIntList positions){
        if (positions.size() > 0) {
          blockManager.getBlock(id).getEntity().send(new OnActivatedBlocks(positions,registry));
        }
        return true;
      }
    }
);
    PerformanceMonitor.endActivity();
    for (    Side side : Side.horizontalSides()) {
      Vector3i adjChunkPos=side.getAdjacentPos(readyChunkInfo.getPos());
      ChunkImpl adjChunk=getChunk(adjChunkPos);
      if (adjChunk != null) {
        for (        BatchPropagator propagator : loadEdgePropagators) {
          propagator.propagateBetween(chunk,adjChunk,side);
        }
      }
    }
    if (!loaded) {
      worldEntity.send(new OnChunkGenerated(readyChunkInfo.getPos()));
    }
    worldEntity.send(new OnChunkLoaded(readyChunkInfo.getPos()));
    for (    ChunkRelevanceRegion region : regions.values()) {
      region.chunkReady(chunk);
    }
  }
  finally {
    chunk.unlock();
  }
}
