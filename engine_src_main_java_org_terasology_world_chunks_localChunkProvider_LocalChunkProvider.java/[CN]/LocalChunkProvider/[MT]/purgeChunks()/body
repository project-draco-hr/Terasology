{
  ChunkMonitor.fireChunkProviderDisposed(this);
  pipeline.shutdown();
  unloadRequestTaskMaster.shutdown(new ChunkUnloadRequest(),true);
  for (  ChunkImpl chunk : nearCache.values()) {
    if (chunk.getChunkState() == ChunkImpl.State.COMPLETE && chunk.isReady()) {
      worldEntity.send(new BeforeChunkUnload(chunk.getPos()));
    }
    chunk.dispose();
    ChunkStore store=storageManager.createChunkStoreForSave(chunk);
    store.storeAllEntities();
    store.save();
  }
  nearCache.clear();
  storageManager.purgeChunks();
  worldEntity.send(new PurgeWorldEvent());
  this.pipeline=new ChunkGenerationPipeline(new ChunkTaskRelevanceComparator());
  this.unloadRequestTaskMaster=TaskMaster.createFIFOTaskMaster("Chunk-Unloader",8);
  ChunkMonitor.fireChunkProviderInitialized(this);
  for (  ChunkRelevanceRegion chunkRelevanceRegion : regions.values()) {
    for (    Vector3i pos : chunkRelevanceRegion.getCurrentRegion()) {
      pipeline.doTask(new CreateOrLoadChunkTask(pipeline,pos,this));
    }
    chunkRelevanceRegion.setUpToDate();
  }
}
