{
  ChunkMonitor.fireChunkProviderDisposed(this);
  pipeline.shutdown();
  unloadRequestTaskMaster.shutdown(new ChunkUnloadRequest(),true);
  lightMerger.shutdown();
  for (  Chunk chunk : nearCache.values()) {
    if (chunk.isReady()) {
      worldEntity.send(new BeforeChunkUnload(chunk.getPosition()));
      storageManager.deactivateChunk(chunk);
      chunk.dispose();
    }
  }
  nearCache.clear();
  readyChunks.clear();
  sortedReadyChunks.clear();
  storageManager.deleteWorld();
  preparingChunks.clear();
  worldEntity.send(new PurgeWorldEvent());
  pipeline=new ChunkGenerationPipeline(new ChunkTaskRelevanceComparator());
  unloadRequestTaskMaster=TaskMaster.createFIFOTaskMaster("Chunk-Unloader",8);
  lightMerger=new LightMerger<>(this);
  lightMerger.restart();
  ChunkMonitor.fireChunkProviderInitialized(this);
  for (  ChunkRelevanceRegion chunkRelevanceRegion : regions.values()) {
    for (    Vector3i pos : chunkRelevanceRegion.getCurrentRegion()) {
      createOrLoadChunk(pos);
    }
    chunkRelevanceRegion.setUpToDate();
  }
}
