{
  PerformanceMonitor.startActivity("Unloading irrelevant chunks");
  int unloaded=0;
  logger.debug("Compacting cache");
  Iterator<Vector3i> iterator=nearCache.keySet().iterator();
  while (iterator.hasNext()) {
    Vector3i pos=iterator.next();
    boolean keep=false;
    for (    ChunkRelevanceRegion region : regions.values()) {
      if (region.getCurrentRegion().expand(UNLOAD_LEEWAY).encompasses(pos)) {
        keep=true;
        break;
      }
    }
    if (!keep) {
      ChunkImpl chunk=nearCache.get(pos);
      if (chunk.isLocked()) {
        continue;
      }
      chunk.lock();
      try {
        if (!chunk.isReady()) {
          nearCache.remove(pos);
          continue;
        }
        worldEntity.send(new BeforeChunkUnload(pos));
        for (        ChunkRelevanceRegion region : regions.values()) {
          region.chunkUnloaded(pos);
        }
        ChunkStore store=storageManager.createChunkStoreForSave(chunk);
        store.storeAllEntities();
        store.save();
        chunk.dispose();
        try {
          unloadRequestTaskMaster.put(new ChunkUnloadRequest(chunk,this));
        }
 catch (        InterruptedException e) {
          logger.error("Failed to enqueue unload request for {}",chunk.getPos(),e);
        }
        iterator.remove();
        if (++unloaded >= UNLOAD_PER_FRAME) {
          break;
        }
      }
  finally {
        chunk.unlock();
      }
    }
  }
  PerformanceMonitor.endActivity();
}
