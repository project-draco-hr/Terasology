{
  List<Vector3f> vertices=getBindPoseVertexPositions();
  List<Vector3f> normals=Lists.newArrayListWithCapacity(vertices.size());
  for (int i=0; i < vertices.size(); ++i) {
    normals.add(new Vector3f());
  }
  Vector3f v1=new Vector3f();
  Vector3f v2=new Vector3f();
  Vector3f norm=new Vector3f();
  for (int i=0; i < indices.size() / 3; ++i) {
    Vector3f baseVert=vertices.get(indices.get(i * 3));
    v1.sub(vertices.get(indices.get(i * 3 + 1)),baseVert);
    v2.sub(vertices.get(indices.get(i * 3 + 2)),baseVert);
    v1.normalize();
    v2.normalize();
    norm.cross(v1,v2);
    normals.get(indices.get(i * 3)).add(norm);
    normals.get(indices.get(i * 3 + 1)).add(norm);
    normals.get(indices.get(i * 3 + 2)).add(norm);
  }
  for (  Vector3f normal : normals) {
    normal.normalize();
  }
  Quat4f inverseRot=new Quat4f();
  for (int vertIndex=0; vertIndex < vertices.size(); ++vertIndex) {
    Vector3f normal=normals.get(vertIndex);
    for (int weightIndex=0; weightIndex < vertexWeightCounts.get(vertIndex); ++weightIndex) {
      BoneWeight weight=weights.get(weightIndex + vertexStartWeights.get(vertIndex));
      inverseRot.inverse(bones.get(weight.getBoneIndex()).getObjectRotation());
      inverseRot.rotate(normal,norm);
      weight.setNormal(norm);
    }
  }
}
