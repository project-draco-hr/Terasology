{
  int newChunkPosX=calcCamChunkOffsetX();
  int newChunkPosZ=calcCamChunkOffsetZ();
  int viewingDistance=config.getRendering().getViewDistance().getChunkDistance();
  boolean chunksCurrentlyPending=false;
  if (chunkPosX != newChunkPosX || chunkPosZ != newChunkPosZ || force || pendingChunks) {
    if (chunksInProximity.size() == 0 || force || pendingChunks) {
      chunksInProximity.clear();
      for (int x=-(viewingDistance / 2); x < viewingDistance / 2; x++) {
        for (int z=-(viewingDistance / 2); z < viewingDistance / 2; z++) {
          ChunkImpl c=chunkProvider.getChunk(newChunkPosX + x,0,newChunkPosZ + z);
          if (c != null && c.getChunkState() == ChunkImpl.State.COMPLETE && worldProvider.getLocalView(c.getPos()) != null) {
            chunksInProximity.add(c);
          }
 else {
            chunksCurrentlyPending=true;
          }
        }
      }
    }
 else {
      int vd2=viewingDistance / 2;
      Rect2i oldView=Rect2i.createFromMinAndSize(chunkPosX - vd2,chunkPosZ - vd2,viewingDistance,viewingDistance);
      Rect2i newView=Rect2i.createFromMinAndSize(newChunkPosX - vd2,newChunkPosZ - vd2,viewingDistance,viewingDistance);
      List<Rect2i> removeRects=Rect2i.difference(oldView,newView);
      for (      Rect2i r : removeRects) {
        for (int x=r.minX(); x <= r.maxX(); ++x) {
          for (int y=r.minY(); y <= r.maxY(); ++y) {
            ChunkImpl c=chunkProvider.getChunk(x,0,y);
            if (c != null) {
              chunksInProximity.remove(c);
              c.disposeMesh();
            }
          }
        }
      }
      List<Rect2i> addRects=Rect2i.difference(newView,oldView);
      for (      Rect2i r : addRects) {
        for (int x=r.minX(); x <= r.maxX(); ++x) {
          for (int y=r.minY(); y <= r.maxY(); ++y) {
            ChunkImpl c=chunkProvider.getChunk(x,0,y);
            if (c != null && c.getChunkState() == ChunkImpl.State.COMPLETE && worldProvider.getLocalView(c.getPos()) != null) {
              chunksInProximity.add(c);
            }
 else {
              chunksCurrentlyPending=true;
            }
          }
        }
      }
    }
    chunkPosX=newChunkPosX;
    chunkPosZ=newChunkPosZ;
    pendingChunks=chunksCurrentlyPending;
    Collections.sort(chunksInProximity,new ChunkFrontToBackComparator());
    return true;
  }
  return false;
}
