{
  ColumnLayout mainLayout=new ColumnLayout();
  mainLayout.setHorizontalSpacing(8);
  mainLayout.setVerticalSpacing(8);
  mainLayout.setFamily("option-grid");
  UISlider mouseSensitivity=new UISlider("mouseSensitivity");
  mouseSensitivity.setIncrement(0.025f);
  mouseSensitivity.setPrecision(3);
  mainLayout.addWidget(new UILabel("mouseLabel","heading-input","Mouse"));
  mainLayout.addWidget(new RowLayout(new UILabel("Mouse Sensitivity:"),mouseSensitivity).setColumnRatios(0.4f).setHorizontalSpacing(horizontalSpacing));
  mainLayout.addWidget(new RowLayout(new UILabel("Invert Mouse:"),new UICheckbox("mouseYAxisInverted")).setColumnRatios(0.4f).setHorizontalSpacing(horizontalSpacing));
  Map<String,InputCategory> inputCategories=Maps.newHashMap();
  Map<SimpleUri,RegisterBindButton> inputsById=Maps.newHashMap();
  DependencyResolver resolver=new DependencyResolver(moduleManager.getRegistry());
  for (  Name moduleId : moduleManager.getRegistry().getModuleIds()) {
    Module module=moduleManager.getRegistry().getLatestModuleVersion(moduleId);
    if (module.isCodeModule()) {
      ResolutionResult result=resolver.resolve(moduleId);
      if (result.isSuccess()) {
        try (ModuleEnvironment environment=moduleManager.loadEnvironment(result.getModules(),false)){
          for (          Class<?> holdingType : environment.getTypesAnnotatedWith(InputCategory.class,new FromModule(environment,moduleId))) {
            InputCategory inputCategory=holdingType.getAnnotation(InputCategory.class);
            inputCategories.put(module.getId() + ":" + inputCategory.id(),inputCategory);
          }
          for (          Class<?> bindEvent : environment.getTypesAnnotatedWith(RegisterBindButton.class,new FromModule(environment,moduleId))) {
            if (BindButtonEvent.class.isAssignableFrom(bindEvent)) {
              RegisterBindButton bindRegister=bindEvent.getAnnotation(RegisterBindButton.class);
              inputsById.put(new SimpleUri(module.getId(),bindRegister.id()),bindRegister);
            }
          }
        }
       }
    }
  }
  addInputSection(inputCategories.remove("engine:movement"),mainLayout,inputsById);
  addInputSection(inputCategories.remove("engine:interaction"),mainLayout,inputsById);
  addInputSection(inputCategories.remove("engine:inventory"),mainLayout,inputsById);
  addInputSection(inputCategories.remove("engine:general"),mainLayout,inputsById);
  for (  InputCategory category : inputCategories.values()) {
    addInputSection(category,mainLayout,inputsById);
  }
  mainLayout.addWidget(new UISpace(new Vector2i(1,16)));
  ScrollableArea area=new ScrollableArea();
  area.setContent(mainLayout);
  ColumnLayout footerGrid=new ColumnLayout("footer");
  footerGrid.setFamily("menu-options");
  footerGrid.setColumns(2);
  footerGrid.addWidget(new UIButton("reset","Restore Defaults"));
  footerGrid.addWidget(new UIButton("close","Back"));
  footerGrid.setHorizontalSpacing(8);
  RelativeLayout layout=new RelativeLayout();
  layout.addWidget(new UIImage("title",Assets.getTexture("engine:terasology").get()),HorizontalHint.create().fixedWidth(512).center(),VerticalHint.create().fixedHeight(128).alignTop(48));
  layout.addWidget(new UILabel("subtitle","title","Input Settings"),HorizontalHint.create().center(),VerticalHint.create().fixedHeight(48).alignTopRelativeTo("title",VerticalAlign.BOTTOM));
  layout.addWidget(area,HorizontalHint.create().fixedWidth(640).center(),VerticalHint.create().alignTopRelativeTo("subtitle",VerticalAlign.BOTTOM).alignBottomRelativeTo("footer",VerticalAlign.TOP,48));
  layout.addWidget(footerGrid,HorizontalHint.create().center().fixedWidth(400),VerticalHint.create().fixedHeight(48).alignBottom(48));
  setContents(layout);
}
