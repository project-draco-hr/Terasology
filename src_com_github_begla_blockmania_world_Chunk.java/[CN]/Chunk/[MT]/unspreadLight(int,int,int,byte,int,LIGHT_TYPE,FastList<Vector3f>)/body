{
  if (x < 0 || z < 0 || y < 0) {
    return;
  }
  int blockPosX=getBlockWorldPosX(x);
  int blockPosY=getBlockWorldPosY(y);
  int blockPosZ=getBlockWorldPosZ(z);
  byte val1=getParent().getLight(blockPosX + 1,blockPosY,blockPosZ,type);
  byte type1=getParent().getBlock(blockPosX + 1,blockPosY,blockPosZ);
  byte val2=getParent().getLight(blockPosX - 1,blockPosY,blockPosZ,type);
  byte type2=getParent().getBlock(blockPosX - 1,blockPosY,blockPosZ);
  byte val3=getParent().getLight(blockPosX,blockPosY,blockPosZ + 1,type);
  byte type3=getParent().getBlock(blockPosX,blockPosY,blockPosZ + 1);
  byte val4=getParent().getLight(blockPosX,blockPosY,blockPosZ - 1,type);
  byte type4=getParent().getBlock(blockPosX,blockPosY,blockPosZ - 1);
  byte val5=getParent().getLight(blockPosX,blockPosY + 1,blockPosZ,type);
  byte type5=getParent().getBlock(blockPosX,blockPosY + 1,blockPosZ);
  byte val6=getParent().getLight(blockPosX,blockPosY - 1,blockPosZ,type);
  byte type6=getParent().getBlock(blockPosX,blockPosY - 1,blockPosZ);
  getParent().setLight(blockPosX,blockPosY,blockPosZ,(byte)0x0,type);
  if (val1 < lightValue && val1 > 0 && Block.getBlockForType(type1).isBlockTypeTranslucent()) {
    getParent().unspreadLight(blockPosX + 1,blockPosY,blockPosZ,(byte)(lightValue - 1),depth + 1,type,brightSpots);
  }
 else   if (val1 >= lightValue) {
    brightSpots.add(new Vector3f(blockPosX + 1,blockPosY,blockPosZ));
  }
  if (val2 < lightValue && val2 > 0 && Block.getBlockForType(type2).isBlockTypeTranslucent()) {
    getParent().unspreadLight(blockPosX - 1,blockPosY,blockPosZ,(byte)(lightValue - 1),depth + 1,type,brightSpots);
  }
 else   if (val2 >= lightValue) {
    brightSpots.add(new Vector3f(blockPosX - 1,blockPosY,blockPosZ));
  }
  if (val3 < lightValue && val3 > 0 && Block.getBlockForType(type3).isBlockTypeTranslucent()) {
    getParent().unspreadLight(blockPosX,blockPosY,blockPosZ + 1,(byte)(lightValue - 1),depth + 1,type,brightSpots);
  }
 else   if (val3 >= lightValue) {
    brightSpots.add(new Vector3f(blockPosX,blockPosY,blockPosZ + 1));
  }
  if (val4 < lightValue && val4 > 0 && Block.getBlockForType(type4).isBlockTypeTranslucent()) {
    getParent().unspreadLight(blockPosX,blockPosY,blockPosZ - 1,(byte)(lightValue - 1),depth + 1,type,brightSpots);
  }
 else   if (val4 >= lightValue) {
    brightSpots.add(new Vector3f(blockPosX + 1,blockPosY,blockPosZ - 1));
  }
  if (val5 < lightValue && val5 > 0 && Block.getBlockForType(type5).isBlockTypeTranslucent()) {
    getParent().unspreadLight(blockPosX,blockPosY + 1,blockPosZ,(byte)(lightValue - 1),depth + 1,type,brightSpots);
  }
 else   if (val5 >= lightValue) {
    brightSpots.add(new Vector3f(blockPosX,blockPosY + 1,blockPosZ));
  }
  if (val6 < lightValue && val6 > 0 && Block.getBlockForType(type6).isBlockTypeTranslucent()) {
    getParent().unspreadLight(blockPosX,blockPosY - 1,blockPosZ,(byte)(lightValue - 1),depth + 1,type,brightSpots);
  }
 else   if (val6 >= lightValue) {
    brightSpots.add(new Vector3f(blockPosX,blockPosY - 1,blockPosZ));
  }
}
