{
  if (_fresh) {
    return false;
  }
  ByteBuffer output=BufferUtils.createByteBuffer((int)Configuration.CHUNK_DIMENSIONS.x * (int)Configuration.CHUNK_DIMENSIONS.y * (int)Configuration.CHUNK_DIMENSIONS.z* 3 + 1);
  File f=new File(String.format("%s/%d.bc",_parent.getWorldSavePath(),BlockMath.cantorize((int)_position.x,(int)_position.z)));
  byte flags=0x0;
  if (_lightDirty) {
    flags=Helper.getInstance().setFlag(flags,(short)0);
  }
  output.put(flags);
  for (int x=0; x < Configuration.CHUNK_DIMENSIONS.x; x++) {
    for (int y=0; y < Configuration.CHUNK_DIMENSIONS.y; y++) {
      for (int z=0; z < Configuration.CHUNK_DIMENSIONS.z; z++) {
        output.put(_blocks[x][y][z]);
        output.put(_sunlight[x][y][z]);
        output.put(_light[x][y][z]);
      }
    }
  }
  output.rewind();
  try {
    FileOutputStream oS=new FileOutputStream(f);
    FileChannel c=oS.getChannel();
    c.write(output);
    Helper.LOGGER.log(Level.FINE,"Wrote chunk {0} to disk.",this);
    oS.close();
  }
 catch (  FileNotFoundException ex) {
    Helper.LOGGER.log(Level.SEVERE,null,ex);
    return false;
  }
catch (  IOException ex) {
    Helper.LOGGER.log(Level.SEVERE,null,ex);
    return false;
  }
  return true;
}
