{
  ByteBuffer input=BufferUtils.createByteBuffer((int)Configuration.CHUNK_DIMENSIONS.x * (int)Configuration.CHUNK_DIMENSIONS.y * (int)Configuration.CHUNK_DIMENSIONS.z* 3 + 1);
  File f=new File(String.format("%s/%d.bc",_parent.getWorldSavePath(),BlockMath.cantorize((int)_position.x,(int)_position.z)));
  if (!f.exists()) {
    return false;
  }
  try {
    FileInputStream iS=new FileInputStream(f);
    FileChannel c=iS.getChannel();
    c.read(input);
    Helper.LOGGER.log(Level.FINE,"Loaded chunk {0} from disk.",this);
    iS.close();
  }
 catch (  FileNotFoundException ex) {
    Helper.LOGGER.log(Level.SEVERE,null,ex);
    return false;
  }
catch (  IOException ex) {
    Helper.LOGGER.log(Level.SEVERE,null,ex);
    return false;
  }
  input.rewind();
  byte flags=input.get();
  _lightDirty=Helper.getInstance().isFlagSet(flags,(short)0);
  for (int x=0; x < Configuration.CHUNK_DIMENSIONS.x; x++) {
    for (int y=0; y < Configuration.CHUNK_DIMENSIONS.y; y++) {
      for (int z=0; z < Configuration.CHUNK_DIMENSIONS.z; z++) {
        _blocks[x][y][z]=input.get();
        _sunlight[x][y][z]=input.get();
        _light[x][y][z]=input.get();
      }
    }
  }
  return true;
}
