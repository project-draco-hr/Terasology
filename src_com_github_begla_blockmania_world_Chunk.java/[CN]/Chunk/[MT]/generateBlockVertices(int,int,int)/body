{
  byte block=_blocks[x][y][z];
  if (Block.getBlockForType(block).isBlockInvisible() || Block.getBlockForType(block).isBlockBillboard()) {
    return;
  }
  float offsetX=_position.x * Configuration.CHUNK_DIMENSIONS.x;
  float offsetY=_position.y * Configuration.CHUNK_DIMENSIONS.y;
  float offsetZ=_position.z * Configuration.CHUNK_DIMENSIONS.z;
  boolean drawFront, drawBack, drawLeft, drawRight, drawTop, drawBottom;
  byte blockToCheck=_parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y + 1),getBlockWorldPosZ(z));
  drawTop=isSideVisibleForBlockTypes(blockToCheck,block);
  if (y == Configuration.CHUNK_DIMENSIONS.y - 1) {
    drawTop=true;
  }
  FastList<Float> quads=new FastList<Float>();
  FastList<Float> tex=new FastList<Float>();
  FastList<Float> color=new FastList<Float>();
  if (drawTop) {
    Vector4f colorOffset=Block.getBlockForType(block).getColorOffsetFor(Block.SIDE.TOP);
    float shadowIntens=Math.max(_parent.getRenderingLightValue(getBlockWorldPosX(x),getBlockWorldPosY(y + 1),getBlockWorldPosZ(z)) * simpleOcclusionAmount(x,y,z,0,1,0),0);
    float texOffsetX=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.TOP).x;
    float texOffsetY=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.TOP).y;
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY);
    quads.add(-0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY);
    quads.add(0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY + 0.0624f);
    quads.add(0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY + 0.0624f);
    quads.add(-0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
  }
  blockToCheck=_parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z - 1));
  drawFront=isSideVisibleForBlockTypes(blockToCheck,block);
  if (drawFront) {
    Vector4f colorOffset=Block.getBlockForType(block).getColorOffsetFor(Block.SIDE.FRONT);
    float shadowIntens=Math.max(_parent.getRenderingLightValue(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z - 1)) * simpleOcclusionAmount(x,y,z,0,0,-1),0);
    float texOffsetX=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.FRONT).x;
    float texOffsetY=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.FRONT).y;
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY);
    quads.add(-0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY);
    quads.add(0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY + 0.0624f);
    quads.add(0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY + 0.0624f);
    quads.add(-0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
  }
  blockToCheck=_parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z + 1));
  drawBack=isSideVisibleForBlockTypes(blockToCheck,block);
  if (drawBack) {
    Vector4f colorOffset=Block.getBlockForType(block).getColorOffsetFor(Block.SIDE.BACK);
    float shadowIntens=Math.max(_parent.getRenderingLightValue(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z + 1)) * simpleOcclusionAmount(x,y,z,0,0,1),0);
    float texOffsetX=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.BACK).x;
    float texOffsetY=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.BACK).y;
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY + 0.0624f);
    quads.add(-0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY + 0.0624f);
    quads.add(0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY);
    quads.add(0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY);
    quads.add(-0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
  }
  blockToCheck=_parent.getBlock(getBlockWorldPosX(x - 1),getBlockWorldPosY(y),getBlockWorldPosZ(z));
  drawLeft=isSideVisibleForBlockTypes(blockToCheck,block);
  if (drawLeft) {
    Vector4f colorOffset=Block.getBlockForType(block).getColorOffsetFor(Block.SIDE.LEFT);
    float shadowIntens=Math.max(_parent.getRenderingLightValue(getBlockWorldPosX(x - 1),getBlockWorldPosY(y),getBlockWorldPosZ(z)) * Configuration.BLOCK_SIDE_DIMMING,0);
    float texOffsetX=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.LEFT).x;
    float texOffsetY=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.LEFT).y;
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY + 0.0624f);
    quads.add(-0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY + 0.0624f);
    quads.add(-0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY);
    quads.add(-0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY);
    quads.add(-0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
  }
  blockToCheck=_parent.getBlock(getBlockWorldPosX(x + 1),getBlockWorldPosY(y),getBlockWorldPosZ(z));
  drawRight=isSideVisibleForBlockTypes(blockToCheck,block);
  if (drawRight) {
    Vector4f colorOffset=Block.getBlockForType(block).getColorOffsetFor(Block.SIDE.RIGHT);
    float shadowIntens=Math.max(_parent.getRenderingLightValue(getBlockWorldPosX(x + 1),getBlockWorldPosY(y),getBlockWorldPosZ(z)) * Configuration.BLOCK_SIDE_DIMMING,0);
    float texOffsetX=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.RIGHT).x;
    float texOffsetY=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.RIGHT).y;
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY);
    quads.add(0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY);
    quads.add(0.5f + x + offsetX);
    quads.add(0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY + 0.0624f);
    quads.add(0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY + 0.0624f);
    quads.add(0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
  }
  blockToCheck=_parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y - 1),getBlockWorldPosZ(z));
  drawBottom=isSideVisibleForBlockTypes(blockToCheck,block);
  if (drawBottom) {
    Vector4f colorOffset=Block.getBlockForType(block).getColorOffsetFor(Block.SIDE.BOTTOM);
    float shadowIntens=Math.max(_parent.getRenderingLightValue(getBlockWorldPosX(x),getBlockWorldPosY(y - 1),getBlockWorldPosZ(z)),0);
    float texOffsetX=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.BOTTOM).x;
    float texOffsetY=Block.getBlockForType(block).getTextureOffsetFor(Block.SIDE.BOTTOM).y;
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY);
    quads.add(-0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY);
    quads.add(0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(-0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX + 0.0624f);
    tex.add(texOffsetY + 0.0624f);
    quads.add(0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
    color.add(colorOffset.x * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.y * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.z * shadowIntens * Configuration.BRIGHTNESS_FACTOR);
    color.add(colorOffset.w);
    tex.add(texOffsetX);
    tex.add(texOffsetY + 0.0624f);
    quads.add(-0.5f + x + offsetX);
    quads.add(-0.5f + y + offsetY);
    quads.add(0.5f + z + offsetZ);
  }
  if (!Block.getBlockForType(block).isBlockTypeTranslucent()) {
    _quadsOpaque.addAll(quads);
    _texOpaque.addAll(tex);
    _colorOpaque.addAll(color);
  }
 else {
    _quadsTranslucent.addAll(quads);
    _texTranslucent.addAll(tex);
    _colorTranslucent.addAll(color);
  }
}
