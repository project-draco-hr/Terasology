{
  float[][] distArr=initDist(fromWhat);
  float currentDistance=0;
  logger.info("Starting distance calculation: {}",fromWhat);
  while (currentDistance < size) {
    for (int width=0; width < size; width++) {
      for (int height=0; height < size; height++) {
        float currHeight=heightmap[width][height];
        if (distArr[width][height] == size) {
          int posW=(width + 1) % size;
          int posH=(height + 1) % size;
          int negW=((width - 1) + size) % size;
          int negH=(height - 1 + size) % size;
          if (distArr[posW][height] + (heightmap[posW][height] - currHeight) * heightInfluence <= currentDistance || distArr[width][posH] + (heightmap[width][posH] - currHeight) * heightInfluence <= currentDistance || distArr[negW][height] + (heightmap[negW][height] - currHeight) * heightInfluence <= currentDistance || distArr[width][negH] + (heightmap[width][negH] - currHeight) * heightInfluence <= currentDistance) {
            distArr[width][height]=currentDistance + 1;
          }
 else           if (distArr[posW][posH] + (heightmap[posW][posH] - currHeight) * heightInfluence <= currentDistance + 0.41421 || distArr[negW][posH] + (heightmap[negW][posH] - currHeight) * heightInfluence <= currentDistance + 0.41421 || distArr[posW][negH] + (heightmap[posW][negH] - currHeight) * heightInfluence <= currentDistance + 0.41421 || distArr[negW][negH] + (heightmap[negW][negH] - currHeight) * heightInfluence <= currentDistance + 0.41421) {
            distArr[width][height]=currentDistance + 1.41421f;
          }
        }
      }
    }
    currentDistance++;
  }
  float max=0;
  for (int width=0; width < size; width++) {
    for (int height=0; height < size; height++) {
      max=distArr[width][height] > max ? distArr[width][height] : max;
    }
  }
  for (int width=0; width < size; width++) {
    for (int height=0; height < size; height++) {
      distArr[width][height]/=max;
    }
  }
  if (fromWhat.equals("equator")) {
    for (int width=0; width < size; width++) {
      for (int height=0; height < size; height++) {
        distArr[width][height]=1 - distArr[width][height];
      }
    }
  }
  return distArr;
}
