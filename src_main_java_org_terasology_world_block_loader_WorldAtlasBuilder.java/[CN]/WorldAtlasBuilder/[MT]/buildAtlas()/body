{
  int numMipMaps=getNumMipmaps();
  ByteBuffer[] data=new ByteBuffer[numMipMaps];
  for (int i=0; i < numMipMaps; ++i) {
    BufferedImage image=generateAtlas(i);
    if (i == 0) {
      try {
        ImageIO.write(image,"png",new File(PathManager.getInstance().getScreenshotPath(),"tiles.png"));
      }
 catch (      IOException e) {
        logger.warn("Failed to write atlas");
      }
    }
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    try {
      ImageIO.write(image,"png",bos);
      PNGDecoder decoder=new PNGDecoder(new ByteArrayInputStream(bos.toByteArray()));
      ByteBuffer buf=ByteBuffer.allocateDirect(4 * decoder.getWidth() * decoder.getHeight());
      decoder.decode(buf,decoder.getWidth() * 4,PNGDecoder.RGBA);
      buf.flip();
      data[i]=buf;
    }
 catch (    IOException e) {
      logger.error("Failed to create atlas texture");
    }
  }
  Texture terrainTex=new Texture(data,atlasSize,atlasSize,Texture.WrapMode.Clamp,Texture.FilterMode.Nearest);
  AssetManager.getInstance().addAssetTemporary(new AssetUri(AssetType.TEXTURE,"engine:terrain"),terrainTex);
  Material terrainMat=new Material(new AssetUri(AssetType.MATERIAL,"engine:terrain"),Assets.getShader("engine:block"));
  terrainMat.setTexture("textureAtlas",terrainTex);
  terrainMat.setFloat3("colorOffset",1,1,1);
  terrainMat.setInt("textured",1);
  AssetManager.getInstance().addAssetTemporary(new AssetUri(AssetType.MATERIAL,"engine:terrain"),terrainMat);
}
