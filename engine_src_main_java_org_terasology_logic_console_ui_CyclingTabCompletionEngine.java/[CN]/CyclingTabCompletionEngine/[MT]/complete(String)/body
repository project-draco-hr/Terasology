{
  if (rawCommand.length() <= 0) {
    reset();
    previousMessage=new Message("Type 'help' to list all commands.");
    console.addMessage(previousMessage);
    return null;
  }
 else   if (query == null) {
    query=rawCommand;
  }
  String commandName=console.processCommandName(query);
  List<String> commandParameters=console.processParameters(query);
  ICommand command=console.getCommand(commandName);
  int suggestedIndex=commandParameters.size() + (query.charAt(query.length() - 1) == ' ' ? 1 : 0);
  String[] matches=findMatches(commandName,commandParameters,command,suggestedIndex);
  if (matches == null || matches.length <= 0) {
    return query;
  }
  if (!Arrays.equals(matches,previousMatches)) {
    reset(false);
    if (matches.length == 1) {
      return generateResult(matches[0],commandName,commandParameters,suggestedIndex);
    }
    previousMatches=matches;
  }
  StringBuilder matchMessageString=new StringBuilder();
  for (int i=0; i < previousMatches.length; i++) {
    if (i > 0) {
      matchMessageString.append(' ');
    }
    String name=previousMatches[i];
    if (selectionIndex == i) {
      name=FontColor.getColored(name,ConsoleColors.COMMAND);
    }
    matchMessageString.append(name);
  }
  Message matchMessage=new Message(matchMessageString.toString());
  String suggestion=previousMatches[selectionIndex];
  if (previousMessage != null) {
    console.replaceMessage(previousMessage,matchMessage);
  }
 else {
    console.addMessage(matchMessage);
  }
  previousMessage=matchMessage;
  selectionIndex=(selectionIndex + 1) % previousMatches.length;
  return generateResult(suggestion,commandName,commandParameters,suggestedIndex);
}
