{
  FastRandom rand=new FastRandom(seed);
  on=true;
  _noisePermutations=new int[512];
  int[] _noiseTable=new int[256];
  for (int i=0; i < 256; i++)   if (random)   _noiseTable[i]=(int)(rand.randomDouble() % 256);
 else   _noiseTable[i]=i;
  for (int i=0; i < 256; i++) {
    int j=0;
switch (type) {
case 1:
      j=(int)TeraMath.fastFloor(Math.sin(rand.randomDouble()) * 255);
    j=(j < 0) ? -j : j;
  break;
case 2:
j=(int)TeraMath.fastFloor(Math.cos(rand.randomDouble()) * 255);
j=(j < 0) ? -j : j;
break;
case 3:
j=(int)(TeraMath.fastFloor(Math.tan(rand.randomDouble() % 6) * 100) % 256);
j=(j < 0) ? -j : j;
break;
case 4:
j=(int)(TeraMath.fastFloor((Math.sinh(rand.randomDouble() % 3) / Math.sinh(3)) * 256));
j=(j < 0) ? -j : j;
break;
case 5:
j=(int)TeraMath.fastFloor((Math.tanh(rand.randomDouble() % 3) / Math.tanh(3)) * 256);
j=(j < 0) ? -j : j;
break;
case 6:
j=(int)(TeraMath.fastFloor((Math.log(rand.randomDouble() % 4) / 4) * 256)) % 256;
j=(j < 0) ? -j : j;
break;
case 7:
j=(int)(TeraMath.fastFloor((Math.acos(rand.randomDouble() % 5) / 4) * 256)) % 256;
j=(j < 0) ? -j : j;
break;
case -2:
on=false;
break;
case -1:
break;
case 0:
default :
j=rand.randomInt() % 256;
j=(j < 0) ? -j : j;
break;
}
if (j > 255 || j < 0) {
System.out.print("Error in noise generator type:" + type + "\n");
System.out.print("values out of range 255:" + j + "\n");
j=255;
}
if (type != -1) {
int swap=_noiseTable[i];
_noiseTable[i]=_noiseTable[j];
_noiseTable[j]=swap;
}
}
for (int i=0; i < 256; i++) _noisePermutations[i]=_noisePermutations[i + 256]=_noiseTable[i];
}
