{
  Vector3i finalDir=null;
  Vector3f[] sides={new Vector3f(worldPos),new Vector3f(worldPos),new Vector3f(worldPos),new Vector3f(worldPos),new Vector3f(worldPos)};
  float factor=1.0f;
  sides[0].x+=factor * movementComp.radius;
  sides[1].x-=factor * movementComp.radius;
  sides[2].z+=factor * movementComp.radius;
  sides[3].z-=factor * movementComp.radius;
  sides[4].y-=movementComp.height;
  float distance=100f;
  for (  Vector3f side : sides) {
    Block block=worldProvider.getBlock(side);
    if (block.isClimbable()) {
      Vector3i myPos=new Vector3i(worldPos,RoundingMode.HALF_UP);
      Vector3i climbBlockPos=new Vector3i(side,RoundingMode.HALF_UP);
      Vector3i dir=new Vector3i(block.getDirection().getVector3i());
      float currentDistance=10f;
      if (dir.x != 0 && Math.abs(worldPos.x - climbBlockPos.x + dir.x * .5f) < movementComp.radius + 0.1f) {
        if (myPos.x < climbBlockPos.x) {
          dir.x=-dir.x;
        }
        currentDistance=Math.abs(climbBlockPos.z - worldPos.z);
      }
 else       if (dir.z != 0 && Math.abs(worldPos.z - climbBlockPos.z + dir.z * .5f) < movementComp.radius + 0.1f) {
        if (myPos.z < climbBlockPos.z) {
          dir.z=-dir.z;
        }
        currentDistance=Math.abs(climbBlockPos.z - worldPos.z);
      }
      if (currentDistance < distance) {
        distance=currentDistance;
        finalDir=dir;
      }
    }
  }
  return finalDir;
}
