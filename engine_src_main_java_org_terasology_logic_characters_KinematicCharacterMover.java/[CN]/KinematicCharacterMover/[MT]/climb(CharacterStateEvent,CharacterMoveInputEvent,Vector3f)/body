{
  if (state.getClimbDirection() == null) {
    return;
  }
  Vector3f tmp;
  Vector3i climbDir3i=state.getClimbDirection();
  Vector3f climbDir3f=climbDir3i.toVector3f();
  Quat4f rotation=new Quat4f(TeraMath.DEG_TO_RAD * state.getYaw(),0,0);
  tmp=new Vector3f(0.0f,0.0f,-1.0f);
  rotation.rotate(tmp,tmp);
  float angleToClimbDirection=tmp.angle(climbDir3f);
  boolean clearMovementToDirection=!state.isGrounded();
  boolean jumpOrCrouchActive=desiredVelocity.y != 0;
  if (angleToClimbDirection < Math.PI / 4.0 || Math.abs(input.getPitch()) > 60f) {
    if (jumpOrCrouchActive) {
      desiredVelocity.x=0;
      desiredVelocity.z=0;
      clearMovementToDirection=false;
    }
 else {
      float pitchAmount=state.isGrounded() ? 45f : 90f;
      float pitch=input.getPitch() > 30f ? pitchAmount : -pitchAmount;
      rotation=new Quat4f(TeraMath.DEG_TO_RAD * state.getYaw(),TeraMath.DEG_TO_RAD * pitch,0);
      rotation.rotate(desiredVelocity,desiredVelocity);
    }
  }
 else   if (angleToClimbDirection < Math.PI * 3.0 / 4.0) {
    float rollAmount=state.isGrounded() ? 45f : 90f;
    tmp=new Vector3f();
    rotation.rotate(climbDir3f,tmp);
    float leftOrRight=tmp.x;
    float plusOrMinus=(leftOrRight < 0f ? -1.0f : 1.0f) * (climbDir3i.x != 0 ? -1.0f : 1.0f);
    if (jumpOrCrouchActive) {
      rotation=new Quat4f(TeraMath.DEG_TO_RAD * state.getYaw(),0,0);
    }
 else {
      rotation=new Quat4f(TeraMath.DEG_TO_RAD * input.getYaw(),0f,TeraMath.DEG_TO_RAD * rollAmount * plusOrMinus);
    }
    rotation.rotate(desiredVelocity,desiredVelocity);
  }
 else {
    rotation=new Quat4f(TeraMath.DEG_TO_RAD * state.getYaw(),0,0);
    rotation.rotate(desiredVelocity,desiredVelocity);
    clearMovementToDirection=false;
  }
  if (clearMovementToDirection) {
    if (climbDir3i.x != 0) {
      desiredVelocity.x=0f;
    }
    if (climbDir3i.z != 0) {
      desiredVelocity.z=0f;
    }
  }
}
