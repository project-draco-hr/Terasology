{
  ShaderManager.getInstance().enableShader("chunk");
  GL13.glActiveTexture(GL13.GL_TEXTURE1);
  TextureManager.getInstance().bindTexture("custom_lava_still");
  GL13.glActiveTexture(GL13.GL_TEXTURE2);
  TextureManager.getInstance().bindTexture("custom_water_still");
  GL13.glActiveTexture(GL13.GL_TEXTURE3);
  TextureManager.getInstance().bindTexture("effects");
  GL13.glActiveTexture(GL13.GL_TEXTURE0);
  TextureManager.getInstance().bindTexture("terrain");
  int daylight=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"daylight");
  int swimming=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"swimming");
  int carryingTorch=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"carryingTorch");
  int wavingCoordinates=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"wavingCoordinates");
  GL20.glUniform1(wavingCoordinates,BlockManager.getInstance().calcCoordinatesForWavingBlocks());
  int lavaCoordinate=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"lavaCoordinate");
  GL20.glUniform2(lavaCoordinate,BlockManager.getInstance().calcCoordinate("Lava"));
  int waterCoordinate=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"waterCoordinate");
  GL20.glUniform2(waterCoordinate,BlockManager.getInstance().calcCoordinate("Water"));
  int grassCoordinate=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"grassCoordinate");
  GL20.glUniform2(grassCoordinate,BlockManager.getInstance().calcCoordinate("Grass"));
  int lavaTexture=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"textureLava");
  int waterTexture=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"textureWater");
  int textureAtlas=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"textureAtlas");
  int textureEffects=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"textureEffects");
  GL20.glUniform1i(lavaTexture,1);
  GL20.glUniform1i(waterTexture,2);
  GL20.glUniform1i(textureEffects,3);
  GL20.glUniform1i(textureAtlas,0);
  int tick=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"tick");
  boolean playerIsSwimming=_player.isHeadUnderWater();
  GL20.glUniform1f(tick,_tick);
  GL20.glUniform1f(daylight,(float)getDaylight());
  GL20.glUniform1i(swimming,playerIsSwimming ? 1 : 0);
  GL20.glUniform1i(carryingTorch,_player.isCarryingTorch() ? 1 : 0);
  ShaderManager.getInstance().enableShader(null);
  PerformanceMonitor.startActivity("BulletPhysicsRenderer");
  BulletPhysicsRenderer.getInstance().render();
  PerformanceMonitor.endActivity();
  ShaderManager.getInstance().enableShader("chunk");
  PerformanceMonitor.startActivity("Chunk-Opaque");
  for (int i=0; i < _visibleChunks.size(); i++) {
    Chunk c=_visibleChunks.get(i);
    c.render(ChunkMesh.RENDER_TYPE.OPAQUE);
  }
  PerformanceMonitor.endActivity();
  PerformanceMonitor.startActivity("Chunk-Billboard");
  glEnable(GL_BLEND);
  glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
  for (int i=0; i < _visibleChunks.size(); i++) {
    Chunk c=_visibleChunks.get(i);
    c.render(ChunkMesh.RENDER_TYPE.BILLBOARD_AND_TRANSLUCENT);
  }
  ShaderManager.getInstance().enableShader(null);
  PerformanceMonitor.endActivity();
  PerformanceMonitor.startActivity("Render Mobs");
  _mobManager.renderAll();
  PerformanceMonitor.endActivity();
  PerformanceMonitor.startActivity("Chunk-WaterIce");
  TextureManager.getInstance().bindTexture("terrain");
  ShaderManager.getInstance().enableShader("chunk");
  if (playerIsSwimming) {
    glDisable(GL11.GL_CULL_FACE);
  }
  for (int j=0; j < 2; j++) {
    if (j == 0) {
      glColorMask(false,false,false,false);
    }
 else {
      glColorMask(true,true,true,true);
    }
    for (int i=0; i < _visibleChunks.size(); i++) {
      Chunk c=_visibleChunks.get(i);
      c.render(ChunkMesh.RENDER_TYPE.WATER_AND_ICE);
    }
  }
  glDisable(GL_BLEND);
  glEnable(GL11.GL_CULL_FACE);
  ShaderManager.getInstance().enableShader(null);
  PerformanceMonitor.endActivity();
}
