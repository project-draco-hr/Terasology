"\nName: 'TerasologyBlockShapeExport'\nBlender: 262\nGroup: 'Export'\nTooltip: 'Export a Terasology Block Shape'\n"
bl_info = {'name': 'Terasology Block Shape Export', 'description': 'Exporter for producing Terasology Block Shape files (in JSON format)', 'author': 'Immortius', 'version': (1, 2), 'blender': (2, 6, 0), 'location': 'File > Import-Export', 'category': 'Import-Export', }
import bpy
import os
import bpy_extras.io_utils
from bpy.props import StringProperty, BoolProperty
bpy.types.Scene.teraAuthor = StringProperty(name='Author', description='Is this side of the block complete', default='')
bpy.types.Scene.teraCollisionType = bpy.props.EnumProperty(name='Collision Type', description='Type of collision to use for this block', items=[('FullCube', 'Full Cube', 'The entire block is solid'), ('AutoAABB', 'Auto AABB', 'An AABB is calculated that encompasses the block mesh'), ('ConvexHull', 'Auto Convex Hull', 'A convex hull is calculated that encompasses the block mesh'), ('Manual', 'Manual', 'One or more colliders are specified to describe the collision')])
bpy.types.Scene.teraCollisionSymmetric = BoolProperty(name='Is Collision Symmetric', description='Whether the collision is symmetric for all rotations of the block', default=False)
bpy.types.Scene.teraBillboardNormals = BoolProperty(name='Use Billboard Normals', description='Are normals set up for billboards (pointing up)', default=False)
bpy.types.Object.teraFullSide = BoolProperty(name='Full Side', description='Is this side of the block complete', default=False)
bpy.types.Object.teraColliderType = bpy.props.EnumProperty(name='Collider Type', description='Type of collider this mesh provides', items=[('None', 'None', 'This mesh is not a collider'), ('AABB', 'AABB', 'This mesh provides a aabb collider'), ('Sphere', 'Sphere', 'This mesh provides a sphere collider')], default='None')
if (__name__ == '__main__'):
    register()
