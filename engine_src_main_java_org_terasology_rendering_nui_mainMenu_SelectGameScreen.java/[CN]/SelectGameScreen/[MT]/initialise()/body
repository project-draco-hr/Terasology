{
  final UIList<GameInfo> gameList=find("gameList",UIList.class);
  refreshList(gameList);
  gameList.subscribe(new ListEventListener<GameInfo>(){
    @Override public void onItemActivated(    GameInfo item){
      loadGame(item);
    }
  }
);
  UIScreenLayerUtil.trySubscribe(this,"create",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      CreateGameScreen createGameScreen=(CreateGameScreen)nuiManager.pushScreen("engine:createGameScreen");
      createGameScreen.setLoadingAsServer(loadingAsServer);
    }
  }
);
  UIScreenLayerUtil.trySubscribe(this,"load",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      GameInfo gameInfo=gameList.getSelection();
      if (gameInfo != null) {
        loadGame(gameInfo);
      }
    }
  }
);
  UIScreenLayerUtil.trySubscribe(this,"delete",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      GameInfo gameInfo=gameList.getSelection();
      if (gameInfo != null) {
        Path world=PathManager.getInstance().getSavePath(gameInfo.getManifest().getTitle());
        try {
          FilesUtil.recursiveDelete(world);
          gameList.getList().remove(gameInfo);
          gameList.setSelection(null);
        }
 catch (        Exception e) {
          logger.error("Failed to delete saved game",e);
          nuiManager.pushScreen("engine:errorMessagePopup",ErrorMessagePopup.class).setError("Error Deleting Game",e.getMessage());
        }
      }
    }
  }
);
  UIScreenLayerUtil.trySubscribe(this,"close",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      nuiManager.popScreen();
    }
  }
);
}
