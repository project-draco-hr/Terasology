{
  try {
    componentClass.getConstructor();
  }
 catch (  NoSuchMethodException e) {
    logger.log(Level.SEVERE,String.format("Unable to register component class %s: Default Constructor Required",componentClass.getSimpleName()));
    return;
  }
  ComponentMetadata<T> info=new ComponentMetadata<T>(componentClass);
  for (  Field field : componentClass.getDeclaredFields()) {
    if (Modifier.isTransient(field.getModifiers()))     continue;
    field.setAccessible(true);
    TypeHandler typeHandler=getHandlerFor(field.getGenericType(),0);
    if (typeHandler == null) {
      logger.log(Level.SEVERE,"Unsupported field type in component type " + componentClass.getSimpleName() + ", "+ field.getName()+ " : "+ field.getGenericType());
    }
 else {
      info.addField(new FieldMetadata(field,componentClass,typeHandler));
    }
  }
  componentSerializationLookup.put(componentClass,info);
  componentTypeLookup.put(PersistenceUtil.getComponentClassName(componentClass).toLowerCase(Locale.ENGLISH),componentClass);
}
