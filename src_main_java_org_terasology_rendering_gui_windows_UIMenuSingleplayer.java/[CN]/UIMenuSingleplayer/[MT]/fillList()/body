{
  list.removeAll();
  File worldCatalog=PathManager.getInstance().getWorldPath();
  File[] listFiles=worldCatalog.listFiles(new FileFilter(){
    public boolean accept(    File file){
      if (file.isDirectory()) {
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  Arrays.sort(listFiles,new Comparator(){
    public int compare(    Object o1,    Object o2){
      if (((File)o1).isDirectory() && ((File)o2).isDirectory()) {
        File f1=new File(((File)o1).getAbsolutePath(),"entity.dat");
        File f2=new File(((File)o2).getAbsolutePath(),"entity.dat");
        if (f1.lastModified() > f2.lastModified()) {
          return -1;
        }
 else         if (f1.lastModified() < f2.lastModified()) {
          return +1;
        }
      }
      return 0;
    }
  }
);
  DateFormat date=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
  for (  File file : listFiles) {
    File worldManifest=new File(file,WorldInfo.DEFAULT_FILE_NAME);
    if (!worldManifest.exists())     continue;
    try {
      WorldInfo info=WorldInfo.load(worldManifest);
      if (!info.getTitle().isEmpty()) {
        UIListItem item=new UIListItem(info.getTitle() + "\n" + date.format(new java.util.Date(new File(file.getAbsolutePath(),"entity.dat").lastModified())).toString(),info);
        item.setPadding(new Vector4f(10f,5f,10f,5f));
        list.addItem(item);
      }
    }
 catch (    IOException e) {
      logger.error("Failed reading world data object.",e);
    }
  }
}
