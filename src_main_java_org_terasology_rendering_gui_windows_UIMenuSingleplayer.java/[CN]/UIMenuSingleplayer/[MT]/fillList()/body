{
  list.removeAll();
  Path savedGames=PathManager.getInstance().getSavesPath();
  List<Path> savedGamePaths=Lists.newArrayList();
  try (DirectoryStream<Path> stream=Files.newDirectoryStream(savedGames)){
    for (    Path entry : stream) {
      if (Files.isRegularFile(entry.resolve(GameManifest.DEFAULT_FILE_NAME))) {
        savedGamePaths.add(entry);
      }
    }
  }
 catch (  IOException e) {
    logger.error("Failed to read saved games path",e);
  }
  Collections.sort(savedGamePaths,new Comparator<Path>(){
    public int compare(    Path o1,    Path o2){
      Path f1=o1.resolve(GameManifest.DEFAULT_FILE_NAME);
      Path f2=o2.resolve(GameManifest.DEFAULT_FILE_NAME);
      try {
        FileTime f1Time=Files.getLastModifiedTime(f1);
        FileTime f2Time=Files.getLastModifiedTime(f2);
        return -f1Time.compareTo(f2Time);
      }
 catch (      IOException e) {
        logger.error("Failed to compare times for {} and {}",f1,f2,e);
      }
      return 0;
    }
  }
);
  DateFormat dateFormat=new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
  for (  Path savedGameDir : savedGamePaths) {
    Path gameManifest=savedGameDir.resolve(GameManifest.DEFAULT_FILE_NAME);
    if (!Files.isRegularFile(gameManifest))     continue;
    try {
      GameManifest info=GameManifest.load(gameManifest);
      if (!info.getTitle().isEmpty()) {
        Date date=new Date(Files.getLastModifiedTime(gameManifest).toMillis());
        UIListItem item=new UIListItem(info.getTitle() + "\n" + dateFormat.format(date),info);
        item.setPadding(new Vector4f(10f,5f,10f,5f));
        list.addItem(item);
      }
    }
 catch (    IOException e) {
      logger.error("Failed reading world data object.",e);
    }
  }
}
