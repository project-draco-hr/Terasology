{
  PropertyLayout propLayout=find("properties",PropertyLayout.class);
  propLayout.setOrdering(PropertyOrdering.byLabel());
  propLayout.clear();
  WorldConfigurator worldConfig=worldGenerator.getConfigurator();
  Map<String,Component> params=worldConfig.getProperties();
  for (  String key : params.keySet()) {
    Class<? extends Component> clazz=params.get(key).getClass();
    Component comp=config.getModuleConfig(worldGenerator.getUri(),key,clazz);
    if (comp != null) {
      worldConfig.setProperty(key,comp);
    }
  }
  for (  String label : params.keySet()) {
    PropertyProvider provider=new PropertyProvider(){
      @Override protected <T>Binding<T> createTextBinding(      Object target,      FieldMetadata<Object,T> fieldMetadata){
        Binding<T> wrap=new WorldConfigBinding<T>(worldConfig,label,fieldMetadata);
        return wrap;
      }
      @Override protected Binding<Float> createFloatBinding(      Object target,      FieldMetadata<Object,?> fieldMetadata){
        Binding<Float> wrap=new WorldConfigNumberBinding(worldConfig,label,(FieldMetadata<Object,Float>)fieldMetadata);
        return wrap;
      }
    }
;
    Component target=params.get(label);
    List<Property<?,?>> properties=provider.createProperties(target);
    propLayout.addProperties(label,properties);
  }
}
