{
  icon.bindTooltipLines(new ReadOnlyBinding<List<TooltipLine>>(){
    @Override public List<TooltipLine> get(){
      GetItemTooltip itemTooltip;
      DisplayNameComponent displayNameComponent=getTargetItem().getComponent(DisplayNameComponent.class);
      if (displayNameComponent != null) {
        itemTooltip=new GetItemTooltip(displayNameComponent.name);
      }
 else {
        itemTooltip=new GetItemTooltip();
      }
      getTargetItem().send(itemTooltip);
      return itemTooltip.getTooltipLines();
    }
  }
);
  icon.bindIcon(new ReadOnlyBinding<TextureRegion>(){
    @Override public TextureRegion get(){
      if (getTargetItem().exists()) {
        ItemComponent itemComp=getTargetItem().getComponent(ItemComponent.class);
        if (itemComp != null && itemComp.icon != null) {
          return itemComp.icon;
        }
        BlockItemComponent blockItemComp=getTargetItem().getComponent(BlockItemComponent.class);
        if (blockItemComp == null || blockItemComp.blockFamily == null) {
          return Assets.getTextureRegion("engine:items#questionMark").get();
        }
      }
      return null;
    }
  }
);
  icon.bindMesh(new ReadOnlyBinding<Mesh>(){
    @Override public Mesh get(){
      BlockItemComponent blockItemComp=getTargetItem().getComponent(BlockItemComponent.class);
      if (blockItemComp != null && blockItemComp.blockFamily != null) {
        return blockItemComp.blockFamily.getArchetypeBlock().getMesh();
      }
      return null;
    }
  }
);
  Optional<Texture> terrainTex=Assets.getTexture("engine:terrain");
  if (terrainTex.isPresent()) {
    icon.setMeshTexture(terrainTex.get());
  }
 else {
    icon.setMeshTexture(Assets.getTexture("engine:default").get());
  }
  icon.bindQuantity(new ReadOnlyBinding<Integer>(){
    @Override public Integer get(){
      ItemComponent itemComp=getTargetItem().getComponent(ItemComponent.class);
      if (itemComp != null) {
        return UnsignedBytes.toInt(itemComp.stackCount);
      }
      return 1;
    }
  }
);
}
