{
  if (!widgetList.isEmpty()) {
    Vector2i availableSize=canvas.size();
    int numColumns=TeraMath.ceilToInt((float)widgetList.size() / rows);
    if (numColumns > 0) {
      availableSize.x-=horizontalSpacing * (numColumns - 1);
    }
    if (rows > 0) {
      availableSize.y-=verticalSpacing * (rows - 1);
    }
    List<List<UIWidget>> columns=Lists.newArrayList(getColumnIterator());
    List<ColumnInfo> columnInfos=Lists.newArrayList();
    for (    List<UIWidget> column : columns) {
      columnInfos.add(calculateColumnSize(column,canvas,availableSize));
    }
    int[] minHeights=new int[rows];
    int minColumnHeight=0;
    int columnOffsetY=0;
    if (autoSizeRows) {
      for (      ColumnInfo column : columnInfos) {
        for (int row=0; row < column.widgetSizes.size(); row++) {
          minHeights[row]=Math.max(minHeights[row],column.widgetSizes.get(row).getY());
        }
      }
      for (      int height : minHeights) {
        minColumnHeight+=height;
      }
      minColumnHeight+=(rows - 1) * verticalSpacing;
      columnOffsetY=(canvas.size().y - minColumnHeight) / 2;
    }
 else {
      minColumnHeight=canvas.size().y;
      for (int i=0; i < rows; ++i) {
        minHeights[i]=TeraMath.floorToInt((minColumnHeight - (rows - 1) * verticalSpacing) * rowHeights[i]);
      }
    }
    int columnOffsetX=0;
    int usedWidth=0;
    for (    ColumnInfo column : columnInfos) {
      usedWidth+=column.width;
    }
    usedWidth+=(columnInfos.size() - 1) * horizontalSpacing;
    columnOffsetX=(canvas.size().x - usedWidth) / 2;
    for (int columnIndex=0; columnIndex < columns.size(); ++columnIndex) {
      List<UIWidget> column=columns.get(columnIndex);
      ColumnInfo columnInfo=columnInfos.get(columnIndex);
      int cellOffsetY=columnOffsetY;
      for (int i=0; i < column.size(); ++i) {
        UIWidget widget=column.get(i);
        int columnWidth=columnInfo.width;
        if (widget != null) {
          Rect2i drawRegion=Rect2i.createFromMinAndSize(columnOffsetX,cellOffsetY,columnWidth,minHeights[i]);
          canvas.drawWidget(widget,drawRegion);
        }
        cellOffsetY+=minHeights[i] + verticalSpacing;
      }
      columnOffsetX+=columnInfo.width + horizontalSpacing;
    }
  }
}
