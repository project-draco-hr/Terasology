{
  this.wrapMode=data.getWrapMode();
  this.filterMode=data.getFilterMode();
  this.textureType=data.getType();
  this.textureData=data;
  if (id == 0) {
    id=glGenTextures();
  }
switch (textureType) {
case TEXTURE2D:
    logger.debug("Bound texture '{}' - {}",getUrn(),id);
  width=data.getWidth();
height=data.getHeight();
depth=1;
glBindTexture(GL11.GL_TEXTURE_2D,id);
glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,getGLMode(wrapMode));
glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,getGLMode(wrapMode));
GL11.glTexParameteri(GL_TEXTURE_2D,GL11.GL_TEXTURE_MIN_FILTER,getGlMinFilter(filterMode));
GL11.glTexParameteri(GL_TEXTURE_2D,GL11.GL_TEXTURE_MAG_FILTER,getGlMagFilter(filterMode));
GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT,4);
GL11.glTexParameteri(GL11.GL_TEXTURE_2D,GL12.GL_TEXTURE_MAX_LEVEL,data.getBuffers().length - 1);
if (data.getBuffers().length > 0) {
for (int i=0; i < data.getBuffers().length; i++) {
GL11.glTexImage2D(GL11.GL_TEXTURE_2D,i,GL11.GL_RGBA,width >> i,height >> i,0,GL11.GL_RGBA,GL11.GL_UNSIGNED_BYTE,data.getBuffers()[i]);
}
}
 else {
GL11.glTexImage2D(GL11.GL_TEXTURE_2D,0,GL11.GL_RGBA,width,height,0,GL11.GL_RGBA,GL11.GL_UNSIGNED_BYTE,(ByteBuffer)null);
}
break;
case TEXTURE3D:
final int byteLength=4 * 16 * 16* 16;
final int strideX=16 * 4;
final int strideY=16 * 16 * 4;
final int strideZ=4;
if (data.getWidth() % data.getHeight() != 0 || data.getWidth() / data.getHeight() != data.getHeight()) {
throw new RuntimeException("3D texture must be cubic (height^3) - width must thus be a multiple of height");
}
width=data.getHeight();
height=data.getHeight();
depth=data.getHeight();
ByteBuffer alignedBuffer=ByteBuffer.allocateDirect(byteLength);
for (int x=0; x < height; x++) {
for (int y=0; y < height; y++) {
for (int z=0; z < height; z++) {
final int index=x * strideX + z * strideZ + strideY * y;
alignedBuffer.put(data.getBuffers()[0].get(index));
alignedBuffer.put(data.getBuffers()[0].get(index + 1));
alignedBuffer.put(data.getBuffers()[0].get(index + 2));
alignedBuffer.put(data.getBuffers()[0].get(index + 3));
}
}
}
alignedBuffer.flip();
logger.debug("Bound texture '{}' - {}",getUrn(),id);
glBindTexture(GL12.GL_TEXTURE_3D,id);
glTexParameterf(GL12.GL_TEXTURE_3D,GL_TEXTURE_WRAP_S,getGLMode(wrapMode));
glTexParameterf(GL12.GL_TEXTURE_3D,GL_TEXTURE_WRAP_T,getGLMode(wrapMode));
glTexParameterf(GL12.GL_TEXTURE_3D,GL12.GL_TEXTURE_WRAP_R,getGLMode(wrapMode));
GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_MIN_FILTER,getGlMinFilter(filterMode));
GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_MAG_FILTER,getGlMagFilter(filterMode));
GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT,4);
GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL12.GL_TEXTURE_MAX_LEVEL,data.getBuffers().length - 1);
GL12.glTexImage3D(GL12.GL_TEXTURE_3D,0,GL11.GL_RGBA,width,height,depth,0,GL11.GL_RGBA,GL11.GL_UNSIGNED_BYTE,alignedBuffer);
break;
}
}
