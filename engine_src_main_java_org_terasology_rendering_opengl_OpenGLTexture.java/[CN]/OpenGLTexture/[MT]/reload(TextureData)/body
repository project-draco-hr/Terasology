{
  setWidth(data.getWidth());
  setHeight(data.getHeight());
  setDepth(data.getDepth());
  setWrapMode(data.getWrapMode());
  setFilterMode(data.getFilterMode());
  setTextureType(data.getType());
  this.textureData=data;
  if (isDisposed()) {
    setId(glGenTextures());
  }
switch (getTextureType()) {
case TEXTURE2D:
    logger.debug("Bound texture '{}' - {}",getURI(),getId());
  glBindTexture(GL11.GL_TEXTURE_2D,getId());
glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,getGLMode(getWrapMode()));
glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,getGLMode(getWrapMode()));
GL11.glTexParameteri(GL_TEXTURE_2D,GL11.GL_TEXTURE_MIN_FILTER,getGlMinFilter(getFilterMode()));
GL11.glTexParameteri(GL_TEXTURE_2D,GL11.GL_TEXTURE_MAG_FILTER,getGlMagFilter(getFilterMode()));
GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT,4);
GL11.glTexParameteri(GL11.GL_TEXTURE_2D,GL12.GL_TEXTURE_MAX_LEVEL,data.getBuffers().length - 1);
for (int i=0; i < data.getBuffers().length; i++) {
GL11.glTexImage2D(GL11.GL_TEXTURE_2D,i,GL11.GL_RGBA,getWidth() >> i,getHeight() >> i,0,GL11.GL_RGBA,GL11.GL_UNSIGNED_BYTE,data.getBuffers()[i]);
}
break;
case TEXTURE3D:
logger.debug("Bound texture '{}' - {}",getURI(),getId());
glBindTexture(GL12.GL_TEXTURE_3D,getId());
glTexParameterf(GL12.GL_TEXTURE_3D,GL_TEXTURE_WRAP_S,getGLMode(getWrapMode()));
glTexParameterf(GL12.GL_TEXTURE_3D,GL_TEXTURE_WRAP_T,getGLMode(getWrapMode()));
glTexParameterf(GL12.GL_TEXTURE_3D,GL12.GL_TEXTURE_WRAP_R,getGLMode(getWrapMode()));
GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_MIN_FILTER,getGlMinFilter(getFilterMode()));
GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_MAG_FILTER,getGlMagFilter(getFilterMode()));
GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT,4);
GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL12.GL_TEXTURE_MAX_LEVEL,data.getBuffers().length - 1);
for (int i=0; i < data.getBuffers().length; i++) {
GL12.glTexImage3D(GL12.GL_TEXTURE_3D,i,GL11.GL_RGBA,getWidth(),getHeight(),getDepth(),0,GL11.GL_RGBA,GL11.GL_UNSIGNED_BYTE,data.getBuffers()[i]);
}
break;
}
}
