{
  broadphase=new DbvtBroadphase();
  broadphase.getOverlappingPairCache().setInternalGhostPairCallback(new GhostPairCallback());
  CollisionConfiguration defaultCollisionConfiguration=new DefaultCollisionConfiguration();
  dispatcher=new CollisionDispatcher(defaultCollisionConfiguration);
  SequentialImpulseConstraintSolver sequentialImpulseConstraintSolver=new SequentialImpulseConstraintSolver();
  discreteDynamicsWorld=new DiscreteDynamicsWorld(dispatcher,broadphase,sequentialImpulseConstraintSolver,defaultCollisionConfiguration);
  discreteDynamicsWorld.setGravity(new Vector3f(0f,-15f,0f));
  blockEntityRegistry=CoreRegistry.get(BlockEntityRegistry.class);
  wrapper=new PhysicsWorldWrapper(world);
  VoxelWorldShape worldShape=new VoxelWorldShape(wrapper);
  liquidWrapper=new PhysicsLiquidWrapper(world);
  VoxelWorldShape liquidShape=new VoxelWorldShape(liquidWrapper);
  Matrix3f rot=new Matrix3f();
  rot.setIdentity();
  DefaultMotionState blockMotionState=new DefaultMotionState(new Transform(new Matrix4f(rot,new Vector3f(0,0,0),1.0f)));
  RigidBodyConstructionInfo blockConsInf=new RigidBodyConstructionInfo(0,blockMotionState,worldShape,new Vector3f());
  BulletRigidBody rigidBody=new BulletRigidBody(blockConsInf);
  rigidBody.rb.setCollisionFlags(CollisionFlags.STATIC_OBJECT | rigidBody.rb.getCollisionFlags());
  short mask=(short)(~(CollisionFilterGroups.STATIC_FILTER | StandardCollisionGroup.LIQUID.getFlag()));
  discreteDynamicsWorld.addRigidBody(rigidBody.rb,combineGroups(StandardCollisionGroup.WORLD),mask);
  RigidBodyConstructionInfo liquidConsInfo=new RigidBodyConstructionInfo(0,blockMotionState,liquidShape,new Vector3f());
  BulletRigidBody liquidBody=new BulletRigidBody(liquidConsInfo);
  liquidBody.rb.setCollisionFlags(CollisionFlags.STATIC_OBJECT | rigidBody.rb.getCollisionFlags());
  discreteDynamicsWorld.addRigidBody(liquidBody.rb,combineGroups(StandardCollisionGroup.LIQUID),CollisionFilterGroups.SENSOR_TRIGGER);
}
