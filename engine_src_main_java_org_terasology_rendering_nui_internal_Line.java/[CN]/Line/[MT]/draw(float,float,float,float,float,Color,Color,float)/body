{
  float t=0;
  float R=0;
  float f=width - (int)width;
  float A;
  boolean alphaBlend=alpha > 0;
  float Cr=color.rf(), Cg=color.gf(), Cb=color.bf();
  float Br=background.rf(), Bg=background.gf(), Bb=background.bf();
  if (alphaBlend) {
    A=alpha;
  }
 else {
    A=1.f;
  }
  if (width >= 0.0 && width < 1.0) {
    t=0.05f;
    R=0.48f + 0.32f * f;
    if (!alphaBlend) {
      Cr+=0.88 * (1 - f);
      Cg+=0.88 * (1 - f);
      Cb+=0.88 * (1 - f);
      if (Cr > 1.0f) {
        Cr=1.0f;
      }
      if (Cg > 1.0f) {
        Cg=1.0f;
      }
      if (Cb > 1.0f) {
        Cb=1.0f;
      }
    }
 else {
      A*=f;
    }
  }
 else   if (width >= 1.0 && width < 2.0) {
    t=0.05f + f * 0.33f;
    R=0.768f + 0.312f * f;
  }
 else   if (width >= 2.0 && width < 3.0) {
    t=0.38f + f * 0.58f;
    R=1.08f;
  }
 else   if (width >= 3.0 && width < 4.0) {
    t=0.96f + f * 0.48f;
    R=1.08f;
  }
 else   if (width >= 4.0 && width < 5.0) {
    t=1.44f + f * 0.46f;
    R=1.08f;
  }
 else   if (width >= 5.0 && width < 6.0) {
    t=1.9f + f * 0.6f;
    R=1.08f;
  }
 else   if (width >= 6.0) {
    float ff=width - 6.0f;
    t=2.5f + ff * 0.50f;
    R=1.08f;
  }
  float tx=0, ty=0;
  float Rx=0, Ry=0;
  float cx=0, cy=0;
  float ALW=0.01f;
  float dx=x2 - x1;
  float dy=y2 - y1;
  if (Math.abs(dx) < ALW) {
    tx=t;
    ty=0;
    Rx=R;
    Ry=0;
    if (width > 0.0 && width < 1.0)     tx*=8;
 else     if (width == 1.0)     tx*=10;
  }
 else   if (Math.abs(dy) < ALW) {
    tx=0;
    ty=t;
    Rx=0;
    Ry=R;
    if (width > 0.0 && width < 1.0)     ty*=8;
 else     if (width == 1.0)     ty*=10;
  }
 else {
    if (width < 3) {
      float m=dy / dx;
      if (m > -0.4142 && m <= 0.4142) {
        tx=t * 0.1f;
        ty=t;
        Rx=R * 0.6f;
        Ry=R;
      }
 else       if (m > 0.4142 && m <= 2.4142) {
        tx=t * -0.7071f;
        ty=t * 0.7071f;
        Rx=R * -0.7071f;
        Ry=R * 0.7071f;
      }
 else       if (m > 2.4142 || m <= -2.4142) {
        tx=t;
        ty=t * 0.1f;
        Rx=R;
        Ry=R * 0.6f;
      }
 else       if (m > -2.4142 && m < -0.4142) {
        tx=t * 0.7071f;
        ty=t * 0.7071f;
        Rx=R * 0.7071f;
        Ry=R * 0.7071f;
      }
    }
 else {
      dx=y1 - y2;
      dy=x2 - x1;
      float L=(float)Math.sqrt(dx * dx + dy * dy);
      dx/=L;
      dy/=L;
      cx=-0.6f * dy;
      cy=0.6f * dx;
      tx=t * dx;
      ty=t * dy;
      Rx=R * dx;
      Ry=R * dy;
    }
  }
  float line_vertex[]={x1 - tx - Rx,y1 - ty - Ry,x2 - tx - Rx,y2 - ty - Ry,x1 - tx,y1 - ty,x2 - tx,y2 - ty,x1 + tx,y1 + ty,x2 + tx,y2 + ty,x1 + tx + Rx,y1 + ty + Ry,x2 + tx + Rx,y2 + ty + Ry};
  GL11.glVertexPointer(2,0,wrap(line_vertex));
  if (!alphaBlend) {
    float line_color[]={Br,Bg,Bb,Br,Bg,Bb,Cr,Cg,Cb,Cr,Cg,Cb,Cr,Cg,Cb,Cr,Cg,Cb,Br,Bg,Bb,Br,Bg,Bb};
    GL11.glColorPointer(3,0,wrap(line_color));
  }
 else {
    float line_color[]={Cr,Cg,Cb,0,Cr,Cg,Cb,0,Cr,Cg,Cb,A,Cr,Cg,Cb,A,Cr,Cg,Cb,A,Cr,Cg,Cb,A,Cr,Cg,Cb,0,Cr,Cg,Cb,0};
    GL11.glColorPointer(4,0,wrap(line_color));
  }
  if ((Math.abs(dx) < ALW || Math.abs(dy) < ALW) && width <= 1.0) {
    GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP,0,6);
  }
 else {
    GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP,0,8);
  }
  if (width < 3) {
  }
 else {
    line_vertex=new float[]{x1 - Rx + cx,y1 - Ry + cy,x1 + Rx + cx,y1 + Ry + cy,x1 - tx - Rx,y1 - ty - Ry,x1 + tx + Rx,y1 + ty + Ry,x2 - Rx - cx,y2 - Ry - cy,x2 + Rx - cx,y2 + Ry - cy,x2 - tx - Rx,y2 - ty - Ry,x2 + tx + Rx,y2 + ty + Ry};
    GL11.glVertexPointer(2,0,wrap(line_vertex));
    if (!alphaBlend) {
      float line_color[]={Br,Bg,Bb,Br,Bg,Bb,Cr,Cg,Cb,Cr,Cg,Cb,Br,Bg,Bb,Br,Bg,Bb,Cr,Cg,Cb,Cr,Cg,Cb};
      GL11.glColorPointer(3,0,wrap(line_color));
    }
 else {
      float line_color[]={Cr,Cg,Cb,0,Cr,Cg,Cb,0,Cr,Cg,Cb,A,Cr,Cg,Cb,A,Cr,Cg,Cb,0,Cr,Cg,Cb,0,Cr,Cg,Cb,A,Cr,Cg,Cb,A};
      GL11.glColorPointer(4,0,wrap(line_color));
    }
    GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP,0,4);
    GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP,4,4);
  }
}
