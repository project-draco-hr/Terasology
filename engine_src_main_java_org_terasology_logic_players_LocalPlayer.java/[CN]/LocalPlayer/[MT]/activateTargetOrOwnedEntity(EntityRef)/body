{
  EntityRef character=getCharacterEntity();
  CharacterComponent characterComponent=character.getComponent(CharacterComponent.class);
  Vector3f direction=getViewDirection();
  Vector3f originPos=getViewPosition();
  boolean ownedEntityUsage=usedOwnedEntity.exists();
  int activationId=nextActivationId++;
  Physics physics=CoreRegistry.get(Physics.class);
  HitResult result=physics.rayTrace(originPos,direction,characterComponent.interactionRange,Sets.newHashSet(character),CharacterSystem.DEFAULTPHYSICSFILTER);
  boolean eventWithTarget=result.isHit();
  if (eventWithTarget) {
    EntityRef activatedObject=usedOwnedEntity.exists() ? usedOwnedEntity : result.getEntity();
    activatedObject.send(new ActivationPredicted(character,result.getEntity(),originPos,direction,result.getHitPoint(),result.getHitNormal(),activationId));
    character.send(new ActivationRequest(character,ownedEntityUsage,usedOwnedEntity,eventWithTarget,result.getEntity(),originPos,direction,result.getHitPoint(),result.getHitNormal(),activationId));
    return true;
  }
 else   if (ownedEntityUsage) {
    usedOwnedEntity.send(new ActivationPredicted(character,EntityRef.NULL,originPos,direction,originPos,new Vector3f(),activationId));
    character.send(new ActivationRequest(character,ownedEntityUsage,usedOwnedEntity,eventWithTarget,EntityRef.NULL,originPos,direction,originPos,new Vector3f(),activationId));
    return true;
  }
  return false;
}
