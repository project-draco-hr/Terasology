{
  CommandParameterInfo[] params=getParameters();
  int requiredParameterCount=getRequiredParameterCount();
  Object[] processedParams;
  if (isClientParameterRequired()) {
    processedParams=new Object[params.length + 1];
    processedParams[processedParams.length - 1]=sender;
  }
 else   processedParams=new Object[params.length];
  for (int i=0; i < requiredParameterCount; i++) {
    String rawParam=rawParams.get(i);
    CommandParameterInfo param=params[i];
    processedParams[i]=param.getValue(rawParam);
  }
  if (endsWithVarargs()) {
    CommandParameterInfo param=params[params.length - 1];
    Object varargsResult;
    if (rawParams.size() <= requiredParameterCount) {
      Class<?> type=param.getType();
      varargsResult=Array.newInstance(type,0);
    }
 else {
      String rawParam=rawParams.get(requiredParameterCount);
      for (int i=requiredParameterCount + 1; i < rawParams.size(); i++)       rawParam+=" " + rawParams.get(i);
      varargsResult=param.getValue(rawParam);
    }
    processedParams[requiredParameterCount]=varargsResult;
  }
  try {
    Object result=method.invoke(provider,processedParams);
    return result == null ? null : result.toString();
  }
 catch (  Exception e) {
    InvalidCommandCallException newE=new InvalidCommandCallException("An error occurred while executing the command.",e);
    e.printStackTrace();
    throw newE;
  }
}
