{
  boolean result=false;
  ArrayList<BlockPosition> blockPositions=gatherAdjacentBlockPositions(origin);
  for (int i=0; i < blockPositions.size(); i++) {
    BlockPosition p=blockPositions.get(i);
    byte blockType=_parent.getWorldProvider().getBlockAtPosition(new Vector3f(p.x,p.y,p.z));
    AABB blockAABB=Block.AABBForBlockAt(p.x,p.y,p.z);
    if (!BlockManager.getInstance().getBlock(blockType).isPenetrable()) {
      if (getAABB().overlaps(blockAABB)) {
        result=true;
        Vector3f direction=new Vector3f(getPosition().x,0f,getPosition().z);
        direction.x-=origin.x;
        direction.z-=origin.z;
        Vector3f blockPoi=blockAABB.closestPointOnAABBToPoint(origin);
        Vector3f entityPoi=generateAABBForPosition(origin).closestPointOnAABBToPoint(blockPoi);
        Vector3f planeNormal=blockAABB.normalForPlaneClosestToOrigin(blockPoi,origin,true,false,true);
        Vector3f slideVector=new Vector3f(planeNormal.z,0,-planeNormal.x);
        Vector3f pushBack=new Vector3f();
        pushBack.sub(blockPoi,entityPoi);
        double length=slideVector.dot(direction);
        Vector3f newPosition=new Vector3f();
        newPosition.z=(float)(origin.z + pushBack.z * 0.2 + length * slideVector.z);
        newPosition.x=(float)(origin.x + pushBack.x * 0.2 + length * slideVector.x);
        newPosition.y=origin.y;
        getPosition().set(newPosition);
      }
    }
  }
  return result;
}
