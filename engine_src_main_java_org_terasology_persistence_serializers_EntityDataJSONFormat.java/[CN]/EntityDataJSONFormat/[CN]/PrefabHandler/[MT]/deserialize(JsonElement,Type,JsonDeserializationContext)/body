{
  EntityData.Prefab.Builder prefab=EntityData.Prefab.newBuilder();
  JsonObject jsonObject=json.getAsJsonObject();
  for (  Map.Entry<String,JsonElement> entry : jsonObject.entrySet()) {
    String name=entry.getKey().toLowerCase(Locale.ENGLISH);
switch (name) {
case "name":
      if (entry.getValue().isJsonPrimitive()) {
        prefab.setName(entry.getValue().getAsString());
      }
    break;
case "parent":
  if (entry.getValue().isJsonPrimitive()) {
    prefab.setParentName(entry.getValue().getAsString());
  }
break;
case "removedcomponents":
if (entry.getValue().isJsonPrimitive()) {
prefab.addRemovedComponent(entry.getValue().getAsString());
}
 else if (entry.getValue().isJsonArray()) {
for (JsonElement element : entry.getValue().getAsJsonArray()) {
  prefab.addRemovedComponent(element.getAsString());
}
}
break;
case "persisted":
prefab.setPersisted(entry.getValue().getAsBoolean());
break;
case "alwaysrelevant":
prefab.setAlwaysRelevant(entry.getValue().getAsBoolean());
break;
default :
if (entry.getValue().isJsonObject()) {
EntityData.Component.Builder component=context.deserialize(entry.getValue(),EntityData.Component.Builder.class);
component.setType(entry.getKey());
prefab.addComponent(component);
}
}
}
return prefab.build();
}
