{
  setSize(size);
  this.buttonType=buttonType;
  setTexture("engine:gui_menu");
  setNormalState(new Vector2f(0f,0f),new Vector2f(256f,30f));
  setHoverState(new Vector2f(0f,30f),new Vector2f(256f,30f));
  setPressedState(new Vector2f(0f,60f),new Vector2f(256f,30f));
  setBackgroundImage(states.get("normal")[0],states.get("normal")[1]);
  addMouseMoveListener(new MouseMoveListener(){
    @Override public void leave(    UIDisplayElement element){
      if (UIButton.this.buttonType == ButtonType.TOGGLE) {
        if (toggleState) {
          setBackgroundImage(states.get("pressed")[0],states.get("pressed")[1]);
        }
 else {
          setBackgroundImage(states.get("normal")[0],states.get("normal")[1]);
        }
      }
 else {
        setBackgroundImage(states.get("normal")[0],states.get("normal")[1]);
      }
    }
    @Override public void hover(    UIDisplayElement element){
    }
    @Override public void enter(    UIDisplayElement element){
      CoreRegistry.get(AudioManager.class).playSound(Assets.getSound("engine:click"),1.0f);
      if (UIButton.this.buttonType == ButtonType.NORMAL) {
        setBackgroundImage(states.get("hover")[0],states.get("hover")[1]);
      }
    }
    @Override public void move(    UIDisplayElement element){
    }
  }
);
  addMouseButtonListener(new MouseButtonListener(){
    @Override public void up(    UIDisplayElement element,    int button,    boolean intersect){
      if (UIButton.this.buttonType == ButtonType.NORMAL) {
        setBackgroundImage(states.get("normal")[0],states.get("normal")[1]);
      }
    }
    @Override public void down(    UIDisplayElement element,    int button,    boolean intersect){
      if (intersect) {
        if (UIButton.this.buttonType == ButtonType.TOGGLE) {
          setToggleState(!toggleState);
        }
 else {
          setBackgroundImage(states.get("pressed")[0],states.get("pressed")[1]);
        }
      }
    }
    @Override public void wheel(    UIDisplayElement element,    int wheel,    boolean intersect){
    }
  }
);
  label=new UILabel("Untitled");
  label.addChangedListener(new ChangedListener(){
    @Override public void changed(    UIDisplayElement element){
      layout();
    }
  }
);
  label.setHorizontalAlign(EHorizontalAlign.CENTER);
  label.setVerticalAlign(EVerticalAlign.CENTER);
  label.setVisible(true);
  label.setTextShadow(true);
  addDisplayElement(label);
}
