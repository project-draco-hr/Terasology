{
  entityManager=new EntitySystemBuilder().build(CoreRegistry.get(ModuleManager.class).getEnvironment(),CoreRegistry.get(NetworkSystem.class),CoreRegistry.get(ReflectFactory.class),CoreRegistry.get(CopyStrategyLibrary.class));
  eventSystem=CoreRegistry.get(EventSystem.class);
  CoreRegistry.put(Console.class,new ConsoleImpl());
  nuiManager=CoreRegistry.get(NUIManager.class);
  ((NUIManagerInternal)nuiManager).refreshWidgetsLibrary();
  eventSystem.registerEventHandler(nuiManager);
  componentSystemManager=new ComponentSystemManager();
  CoreRegistry.put(ComponentSystemManager.class,componentSystemManager);
  CameraTargetSystem cameraTargetSystem=new CameraTargetSystem();
  CoreRegistry.put(CameraTargetSystem.class,cameraTargetSystem);
  componentSystemManager.register(cameraTargetSystem,"engine:CameraTargetSystem");
  componentSystemManager.register(new ConsoleSystem(),"engine:ConsoleSystem");
  CoreCommands.initialiseCommands();
  inputSystem=CoreRegistry.get(InputSystem.class);
  new RegisterInputSystem().step();
  EntityRef localPlayerEntity=entityManager.create(new ClientComponent());
  LocalPlayer localPlayer=CoreRegistry.put(LocalPlayer.class,new LocalPlayer());
  localPlayer.setClientEntity(localPlayerEntity);
  componentSystemManager.initialise();
  playBackgroundMusic();
  CoreRegistry.get(NUIManager.class).pushScreen("engine:mainMenuScreen");
  if (!messageOnLoad.isEmpty()) {
    nuiManager.pushScreen(MessagePopup.ASSET_URI,MessagePopup.class).setMessage("Error",messageOnLoad);
  }
}
