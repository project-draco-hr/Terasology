{
  context=gameEngine.createChildContext();
  CoreRegistry.setContext(context);
  entityManager=new EntitySystemBuilder().build(context.get(ModuleManager.class).getEnvironment(),context.get(NetworkSystem.class),context.get(ReflectFactory.class),context.get(CopyStrategyLibrary.class));
  eventSystem=context.get(EventSystem.class);
  context.put(Console.class,new ConsoleImpl());
  nuiManager=context.get(NUIManager.class);
  ((NUIManagerInternal)nuiManager).refreshWidgetsLibrary();
  eventSystem.registerEventHandler(nuiManager);
  componentSystemManager=new ComponentSystemManager();
  context.put(ComponentSystemManager.class,componentSystemManager);
  CameraTargetSystem cameraTargetSystem=new CameraTargetSystem();
  context.put(CameraTargetSystem.class,cameraTargetSystem);
  componentSystemManager.register(cameraTargetSystem,"engine:CameraTargetSystem");
  componentSystemManager.register(new ConsoleSystem(),"engine:ConsoleSystem");
  componentSystemManager.register(new CoreCommands(),"engine:CoreCommands");
  inputSystem=context.get(InputSystem.class);
  new RegisterInputSystem().step();
  EntityRef localPlayerEntity=entityManager.create(new ClientComponent());
  LocalPlayer localPlayer=new LocalPlayer();
  context.put(LocalPlayer.class,localPlayer);
  localPlayer.setClientEntity(localPlayerEntity);
  componentSystemManager.initialise();
  playBackgroundMusic();
  context.get(NUIManager.class).pushScreen("engine:mainMenuScreen");
  if (!messageOnLoad.isEmpty()) {
    nuiManager.pushScreen(MessagePopup.ASSET_URI,MessagePopup.class).setMessage("Error",messageOnLoad);
  }
}
