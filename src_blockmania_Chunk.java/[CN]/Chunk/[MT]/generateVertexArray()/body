{
  color.clear();
  quads.clear();
  tex.clear();
  Vector3f offset=new Vector3f(position.x * chunkDimensions.x,position.y * chunkDimensions.y,position.z * chunkDimensions.z);
  for (int x=0; x < chunkDimensions.x; x++) {
    for (int y=0; y < chunkDimensions.y; y++) {
      for (int z=0; z < chunkDimensions.z; z++) {
        int block=blocks[x][y][z];
        if (block > 0) {
          boolean drawFront, drawBack, drawLeft, drawRight, drawTop, drawBottom;
          int blockToCheck=0;
          blockToCheck=parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y + 1),getBlockWorldPosZ(z));
          drawTop=checkBlockTypeToDraw(blockToCheck,block);
          if (drawTop) {
            Vector3f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.TOP);
            float shadowIntens=parent.getLight(getBlockWorldPosX(x),getBlockWorldPosY(y + 1),getBlockWorldPosZ(z));
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.TOP).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.TOP).y;
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
          }
          blockToCheck=parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z - 1));
          drawFront=checkBlockTypeToDraw(blockToCheck,block);
          if (drawFront) {
            Vector3f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.FRONT);
            float shadowIntens=parent.getLight(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z - 1));
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.FRONT).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.FRONT).y;
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
          }
          blockToCheck=parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z + 1));
          drawBack=checkBlockTypeToDraw(blockToCheck,block);
          if (drawBack) {
            Vector3f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.BACK);
            float shadowIntens=parent.getLight(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z + 1));
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.BACK).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.BACK).y;
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
          }
          blockToCheck=parent.getBlock(getBlockWorldPosX(x - 1),getBlockWorldPosY(y),getBlockWorldPosZ(z));
          drawLeft=checkBlockTypeToDraw(blockToCheck,block);
          if (drawLeft) {
            Vector3f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.LEFT);
            float shadowIntens=parent.getLight(getBlockWorldPosX(x - 1),getBlockWorldPosY(y),getBlockWorldPosZ(z));
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.LEFT).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.LEFT).y;
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
          }
          blockToCheck=parent.getBlock(getBlockWorldPosX(x + 1),getBlockWorldPosY(y),getBlockWorldPosZ(z));
          drawRight=checkBlockTypeToDraw(blockToCheck,block);
          if (drawRight) {
            Vector3f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.RIGHT);
            float shadowIntens=parent.getLight(getBlockWorldPosX(x + 1),getBlockWorldPosY(y),getBlockWorldPosZ(z));
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.RIGHT).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.RIGHT).y;
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
          }
          blockToCheck=parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y - 1),getBlockWorldPosZ(z));
          drawBottom=checkBlockTypeToDraw(blockToCheck,block);
          if (drawBottom) {
            Vector3f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.BOTTOM);
            float shadowIntens=parent.getLight(getBlockWorldPosX(x),getBlockWorldPosY(y - 1),getBlockWorldPosZ(z));
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.BOTTOM).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.BOTTOM).y;
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.y * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            color.add(colorOffset.z * shadowIntens * parent.getDaylight() + MIN_LIGHT - DIM_BLOCK_SIDES);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
          }
        }
      }
    }
  }
}
