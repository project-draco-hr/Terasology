{
  MeshAnimation animation=new MeshAnimation(uri);
  String[] boneNames=new String[md5.numJoints];
  int[] boneParents=new int[md5.numJoints];
  for (int i=0; i < md5.numJoints; ++i) {
    boneNames[i]=md5.joints[i].name;
    boneParents[i]=md5.joints[i].parent;
  }
  animation.setBones(boneNames,boneParents);
  animation.setTimePerFrame(1.0f / md5.frameRate);
  for (int frameIndex=0; frameIndex < md5.numFrames; ++frameIndex) {
    MD5Frame frame=md5.frames[frameIndex];
    List<Vector3f> positions=Lists.newArrayListWithExpectedSize(md5.numJoints);
    List<Vector3f> rawRotations=Lists.newArrayListWithExpectedSize(md5.numJoints);
    for (int i=0; i < md5.numJoints; ++i) {
      positions.add(new Vector3f(md5.baseFramePosition[i]));
      rawRotations.add(new Vector3f(md5.baseFrameOrientation[i]));
    }
    for (int jointIndex=0; jointIndex < md5.numJoints; ++jointIndex) {
      int compIndex=0;
      if ((md5.joints[jointIndex].flags & POSITION_X_FLAG) != 0) {
        positions.get(jointIndex).x=frame.components[md5.joints[jointIndex].startIndex + compIndex];
        compIndex++;
      }
      if ((md5.joints[jointIndex].flags & POSITION_Y_FLAG) != 0) {
        positions.get(jointIndex).y=frame.components[md5.joints[jointIndex].startIndex + compIndex];
        compIndex++;
      }
      if ((md5.joints[jointIndex].flags & POSITION_Z_FLAG) != 0) {
        positions.get(jointIndex).z=frame.components[md5.joints[jointIndex].startIndex + compIndex];
        compIndex++;
      }
      if ((md5.joints[jointIndex].flags & ORIENTATION_X_FLAG) != 0) {
        rawRotations.get(jointIndex).x=frame.components[md5.joints[jointIndex].startIndex + compIndex];
        compIndex++;
      }
      if ((md5.joints[jointIndex].flags & ORIENTATION_Y_FLAG) != 0) {
        rawRotations.get(jointIndex).y=frame.components[md5.joints[jointIndex].startIndex + compIndex];
        compIndex++;
      }
      if ((md5.joints[jointIndex].flags & ORIENTATION_Z_FLAG) != 0) {
        rawRotations.get(jointIndex).z=frame.components[md5.joints[jointIndex].startIndex + compIndex];
        compIndex++;
      }
    }
    List<Quat4f> rotations=Lists.newArrayListWithCapacity(rawRotations.size());
    for (    Vector3f rot : rawRotations) {
      rotations.add(MD5ParserCommon.completeQuat4f(rot.x,rot.y,rot.z));
    }
    rotations.set(0,MD5ParserCommon.correctQuat4f(rotations.get(0)));
    animation.addFrame(new MeshAnimationFrame(positions,rotations));
  }
  return animation;
}
