{
  super.applyParameters(program);
  int texId=0;
  DynamicFBM dynamicFBM=CoreRegistry.get(DynamicFBM.class);
  FBO sceneOpaque=dynamicFBM.getFBO(DefaultDynamicFBOs.ReadOnlyGBuffer.getResourceUrn());
  if (sceneOpaque != null) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindTexture();
    program.setInt("texSceneOpaque",texId++,true);
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindDepthTexture();
    program.setInt("texSceneOpaqueDepth",texId++,true);
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindNormalsTexture();
    program.setInt("texSceneOpaqueNormals",texId++,true);
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindLightBufferTexture();
    program.setInt("texSceneOpaqueLightBuffer",texId++,true);
  }
  FBO sceneReflectiveRefractive=dynamicFBM.getFBO(ChunksRefractiveReflectiveNode.REFRACTIVE_REFLECTIVE_URN);
  if (sceneReflectiveRefractive != null) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneReflectiveRefractive.bindTexture();
    program.setInt("texSceneReflectiveRefractive",texId++,true);
  }
  RenderingConfig renderingConfig=CoreRegistry.get(Config.class).getRendering();
  Camera activeCamera=CoreRegistry.get(WorldRenderer.class).getActiveCamera();
  if (renderingConfig == null || activeCamera == null) {
    return;
  }
  if (renderingConfig.isLocalReflections()) {
    if (sceneReflectiveRefractive != null) {
      GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
      sceneReflectiveRefractive.bindNormalsTexture();
      program.setInt("texSceneReflectiveRefractiveNormals",texId++,true);
    }
    program.setMatrix4("invProjMatrix",activeCamera.getInverseProjectionMatrix(),true);
    program.setMatrix4("projMatrix",activeCamera.getProjectionMatrix(),true);
  }
  if (renderingConfig.isSsao()) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    dynamicFBM.bindFboColorTexture(AmbientOcclusionPassesNode.SSAO_BLURRED_URN);
    program.setInt("texSsao",texId++,true);
  }
  if (renderingConfig.isOutline()) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    dynamicFBM.bindFboColorTexture(OutlineNode.OUTLINE_URN);
    program.setInt("texEdges",texId++,true);
    program.setFloat("outlineDepthThreshold",outlineDepthThreshold,true);
    program.setFloat("outlineThickness",outlineThickness,true);
  }
  if (renderingConfig.isVolumetricFog()) {
    program.setMatrix4("invViewProjMatrix",activeCamera.getInverseViewProjectionMatrix(),true);
  }
  if (renderingConfig.isInscattering()) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    dynamicFBM.bindFboColorTexture(SkyBandsNode.SKY_BAND_1_URN);
    program.setInt("texSceneSkyBand",texId++,true);
    Vector4f skyInscatteringSettingsFrag=new Vector4f();
    skyInscatteringSettingsFrag.y=skyInscatteringStrength;
    skyInscatteringSettingsFrag.z=skyInscatteringLength;
    skyInscatteringSettingsFrag.w=skyInscatteringThreshold;
    program.setFloat4("skyInscatteringSettingsFrag",skyInscatteringSettingsFrag,true);
  }
}
