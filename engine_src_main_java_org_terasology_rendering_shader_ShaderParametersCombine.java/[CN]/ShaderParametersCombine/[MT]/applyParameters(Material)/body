{
  super.applyParameters(program);
  int texId=0;
  LwjglRenderingProcess renderingProcess=CoreRegistry.get(LwjglRenderingProcess.class);
  FBO sceneOpaque=renderingProcess.getFBO("sceneOpaque");
  if (sceneOpaque != null) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindTexture();
    program.setInt("texSceneOpaque",texId++,true);
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindDepthTexture();
    program.setInt("texSceneOpaqueDepth",texId++,true);
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindNormalsTexture();
    program.setInt("texSceneOpaqueNormals",texId++,true);
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindLightBufferTexture();
    program.setInt("texSceneOpaqueLightBuffer",texId++,true);
  }
  FBO sceneReflectiveRefractive=renderingProcess.getFBO("sceneReflectiveRefractive");
  if (sceneReflectiveRefractive != null) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneReflectiveRefractive.bindTexture();
    program.setInt("texSceneReflectiveRefractive",texId++,true);
  }
  if (CoreRegistry.get(Config.class).getRendering().isLocalReflections()) {
    if (sceneReflectiveRefractive != null) {
      GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
      sceneReflectiveRefractive.bindNormalsTexture();
      program.setInt("texSceneReflectiveRefractiveNormals",texId++,true);
    }
    Camera activeCamera=CoreRegistry.get(WorldRenderer.class).getActiveCamera();
    if (activeCamera != null) {
      program.setMatrix4("invProjMatrix",activeCamera.getInverseProjectionMatrix(),true);
      program.setMatrix4("projMatrix",activeCamera.getProjectionMatrix(),true);
    }
  }
  if (CoreRegistry.get(Config.class).getRendering().isSsao()) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    renderingProcess.bindFboTexture("ssaoBlurred");
    program.setInt("texSsao",texId++,true);
  }
  if (CoreRegistry.get(Config.class).getRendering().isOutline()) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    renderingProcess.bindFboTexture("sobel");
    program.setInt("texEdges",texId++,true);
    program.setFloat("outlineDepthThreshold",outlineDepthThreshold,true);
    program.setFloat("outlineThickness",outlineThickness,true);
  }
  if (CoreRegistry.get(Config.class).getRendering().isInscattering()) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    renderingProcess.bindFboTexture("sceneSkyBand1");
    program.setInt("texSceneSkyBand",texId++,true);
    Vector4f skyInscatteringSettingsFrag=new Vector4f();
    skyInscatteringSettingsFrag.y=skyInscatteringStrength;
    skyInscatteringSettingsFrag.z=skyInscatteringLength;
    skyInscatteringSettingsFrag.w=skyInscatteringThreshold;
    program.setFloat4("skyInscatteringSettingsFrag",skyInscatteringSettingsFrag,true);
  }
}
