{
  long timeStart=System.currentTimeMillis();
  final FastList<Chunk> dirtyChunks=new FastList<Chunk>(_parent.fetchVisibleChunks());
  for (int i=dirtyChunks.size() - 1; i >= 0; i--) {
    Chunk c=dirtyChunks.get(i);
    if (c == null) {
      dirtyChunks.remove(i);
      continue;
    }
    if (!(c.isDirty() || c.isFresh() || c.isLightDirty())) {
      dirtyChunks.remove(i);
    }
  }
  if (dirtyChunks.isEmpty()) {
    return;
  }
  Collections.sort(dirtyChunks);
  final Chunk chunkToProcess=dirtyChunks.getFirst();
  if (!_currentlyProcessedChunks.contains(chunkToProcess)) {
    _currentlyProcessedChunks.add(chunkToProcess);
    Thread t=new Thread(){
      @Override public void run(){
        while (_threadCount > Math.max(Runtime.getRuntime().availableProcessors() - 2,1)) {
synchronized (_currentlyProcessedChunks) {
            try {
              _currentlyProcessedChunks.wait();
            }
 catch (            InterruptedException e) {
            }
          }
        }
synchronized (_currentlyProcessedChunks) {
          _threadCount++;
        }
        processChunkUpdate(chunkToProcess);
        _currentlyProcessedChunks.remove(chunkToProcess);
synchronized (_currentlyProcessedChunks) {
          _threadCount--;
        }
synchronized (_currentlyProcessedChunks) {
          _currentlyProcessedChunks.notify();
        }
      }
    }
;
    t.start();
  }
  _chunkUpdateAmount=dirtyChunks.size();
  _meanUpdateDuration+=System.currentTimeMillis() - timeStart;
  _meanUpdateDuration/=2;
}
