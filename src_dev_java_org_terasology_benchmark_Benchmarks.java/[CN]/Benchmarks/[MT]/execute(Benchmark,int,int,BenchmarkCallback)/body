{
  if (callback != null) {
    callback.begin(benchmark,benchmarkIndex,benchmarkCount);
  }
  final BenchmarkResult result=new BasicBenchmarkResult(benchmark);
  final int[] repetitions=Preconditions.checkNotNull(benchmark.getRepetitions(),"Benchmark::getRepetitions() must not return null");
  Preconditions.checkState(repetitions.length > 0,"Benchmark::getRepetitions() must return an array of size greater than zero");
  try {
    benchmark.setup();
  }
 catch (  Exception e) {
    result.addError(BenchmarkError.Type.Setup,e);
    if (callback != null) {
      callback.error(BenchmarkError.Type.Setup,e,result);
    }
    return result;
  }
  try {
    if (callback != null) {
      callback.warmup(benchmark,false);
    }
    for (int i=0; i < benchmark.getWarmupRepetitions(); ++i) {
      benchmark.run();
    }
    if (callback != null) {
      callback.warmup(benchmark,true);
    }
  }
 catch (  Exception e) {
    result.addError(BenchmarkError.Type.Warmup,e);
    if (callback != null) {
      callback.error(BenchmarkError.Type.Warmup,e,result);
    }
    return result;
  }
  int repsTotal=0, repsSoFar=0;
  for (  int reps : repetitions) {
    repsTotal+=reps;
  }
  int repsPart=repsTotal / 20;
  int repIndex=0;
  boolean aborted=false;
  for (  int reps : repetitions) {
    try {
      benchmark.prerun();
    }
 catch (    Exception e) {
      aborted=true;
      result.addError(BenchmarkError.Type.PreRun,e);
      if (callback != null) {
        callback.error(BenchmarkError.Type.PreRun,e,result);
      }
      break;
    }
    long start=time(), elapsed=0;
    try {
      result.setStartTime(repIndex,TimeUnit.MILLISECONDS.convert(start,TimeUnit.NANOSECONDS));
      while (reps > repsPart) {
        for (int i=0; i < repsPart; ++i) {
          benchmark.run();
        }
        reps-=repsPart;
        repsSoFar+=repsPart;
        if (callback != null) {
          callback.progress(benchmark,100d / (double)repsTotal * (double)repsSoFar);
        }
      }
      if (reps <= repsPart) {
        for (int i=0; i < reps; ++i) {
          benchmark.run();
        }
        repsSoFar+=reps;
        if (callback != null) {
          callback.progress(benchmark,100d / (double)repsTotal * (double)repsSoFar);
        }
      }
      elapsed=elapsed(start,TimeUnit.NANOSECONDS);
      result.setRunTime(repIndex,TimeUnit.MILLISECONDS.convert(elapsed,TimeUnit.NANOSECONDS));
    }
 catch (    Exception e) {
      aborted=true;
      result.addError(BenchmarkError.Type.Run,e);
      if (callback != null) {
        callback.error(BenchmarkError.Type.Run,e,result);
      }
      break;
    }
    try {
      benchmark.postrun();
    }
 catch (    Exception e) {
      aborted=true;
      result.addError(BenchmarkError.Type.PostRun,e);
      if (callback != null) {
        callback.error(BenchmarkError.Type.PostRun,e,result);
      }
      break;
    }
    ++repIndex;
  }
  try {
    benchmark.finish(aborted);
  }
 catch (  Exception e) {
    result.addError(BenchmarkError.Type.Finish,e);
    if (callback != null) {
      callback.error(BenchmarkError.Type.Finish,e,result);
    }
  }
  if (callback != null) {
    if (result.isAborted()) {
      callback.aborted(result);
    }
 else {
      callback.success(result);
    }
  }
  return result;
}
