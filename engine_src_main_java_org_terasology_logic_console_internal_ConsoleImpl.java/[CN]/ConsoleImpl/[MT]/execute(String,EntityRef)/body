{
  if (command.length() == 0) {
    return false;
  }
  Client owner=networkSystem.getOwner(callingClient);
  if (owner != null && owner.isLocal()) {
    localCommandHistory.add(command);
  }
  String cleanedCommand=command.replaceAll("\\s\\s+"," ");
  int commandEndIndex=cleanedCommand.indexOf(" ");
  String commandName;
  if (commandEndIndex >= 0) {
    commandName=cleanedCommand.substring(0,commandEndIndex);
  }
 else {
    commandName=cleanedCommand;
    commandEndIndex=commandName.length();
  }
  String parameterPart=cleanedCommand.substring(commandEndIndex).trim();
  List<String> params=splitParameters(parameterPart);
  CommandInfo cmd=commandLookup.get(commandName,params.size());
  if (cmd == null) {
    if (commandLookup.containsRow(commandName)) {
      addMessage("Incorrect number of parameters. Try:");
      for (      CommandInfo ci : commandLookup.row(commandName).values()) {
        addMessage(ci.getUsageMessage());
      }
    }
 else {
      addMessage("Unknown command '" + commandName + "'");
    }
    return false;
  }
  if (cmd.isRunOnServer() && !networkSystem.getMode().isAuthority()) {
    String paramsStr=PARAMETER_JOINER.join(params);
    callingClient.send(new CommandEvent(commandName,paramsStr));
    return true;
  }
 else {
    try {
      String result=cmd.execute(params,callingClient);
      if (result != null && !result.isEmpty()) {
        if (callingClient.exists()) {
          callingClient.send(new ConsoleMessageEvent(result));
        }
 else {
          addMessage(result);
        }
      }
      return true;
    }
 catch (    Exception e) {
      addMessage(cmd.getUsageMessage());
      addMessage("Error executing command '" + commandName + "'.");
      logger.warn("Failed to execute command",e);
      return false;
    }
  }
}
