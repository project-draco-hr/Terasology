{
  Predicate<? super Method> predicate=Predicates.<Method>and(withModifier(Modifier.PUBLIC),ReflectionUtils.withAnnotation(Command.class));
  Set<Method> commandMethods=ReflectionUtils.getAllMethods(provider.getClass(),predicate);
  if (!commandMethods.isEmpty()) {
    for (    Method method : commandMethods) {
      CommandInfo command=new CommandInfo(method,provider);
      String commandName=command.getName();
      if (isCommandRegistered(command)) {
        logger.warn("Command already registered the same name ({}), parameter count ({}) and varargs policy ({}), skipping",commandName,command.getRequiredParameterCount(),command.endsWithVarargs());
      }
 else {
        commands.add(command);
        TreeMultiset<CommandInfo> cmdList=commandRegistry.get(commandName);
        if (cmdList == null)         commandRegistry.put(commandName,cmdList=TreeMultiset.create());
        cmdList.add(command);
      }
    }
    commandsSorted=false;
  }
}
