{
  dispose();
  shader=(GLSLShader)data.getShader();
  shaderPrograms.put(0,shader.linkShaderProgram(0));
  for (  Set<ShaderProgramFeature> permutation : Sets.powerSet(shader.getAvailableFeatures())) {
    int featureMask=ShaderProgramFeature.getBitset(permutation);
    shaderPrograms.put(featureMask,shader.linkShaderProgram(featureMask));
  }
  for (  Map.Entry<String,Texture> entry : data.getTextures().entrySet()) {
    setTexture(entry.getKey(),entry.getValue());
  }
  for (  Map.Entry<String,Float> entry : data.getFloatParams().entrySet()) {
    setFloat(entry.getKey(),entry.getValue());
  }
  for (  Map.Entry<String,Integer> entry : data.getIntegerParams().entrySet()) {
    setInt(entry.getKey(),entry.getValue());
  }
  for (  Map.Entry<String,float[]> entry : data.getFloatArrayParams().entrySet()) {
switch (entry.getValue().length) {
case 1:
      setFloat(entry.getKey(),entry.getValue()[0]);
    break;
case 2:
  setFloat2(entry.getKey(),entry.getValue()[0],entry.getValue()[1]);
break;
case 3:
setFloat3(entry.getKey(),entry.getValue()[0],entry.getValue()[1],entry.getValue()[2]);
break;
case 4:
setFloat4(entry.getKey(),entry.getValue()[0],entry.getValue()[1],entry.getValue()[2],entry.getValue()[3]);
break;
}
}
}
