{
  if (calculatingPermission.get() != null) {
    return;
  }
  if (allowedPermissions.contains(perm.getClass())) {
    return;
  }
  if (allowedInstances.contains(perm)) {
    return;
  }
  calculatingPermission.set(true);
  try {
    Class[] classes=getClassContext();
    for (int i=0; i < classes.length; ++i) {
      if (apiClasses.contains(classes[i]) || (classes[i].getPackage() != null && apiPackages.contains(classes[i].getPackage().getName()))) {
        return;
      }
      ClassLoader owningLoader=classes[i].getClassLoader();
      if (owningLoader != null && owningLoader instanceof ModuleClassLoader) {
        if (i - 1 > 0) {
          throw new AccessControlException(String.format("Module class '%s' calling into '%s' requiring permission '%s'",classes[i].getName(),classes[i - 1].getName(),perm));
        }
 else {
          throw new AccessControlException(String.format("Module class '%s' requiring permission '%s'",classes[i].getName(),perm));
        }
      }
    }
  }
  finally {
    calculatingPermission.set(null);
  }
}
