{
  deleteFBO(title);
  FBO fbo=new FBO();
  fbo.width=width;
  fbo.height=height;
  fbo.fboId=EXTFramebufferObject.glGenFramebuffersEXT();
  EXTFramebufferObject.glBindFramebufferEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT,fbo.fboId);
  if (type != FBOType.NO_COLOR) {
    fbo.textureId=GL11.glGenTextures();
    GL11.glBindTexture(GL11.GL_TEXTURE_2D,fbo.textureId);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_MAG_FILTER,GL11.GL_LINEAR);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_MIN_FILTER,GL11.GL_LINEAR);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_WRAP_S,GL12.GL_CLAMP_TO_EDGE);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_WRAP_T,GL12.GL_CLAMP_TO_EDGE);
    if (type == FBOType.HDR) {
      GL11.glTexImage2D(GL11.GL_TEXTURE_2D,0,ARBTextureFloat.GL_RGBA16F_ARB,width,height,0,GL11.GL_RGBA,ARBHalfFloatPixel.GL_HALF_FLOAT_ARB,(java.nio.ByteBuffer)null);
    }
 else {
      GL11.glTexImage2D(GL11.GL_TEXTURE_2D,0,GL11.GL_RGBA,width,height,0,GL11.GL_RGBA,GL11.GL_UNSIGNED_BYTE,(java.nio.ByteBuffer)null);
    }
    EXTFramebufferObject.glFramebufferTexture2DEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT,EXTFramebufferObject.GL_COLOR_ATTACHMENT0_EXT,GL11.GL_TEXTURE_2D,fbo.textureId,0);
  }
  if (normalBuffer) {
    fbo.normalsTextureId=GL11.glGenTextures();
    GL11.glBindTexture(GL11.GL_TEXTURE_2D,fbo.normalsTextureId);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_MAG_FILTER,GL11.GL_LINEAR);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_MIN_FILTER,GL11.GL_LINEAR);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_WRAP_S,GL12.GL_CLAMP_TO_EDGE);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_WRAP_T,GL12.GL_CLAMP_TO_EDGE);
    GL11.glTexImage2D(GL11.GL_TEXTURE_2D,0,GL11.GL_RGBA,width,height,0,GL11.GL_RGBA,GL11.GL_UNSIGNED_BYTE,(java.nio.ByteBuffer)null);
    EXTFramebufferObject.glFramebufferTexture2DEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT,EXTFramebufferObject.GL_COLOR_ATTACHMENT1_EXT,GL11.GL_TEXTURE_2D,fbo.normalsTextureId,0);
  }
  if (lightBuffer) {
    fbo.lightBufferTextureId=GL11.glGenTextures();
    GL11.glBindTexture(GL11.GL_TEXTURE_2D,fbo.lightBufferTextureId);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_MAG_FILTER,GL11.GL_LINEAR);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_MIN_FILTER,GL11.GL_LINEAR);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_WRAP_S,GL12.GL_CLAMP_TO_EDGE);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_WRAP_T,GL12.GL_CLAMP_TO_EDGE);
    if (type == FBOType.HDR) {
      GL11.glTexImage2D(GL11.GL_TEXTURE_2D,0,ARBTextureFloat.GL_RGBA16F_ARB,width,height,0,GL11.GL_RGBA,ARBHalfFloatPixel.GL_HALF_FLOAT_ARB,(java.nio.ByteBuffer)null);
    }
 else {
      GL11.glTexImage2D(GL11.GL_TEXTURE_2D,0,GL11.GL_RGBA,width,height,0,GL11.GL_RGBA,GL11.GL_UNSIGNED_BYTE,(java.nio.ByteBuffer)null);
    }
    EXTFramebufferObject.glFramebufferTexture2DEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT,EXTFramebufferObject.GL_COLOR_ATTACHMENT2_EXT,GL11.GL_TEXTURE_2D,fbo.lightBufferTextureId,0);
  }
  if (depthBuffer) {
    fbo.depthStencilTextureId=GL11.glGenTextures();
    GL11.glBindTexture(GL11.GL_TEXTURE_2D,fbo.depthStencilTextureId);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_MAG_FILTER,GL11.GL_NEAREST);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_MIN_FILTER,GL11.GL_NEAREST);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_WRAP_S,GL12.GL_CLAMP_TO_EDGE);
    GL11.glTexParameterf(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_WRAP_T,GL12.GL_CLAMP_TO_EDGE);
    if (!stencilBuffer) {
      GL11.glTexImage2D(GL11.GL_TEXTURE_2D,0,GL14.GL_DEPTH_COMPONENT24,width,height,0,GL11.GL_DEPTH_COMPONENT,GL11.GL_UNSIGNED_INT,(java.nio.ByteBuffer)null);
    }
 else {
      GL11.glTexImage2D(GL11.GL_TEXTURE_2D,0,EXTPackedDepthStencil.GL_DEPTH24_STENCIL8_EXT,width,height,0,EXTPackedDepthStencil.GL_DEPTH_STENCIL_EXT,EXTPackedDepthStencil.GL_UNSIGNED_INT_24_8_EXT,(java.nio.ByteBuffer)null);
    }
    fbo.depthStencilRboId=EXTFramebufferObject.glGenRenderbuffersEXT();
    EXTFramebufferObject.glBindRenderbufferEXT(EXTFramebufferObject.GL_RENDERBUFFER_EXT,fbo.depthStencilRboId);
    if (!stencilBuffer) {
      EXTFramebufferObject.glRenderbufferStorageEXT(EXTFramebufferObject.GL_RENDERBUFFER_EXT,GL14.GL_DEPTH_COMPONENT24,width,height);
    }
 else {
      EXTFramebufferObject.glRenderbufferStorageEXT(EXTFramebufferObject.GL_RENDERBUFFER_EXT,EXTPackedDepthStencil.GL_DEPTH24_STENCIL8_EXT,width,height);
    }
    EXTFramebufferObject.glBindRenderbufferEXT(EXTFramebufferObject.GL_RENDERBUFFER_EXT,0);
    EXTFramebufferObject.glFramebufferRenderbufferEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT,EXTFramebufferObject.GL_DEPTH_ATTACHMENT_EXT,EXTFramebufferObject.GL_RENDERBUFFER_EXT,fbo.depthStencilRboId);
    EXTFramebufferObject.glFramebufferTexture2DEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT,EXTFramebufferObject.GL_DEPTH_ATTACHMENT_EXT,GL11.GL_TEXTURE_2D,fbo.depthStencilTextureId,0);
    if (stencilBuffer) {
      EXTFramebufferObject.glFramebufferTexture2DEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT,EXTFramebufferObject.GL_STENCIL_ATTACHMENT_EXT,GL11.GL_TEXTURE_2D,fbo.depthStencilTextureId,0);
    }
  }
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,0);
  IntBuffer bufferIds=BufferUtils.createIntBuffer(3);
  if (type != FBOType.NO_COLOR) {
    bufferIds.put(EXTFramebufferObject.GL_COLOR_ATTACHMENT0_EXT);
  }
  if (normalBuffer) {
    bufferIds.put(EXTFramebufferObject.GL_COLOR_ATTACHMENT1_EXT);
  }
  if (lightBuffer) {
    bufferIds.put(EXTFramebufferObject.GL_COLOR_ATTACHMENT2_EXT);
  }
  bufferIds.flip();
  if (bufferIds.limit() == 0) {
    GL11.glReadBuffer(GL11.GL_NONE);
    GL20.glDrawBuffers(GL11.GL_NONE);
  }
 else {
    GL20.glDrawBuffers(bufferIds);
  }
  int checkFB=EXTFramebufferObject.glCheckFramebufferStatusEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT);
switch (checkFB) {
case EXTFramebufferObject.GL_FRAMEBUFFER_COMPLETE_EXT:
    break;
case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT:
  logger.error("FrameBuffer: " + title + ", has caused a GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT exception");
break;
case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT:
logger.error("FrameBuffer: " + title + ", has caused a GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT exception");
break;
case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT:
logger.error("FrameBuffer: " + title + ", has caused a GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT exception");
break;
case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT:
logger.error("FrameBuffer: " + title + ", has caused a GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT exception");
break;
case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT:
logger.error("FrameBuffer: " + title + ", has caused a GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT exception");
break;
case EXTFramebufferObject.GL_FRAMEBUFFER_UNSUPPORTED_EXT:
logger.error("FrameBuffer: " + title + ", has caused a GL_FRAMEBUFFER_UNSUPPORTED_EXT exception");
break;
case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT:
logger.error("FrameBuffer: " + title + ", has caused a GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT exception");
if (type == FBOType.NO_COLOR) {
logger.error("FrameBuffer: " + title + ", ...but the FBOType was NO_COLOR, ignoring this error and continuing without this FBO.");
return null;
}
break;
default :
logger.error("Unexpected reply from glCheckFramebufferStatusEXT: " + checkFB);
break;
}
EXTFramebufferObject.glBindFramebufferEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT,0);
FBOs.put(title,fbo);
return fbo;
}
