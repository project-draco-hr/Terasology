{
  float[][] distArr=initDist(fromWhat);
  float currentDistance=0;
  System.out.println("Starting distance calculation: " + fromWhat);
  while (currentDistance < size) {
    for (int width=0; width < size; width++) {
      for (int height=0; height < size; height++) {
        float currHeight=heightmap[width][height];
        if (distArr[width][height] == size) {
          if (distArr[(width + 1) % size][height] + (heightmap[(width + 1) % size][height] - currHeight) * heightInfluence - currentDistance <= 0 || distArr[width][(height + 1) % size] + (heightmap[width][(height + 1) % size] - currHeight) * heightInfluence - currentDistance <= 0 || distArr[(width - 1 + size) % size][height] + (heightmap[(width - 1 + size) % size][height] - currHeight) * heightInfluence - currentDistance <= 0 || distArr[width][(height - 1 + size) % size] + (heightmap[width][(height - 1 + size) % size] - currHeight) * heightInfluence - currentDistance <= 0) {
            distArr[width][height]=currentDistance + 1;
          }
 else           if (distArr[(width + 1) % size][(height + 1) % size] + (heightmap[(width + 1) % size][(height + 1) % size] - currHeight) * heightInfluence - (currentDistance + 0.41421) <= 0 || distArr[(width - 1 + size) % size][(height + 1) % size] + (heightmap[(width - 1 + size) % size][(height + 1) % size] - currHeight) * heightInfluence - (currentDistance + 0.41421) <= 0 || distArr[(width + 1) % size][(height - 1 + size) % size] + (heightmap[(width + 1) % size][(height - 1 + size) % size] - currHeight) * heightInfluence - (currentDistance + 0.41421) <= 0 || distArr[(width - 1 + size) % size][(height - 1 + size) % size] + (heightmap[(width - 1 + size) % size][(height - 1 + size) % size] - currHeight) * heightInfluence - (currentDistance + 0.41421) <= 0) {
            distArr[width][height]=currentDistance + 1.41421f;
          }
        }
      }
    }
    currentDistance++;
  }
  float max=0;
  for (int width=0; width < size; width++) {
    for (int height=0; height < size; height++) {
      max=distArr[width][height] > max ? distArr[width][height] : max;
    }
  }
  for (int width=0; width < size; width++) {
    for (int height=0; height < size; height++) {
      distArr[width][height]/=max;
    }
  }
  if (fromWhat.equals("equator")) {
    for (int width=0; width < size; width++) {
      for (int height=0; height < size; height++) {
        distArr[width][height]=1 - distArr[width][height];
      }
    }
  }
  return distArr;
}
