{
  LocalPlayerComponent localPlayerComp=localPlayer.getEntity().getComponent(LocalPlayerComponent.class);
  CharacterMovementComponent characterMovement=localPlayer.getEntity().getComponent(CharacterMovementComponent.class);
  if (characterMovement.isRunning && cameraTargetSystem.getTarget().getComponent(CraftingActionComponent.class) != null) {
    InventoryComponent inventory=localPlayer.getEntity().getComponent(InventoryComponent.class);
    UIItemContainer toolbar=(UIItemContainer)CoreRegistry.get(GUIManager.class).getWindowById("hud").getElementById("toolbar");
    int slotStart=toolbar.getSlotStart();
    int slotEnd=toolbar.getSlotEnd();
    slotStart-=10;
    slotEnd-=10;
    if (slotStart < -1) {
      slotStart=inventory.itemSlots.size() - 10;
      slotEnd=inventory.itemSlots.size() - 1;
    }
    if (slotStart < 0) {
      slotStart=0;
    }
    toolbar.setEntity(localPlayer.getEntity(),slotStart,slotEnd);
    toolbarChanged=true;
    showSmallInventory((slotEnd + 1) / 10);
  }
 else {
    localPlayerComp.selectedTool=(localPlayerComp.selectedTool - 1) % 10;
    if (localPlayerComp.selectedTool < 0) {
      localPlayerComp.selectedTool=10 + localPlayerComp.selectedTool;
    }
  }
  localPlayer.getEntity().saveComponent(localPlayerComp);
  if (cameraTargetSystem.getTarget().hasComponent(CraftingActionComponent.class)) {
    cameraTargetSystem.getTarget().send(new CheckRefinementEvent(cameraTargetSystem.getTarget(),entity));
  }
  event.consume();
}
