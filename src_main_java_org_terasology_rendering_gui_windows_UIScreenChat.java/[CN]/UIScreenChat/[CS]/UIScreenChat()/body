{
  commandManager=CoreRegistry.get(CommandManager.class);
  setCloseKeys(new int[]{Keyboard.KEY_ESCAPE});
  setCloseBinds(new String[]{"engine:console"});
  setId("chat");
  setModal(true);
  maximize();
  inputBox=new UIText();
  inputBox.setSize(new Vector2f(900f,28f));
  inputBox.setBackgroundColor(new Color(255,255,255,200));
  inputBox.setVerticalAlign(EVerticalAlign.BOTTOM);
  inputBox.setSelectionColor(Color.gray);
  inputBox.setPosition(new Vector2f(2,-2));
  inputBox.setVisible(true);
  inputBox.addKeyListener(new KeyListener(){
    @Override public void key(    UIDisplayElement element,    KeyEvent event){
      if (event.isDown()) {
        if (event.getKey() == Keyboard.KEY_RETURN) {
          String message=inputBox.getText().trim();
          inputBox.deleteText();
          addHistory(message);
          if (message.startsWith(commandPrefix)) {
            message=message.substring(1);
            commandManager.execute(message);
          }
 else {
            CoreRegistry.get(LocalPlayer.class).getClientEntity().send(new SendChatMessage(message));
          }
        }
 else         if (event.getKey() == Keyboard.KEY_UP) {
          moveHistory(+1);
          inputBox.setText(getHistory());
          inputBox.setCursorEnd();
        }
 else         if (event.getKey() == Keyboard.KEY_DOWN) {
          moveHistory(-1);
          inputBox.setText(getHistory());
          inputBox.setCursorEnd();
        }
 else         if (event.getKey() == Keyboard.KEY_TAB) {
          String message=inputBox.getText().trim();
          if (message.startsWith(commandPrefix)) {
            String commandName=message.substring(1);
            List<CommandInfo> commands=commandManager.getCommandList();
            List<CommandInfo> matches=new ArrayList<CommandInfo>();
            for (            CommandInfo cmd : commands) {
              if (cmd.getName().regionMatches(0,commandName,0,commandName.length())) {
                matches.add(cmd);
              }
            }
            if (matches.size() == 1) {
              inputBox.setText(commandPrefix + matches.get(0).getName());
              inputBox.setCursorEnd();
            }
 else             if (matches.size() > 1) {
              String commandMatches="";
              for (              CommandInfo cmd : matches) {
                if (!commandMatches.isEmpty()) {
                  commandMatches+=" ";
                }
                commandMatches+=cmd.getName();
              }
              MessageManager.getInstance().addMessage(commandMatches);
            }
          }
        }
      }
    }
  }
);
  setFocus(inputBox);
  messageList=new UIList();
  messageList.setSize(new Vector2f(900f,400f));
  messageList.setBackgroundColor(new Color(255,255,255,200));
  messageList.setShadow(new Vector4f(0f,3f,3f,0f),EShadowDirection.OUTSIDE,1f);
  messageList.setBorderSolid(new Vector4f(1f,1f,1f,1f),new Color(0,0,0));
  messageList.setVerticalAlign(EVerticalAlign.BOTTOM);
  messageList.setPosition(new Vector2f(2,-32));
  messageList.setPadding(new Vector4f(0f,5f,0f,5f));
  messageList.setDisabled(true);
  messageList.setVisible(true);
  addDisplayElement(inputBox);
  addDisplayElement(messageList);
  for (  Message message : MessageManager.getInstance()) {
    addHistory(message.getMessage());
  }
  MessageManager.getInstance().subscribe(chatSubscription);
  startMessage();
}
