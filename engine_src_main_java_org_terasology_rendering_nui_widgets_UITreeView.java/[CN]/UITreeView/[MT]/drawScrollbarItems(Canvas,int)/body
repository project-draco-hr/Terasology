{
  Border itemMargin=canvas.getCurrentStyle().getMargin();
  int scrollbarWidth=canvas.calculateRestrictedSize(verticalBar,new Vector2i(canvas.size().x,canvas.size().y)).x;
  int scrollbarHeight=canvas.size().y - itemMargin.getTotalHeight();
  int availableWidth=canvas.size().x - scrollbarWidth;
  int scrollbarXPosition=canvas.size().x - scrollbarWidth - itemMargin.getRight();
  int scrollbarYPosition=itemMargin.getTop();
  Rect2i scrollableArea=Rect2i.createFromMinAndSize(0,0,canvas.size().x,canvas.size().y);
  Rect2i scrollbarRegion=Rect2i.createFromMinAndSize(scrollbarXPosition,scrollbarYPosition,scrollbarWidth,scrollbarHeight);
  canvas.drawWidget(verticalBar,scrollbarRegion);
  int maxScrollbarRange=itemHeight * (model.get().getElementCount() - maxDisplayedElements.get()) + itemMargin.getBottom();
  verticalBar.setRange(maxScrollbarRange);
  for (int i=0; i < model.get().getElementCount(); i++) {
    Tree<T> item=model.get().getElement(i);
    TreeInteractionListener listener=itemListeners.get(i);
    handleListeners(canvas,item,listener);
    Rect2i itemRegion=Rect2i.createFromMinAndSize(item.getDepth() * itemIndent.get(),i * itemHeight - verticalBar.getValue(),availableWidth - item.getDepth() * itemIndent.get(),itemHeight);
    try (SubRegion ignored=canvas.subRegion(scrollableArea,true)){
      drawItem(canvas,itemRegion,item,listener);
    }
   }
}
