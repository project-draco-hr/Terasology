{
  for (  EntityRef entity : entityManager.iteratorEntities(SimpleMinionAIComponent.class,CharacterMovementComponent.class,LocationComponent.class,MinionComponent.class)) {
    LocationComponent location=entity.getComponent(LocationComponent.class);
    SimpleMinionAIComponent ai=entity.getComponent(SimpleMinionAIComponent.class);
    MinionComponent minioncomp=entity.getComponent(MinionComponent.class);
    Vector3f worldPos=new Vector3f(location.getWorldPosition());
    Vector3f drive=new Vector3f();
    LocalPlayer localPlayer=CoreRegistry.get(LocalPlayer.class);
    if (localPlayer != null) {
switch (minioncomp.minionBehaviour) {
case Follow:
{
          executeFollowAI(worldPos,localPlayer,ai,entity,drive);
          break;
        }
case Gather:
{
        executeGatherAI(worldPos,ai,entity,drive);
        break;
      }
case Move:
{
      executeMoveAI(worldPos,ai,entity,drive);
      break;
    }
case Patrol:
{
    executePatrolAI(worldPos,ai,entity,drive);
    break;
  }
case Test:
{
  executeTestAI(worldPos,ai,localPlayer,entity,drive);
  break;
}
default :
{
break;
}
}
}
float yaw=0;
if (drive.x * drive.x + drive.y * drive.y > 0.01f) {
yaw=(float)Math.atan2(drive.x,drive.z);
}
entity.send(new CharacterMoveInputEvent(0,yaw,drive,false,false));
}
}
