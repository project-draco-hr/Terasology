{
  for (  EntityRef fadingLight : entityManager.getEntitiesWith(LightFadeComponent.class,LightComponent.class)) {
    LightFadeComponent fade=fadingLight.getComponent(LightFadeComponent.class);
    LightComponent light=fadingLight.getComponent(LightComponent.class);
    float ambientChange=delta * fade.ambientFadeRate;
    float diffuseChange=delta * fade.diffuseFadeRate;
    boolean incomplete=false;
    if (Math.abs(fade.targetAmbientIntensity - light.lightAmbientIntensity) < ambientChange) {
      light.lightAmbientIntensity=fade.targetAmbientIntensity;
    }
 else     if (light.lightAmbientIntensity < fade.targetAmbientIntensity) {
      light.lightAmbientIntensity+=ambientChange;
      incomplete=true;
    }
 else {
      light.lightAmbientIntensity-=ambientChange;
      incomplete=true;
    }
    if (Math.abs(fade.targetDiffuseIntensity - light.lightDiffuseIntensity) < diffuseChange) {
      light.lightDiffuseIntensity=fade.targetDiffuseIntensity;
    }
 else     if (light.lightDiffuseIntensity < fade.targetDiffuseIntensity) {
      light.lightDiffuseIntensity+=diffuseChange;
      incomplete=true;
    }
 else {
      light.lightDiffuseIntensity-=diffuseChange;
      incomplete=true;
    }
    if (incomplete) {
      fadingLight.saveComponent(light);
    }
 else {
      if (fade.removeLightAfterFadeComplete) {
        fadingLight.removeComponent(LightComponent.class);
      }
 else {
        fadingLight.saveComponent(light);
      }
      fadingLight.removeComponent(LightFadeComponent.class);
    }
  }
}
