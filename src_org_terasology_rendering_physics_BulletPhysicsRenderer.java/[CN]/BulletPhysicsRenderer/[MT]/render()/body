{
  _discreteDynamicsWorld.stepSimulation(Terasology.getInstance().getDelta() / 1000f);
  TextureManager.getInstance().bindTexture("terrain");
  ShaderManager.getInstance().enableShader("block");
  FloatBuffer colorBuffer=BufferUtils.createFloatBuffer(3);
  colorBuffer.put(1).put(1).put(1);
  colorBuffer.flip();
  int textured=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("block"),"textured");
  GL20.glUniform1i(textured,1);
  int colorOffset=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("block"),"colorOffset");
  GL20.glUniform3(colorOffset,colorBuffer);
  int lightRef=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("block"),"light");
  Player player=Terasology.getInstance().getActiveWorldRenderer().getPlayer();
  FloatBuffer mBuffer=BufferUtils.createFloatBuffer(16);
  float[] mFloat=new float[16];
  GL11.glPushMatrix();
  GL11.glTranslated(-player.getPosition().x,-player.getPosition().y,-player.getPosition().z);
  for (  BlockRigidBody b : _blocks) {
    Transform t=new Transform();
    b.getMotionState().getWorldTransform(t);
    t.getOpenGLMatrix(mFloat);
    mBuffer.put(mFloat);
    mBuffer.flip();
    GL11.glPushMatrix();
    GL11.glMultMatrix(mBuffer);
    GL11.glScalef(0.5f,0.5f,0.5f);
    float lightValue=Terasology.getInstance().getActiveWorldRenderer().getRenderingLightValueAt(new Vector3d(t.origin));
    GL20.glUniform1f(lightRef,lightValue);
    BlockManager.getInstance().getBlock(b.getType()).render();
    GL11.glPopMatrix();
  }
  GL11.glPopMatrix();
  ShaderManager.getInstance().enableShader(null);
}
