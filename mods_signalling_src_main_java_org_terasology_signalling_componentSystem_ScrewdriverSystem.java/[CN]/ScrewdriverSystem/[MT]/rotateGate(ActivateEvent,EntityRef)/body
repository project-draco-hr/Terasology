{
  final EntityRef target=event.getTarget();
  if (target.hasComponent(SignalGateComponent.class)) {
    final Vector3i targetLocation=new Vector3i(event.getTargetLocation());
    final Block block=worldProvider.getBlock(targetLocation);
    final BlockFamily blockFamily=block.getBlockFamily();
    if (blockFamily instanceof OneCrucialSideFamily) {
      final OneCrucialSideFamily gateBlockFamily=(OneCrucialSideFamily)blockFamily;
      final Side currentSide=gateBlockFamily.getBlockSide(block);
      final Side newSide=sideOrder.get(currentSide);
      if (worldProvider.setBlock(targetLocation,gateBlockFamily.getBlockForSide(newSide),block)) {
        final EntityRef gateEntity=blockEntityRegistry.getBlockEntityAt(targetLocation);
        final SignalProducerComponent signalProducer=gateEntity.getComponent(SignalProducerComponent.class);
        final SignalConsumerComponent signalConsumer=gateEntity.getComponent(SignalConsumerComponent.class);
        signalConsumer.connectionSides=0;
        gateEntity.saveComponent(signalConsumer);
        final byte newSideBit=SideBitFlag.getSide(newSide);
        signalProducer.connectionSides=newSideBit;
        signalConsumer.connectionSides=(byte)(63 - newSideBit);
        gateEntity.saveComponent(signalProducer);
        gateEntity.saveComponent(signalConsumer);
        if (newSide != Side.FRONT) {
          gateEntity.addComponent(new SignalGateRotatedComponent());
        }
      }
    }
  }
}
