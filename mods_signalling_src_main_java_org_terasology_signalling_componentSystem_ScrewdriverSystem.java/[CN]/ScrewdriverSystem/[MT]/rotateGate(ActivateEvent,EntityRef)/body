{
  final EntityRef target=event.getTarget();
  if (target.hasComponent(SignalGateComponent.class)) {
    final Vector3i targetLocation=new Vector3i(event.getTargetLocation());
    final Block block=worldProvider.getBlock(targetLocation);
    final BlockFamily blockFamily=block.getBlockFamily();
    if (blockFamily instanceof SideDefinedBlockFamily) {
      final SideDefinedBlockFamily sideDefinedBlockFamily=(SideDefinedBlockFamily)blockFamily;
      Side newSide=block.getDirection();
      Block blockForSide;
      do {
        newSide=sideOrder.get(newSide);
        blockForSide=sideDefinedBlockFamily.getBlockForSide(newSide);
      }
 while (blockForSide == null);
      if (worldProvider.setBlock(targetLocation,blockForSide,block)) {
        final EntityRef gateEntity=blockEntityRegistry.getBlockEntityAt(targetLocation);
        final SignalProducerComponent signalProducer=gateEntity.getComponent(SignalProducerComponent.class);
        final SignalConsumerComponent signalConsumer=gateEntity.getComponent(SignalConsumerComponent.class);
        signalConsumer.connectionSides=0;
        gateEntity.saveComponent(signalConsumer);
        final byte newSideBit=SideBitFlag.getSide(newSide);
        signalProducer.connectionSides=newSideBit;
        signalConsumer.connectionSides=(byte)(63 - newSideBit);
        gateEntity.saveComponent(signalProducer);
        gateEntity.saveComponent(signalConsumer);
        if (newSide == Side.FRONT) {
          gateEntity.removeComponent(SignalGateRotatedComponent.class);
        }
 else         if (!gateEntity.hasComponent(SignalGateRotatedComponent.class)) {
          gateEntity.addComponent(new SignalGateRotatedComponent());
        }
      }
    }
  }
}
