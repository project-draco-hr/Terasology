{
  String constructorClassName=type.getName() + "_ReflectConstructor";
  try {
    return (ObjectConstructor<T>)type.getClassLoader().loadClass(constructorClassName).getConstructor().newInstance();
  }
 catch (  ClassNotFoundException ignored) {
    try {
      if (Modifier.isPrivate(type.getDeclaredConstructor().getModifiers())) {
        logger.warn("Constructor for '{}' exists but is private, falling back on reflection",type);
        return backupFactory.createConstructor(type);
      }
      CtClass constructorClass=pool.makeClass(type.getName() + "_ReflectConstructor");
      constructorClass.setInterfaces(new CtClass[]{objectConstructorInterface});
      CtMethod method=CtNewMethod.make("public Object construct() { return new " + type.getName() + "();}",constructorClass);
      constructorClass.addMethod(method);
      return (ObjectConstructor<T>)(constructorClass.toClass(type.getClassLoader(),type.getProtectionDomain()).getConstructor().newInstance());
    }
 catch (    InstantiationException|IllegalAccessException|InvocationTargetException|CannotCompileException e) {
      logger.error("Error instantiating constructor object for '{}', falling back on reflection",type,e);
      return backupFactory.createConstructor(type);
    }
catch (    NoSuchMethodException e) {
      return null;
    }
  }
catch (  InvocationTargetException|InstantiationException|IllegalAccessException e) {
    logger.error("Error instantiating constructor object for '{}', falling back on reflection",type,e);
    return backupFactory.createConstructor(type);
  }
}
