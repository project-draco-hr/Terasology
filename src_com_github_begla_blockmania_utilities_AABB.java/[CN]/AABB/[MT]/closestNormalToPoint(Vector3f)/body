{
  Vector3f[] sides=new Vector3f[6];
  sides[0]=VectorPool.getVector(_position.x,_position.y + _dimensions.y,_position.z);
  sides[1]=VectorPool.getVector(_position.x - _dimensions.x,_position.y,_position.z);
  sides[2]=VectorPool.getVector(_position.x + _dimensions.x,_position.y,_position.z);
  sides[3]=VectorPool.getVector(_position.x,_position.y - _dimensions.y,_position.z);
  sides[4]=VectorPool.getVector(_position.x,_position.y,_position.z + _dimensions.z);
  sides[5]=VectorPool.getVector(_position.x,_position.y,_position.z - _dimensions.z);
  int closestSideIndex=-1;
  float closestSideDistance=Integer.MAX_VALUE;
  for (int i=sides.length - 1; i >= 0; i--) {
    Vector3f sideToPoint=Vector3f.sub(point,sides[i],null);
    float distance=sideToPoint.length();
    if (distance < closestSideDistance) {
      closestSideDistance=distance;
      closestSideIndex=i;
    }
  }
switch (closestSideIndex) {
case 0:
    return VectorPool.getVector(0,1,0);
case 1:
  return VectorPool.getVector(1,0,0);
case 2:
return VectorPool.getVector(-1,0,0);
case 3:
return VectorPool.getVector(0,-1,0);
case 4:
return VectorPool.getVector(0,0,1);
case 5:
return VectorPool.getVector(0,0,-1);
}
return VectorPool.getVector();
}
