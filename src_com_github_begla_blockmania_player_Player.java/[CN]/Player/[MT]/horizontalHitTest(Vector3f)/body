{
  boolean result=false;
  FastList<BlockPosition> blockPositions=gatherAdjacentBlockPositions(origin);
  for (FastList.Node<BlockPosition> n=blockPositions.head(), end=blockPositions.tail(); (n=n.getNext()) != end; ) {
    byte blockType1=_parent.getBlockAtPosition(VectorPool.getVector(n.getValue().x,n.getValue().y,n.getValue().z));
    if (!Block.getBlockForType(blockType1).isPenetrable()) {
      if (getAABB().overlaps(Block.AABBForBlockAt(n.getValue().x,n.getValue().y,n.getValue().z))) {
        result=true;
        Vector3f normal=Block.AABBForBlockAt(n.getValue().x,n.getValue().y,n.getValue().z).closestNormalToPoint(origin);
        Vector3f slideVector=Vector3f.cross(normal,VectorPool.getVector(0,1,0),null);
        Vector3f direction=VectorPool.getVector(_position.x,0f,_position.z);
        direction.x-=origin.x;
        direction.z-=origin.z;
        float length=Vector3f.dot(slideVector,direction) * 2;
        _position.z=origin.z + length * slideVector.z;
        _position.x=origin.x + length * slideVector.x;
        VectorPool.putVector(normal);
        VectorPool.putVector(slideVector);
        VectorPool.putVector(direction);
      }
    }
  }
  return result;
}
