{
  if (json.isJsonPrimitive()) {
    JsonPrimitive primitive=json.getAsJsonPrimitive();
    if (primitive.isBoolean()) {
      return new JsonTree(new JsonTreeNode(name,json.getAsBoolean(),JsonTreeNode.ElementType.PRIMITIVE));
    }
 else     if (primitive.isNumber()) {
      return new JsonTree(new JsonTreeNode(name,json.getAsNumber(),JsonTreeNode.ElementType.PRIMITIVE));
    }
 else     if (primitive.isString()) {
      return new JsonTree(new JsonTreeNode(name,json.getAsString(),JsonTreeNode.ElementType.PRIMITIVE));
    }
 else {
      return new JsonTree(new JsonTreeNode(name,null,JsonTreeNode.ElementType.PRIMITIVE));
    }
  }
 else   if (json.isJsonArray()) {
    JsonTree tree=new JsonTree(new JsonTreeNode(name,null,JsonTreeNode.ElementType.ARRAY));
    JsonArray array=json.getAsJsonArray();
    for (int i=0; i < array.size(); i++) {
      tree.addChild(serialize(array.get(i)));
    }
    return tree;
  }
 else   if (json.isJsonObject()) {
    JsonTree tree=new JsonTree(new JsonTreeNode(name,null,JsonTreeNode.ElementType.OBJECT));
    JsonObject object=json.getAsJsonObject();
    for (    Map.Entry<String,JsonElement> entry : object.entrySet()) {
      tree.addChild(serialize(entry.getKey(),entry.getValue()));
    }
    return tree;
  }
 else {
    return new JsonTree(new JsonTreeNode(name,null,JsonTreeNode.ElementType.NULL));
  }
}
