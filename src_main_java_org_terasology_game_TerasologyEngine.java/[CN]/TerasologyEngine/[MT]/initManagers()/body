{
  CoreRegistry.put(CollisionGroupManager.class,new CollisionGroupManager());
  CoreRegistry.put(GroovyManager.class,new GroovyManager());
  AssetManager.getInstance().register(AssetType.MESH,"obj",new ObjMeshLoader());
  AssetManager.getInstance().register(AssetType.MUSIC,"ogg",new OggStreamingSoundLoader());
  AssetManager.getInstance().register(AssetType.SOUND,"ogg",new OggSoundLoader());
  AssetManager.getInstance().register(AssetType.TEXTURE,"png",new PNGTextureLoader());
  AssetManager.getInstance().register(AssetType.SHADER,"glsl",new GLSLShaderLoader());
  AssetManager.getInstance().register(AssetType.MATERIAL,"mat",new MaterialLoader());
  AssetManager.getInstance().addAssetSource(new ClasspathSource("engine",getClass().getProtectionDomain().getCodeSource(),"org/terasology/data"));
  BlockShapeManager.getInstance().reload();
  BlockManifestor manifestor=new BlockManifestor(BlockManager.getInstance());
  try {
    manifestor.loadConfig();
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,"Failed to load block definitions",e);
    System.exit(-1);
  }
  for (  AssetUri uri : AssetManager.list(AssetType.SHADER)) {
    AssetManager.load(uri);
  }
  for (  AssetUri uri : AssetManager.list(AssetType.MATERIAL)) {
    AssetManager.load(uri);
  }
  ShaderManager.getInstance();
  VertexBufferObjectManager.getInstance();
  FontManager.getInstance();
}
