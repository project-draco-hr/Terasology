{
  for (  Class<?> biomeRegistrator : moduleEnvironment.getSubtypesOf(BiomeRegistrator.class)) {
    BiomeRegistrator registrator;
    try {
      registrator=(BiomeRegistrator)biomeRegistrator.newInstance();
    }
 catch (    InstantiationException|IllegalAccessException e) {
      logger.error("Cannot call biome registrator {} because it cannot be instantiated.",biomeRegistrator,e);
      continue;
    }
    registrator.registerBiomes(this);
  }
  BiMap<Short,Biome> currentIdMap=HashBiMap.create(biomeShortIdMap);
  biomeShortIdMap.clear();
  registerBiome(UnknownBiome.INSTANCE);
  for (  Map.Entry<String,Short> entry : knownBiomeIdMap.entrySet()) {
    if (entry.getKey().equals(getUnknownBiome().getId())) {
      continue;
    }
    Biome biome=biomeIdMap.get(entry.getKey());
    if (biome == null) {
      throw new IllegalStateException("Save game references biome " + entry.getKey() + " which is no "+ "longer available.");
    }
    if (biomeShortIdMap.put(entry.getValue(),biome) != null) {
      throw new IllegalStateException("Biome short id " + entry.getValue() + " is present multiple times "+ "in the save game (latest is mapped to "+ biome.getId()+ ".");
    }
    logger.info("Restored biome {} with short id {} from save game.",entry.getKey(),entry.getValue());
    currentIdMap.values().remove(biome);
  }
  for (  Biome biome : currentIdMap.values()) {
    short freeBiomeId=getFreeBiomeId();
    biomeShortIdMap.put(freeBiomeId,biome);
    logger.info("Registered new biome {} with id {} that wasn't present in the save game.",biome.getId(),freeBiomeId);
  }
}
