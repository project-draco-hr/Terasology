{
  Set<RenderableChunk> dirtiedChunks=new HashSet<>();
  Set<BlockChange> changedBlocks=new HashSet<>();
  Map<Vector3i,Block> result=new HashMap<>(blocks.size());
  for (  Map.Entry<Vector3i,Block> entry : blocks.entrySet()) {
    Vector3i worldPos=entry.getKey();
    Vector3i chunkPos=ChunkMath.calcChunkPos(worldPos);
    CoreChunk chunk=chunkProvider.getChunk(chunkPos);
    if (chunk != null) {
      Block type=entry.getValue();
      Vector3i blockPos=ChunkMath.calcBlockPos(worldPos);
      chunk.writeLock();
      Block oldBlockType=chunk.setBlock(blockPos,type);
      chunk.writeUnlock();
      if (oldBlockType != type) {
        BlockChange oldChange=blockChanges.get(worldPos);
        if (oldChange == null) {
          blockChanges.put(worldPos,new BlockChange(worldPos,oldBlockType,type));
        }
 else {
          oldChange.setTo(type);
        }
        for (        Vector3i pos : ChunkMath.getChunkRegionAroundWorldPos(worldPos,1)) {
          RenderableChunk dirtiedChunk=chunkProvider.getChunk(pos);
          if (dirtiedChunk != null) {
            dirtiedChunks.add(dirtiedChunk);
          }
        }
        changedBlocks.add(new BlockChange(worldPos,oldBlockType,type));
      }
      result.put(worldPos,oldBlockType);
    }
 else {
      result.put(worldPos,null);
    }
  }
  for (  RenderableChunk chunk : dirtiedChunks) {
    chunk.setDirty(true);
  }
  for (  BlockChange change : changedBlocks) {
    notifyBlockChanged(change.getPosition(),change.getTo(),change.getFrom());
  }
  return result;
}
