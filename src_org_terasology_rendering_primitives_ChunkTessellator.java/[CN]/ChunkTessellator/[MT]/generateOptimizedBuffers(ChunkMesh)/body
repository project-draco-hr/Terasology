{
  PerformanceMonitor.startActivity("OptimizeBuffers");
  generateBulletBuffers(mesh);
  for (int j=0; j < mesh._vertexElements.length; j++) {
    mesh._vertexElements[j].finalVertices=BufferUtils.createFloatBuffer(mesh._vertexElements[j].vertices.size() * 2 + mesh._vertexElements[j].tex.size() + mesh._vertexElements[j].color.size() + mesh._vertexElements[j].normals.size());
    int cTex=0;
    int cColor=0;
    for (int i=0; i < mesh._vertexElements[j].vertices.size(); i+=3, cTex+=3, cColor+=4) {
      Vector3f vertexPos=new Vector3f(mesh._vertexElements[j].vertices.get(i),mesh._vertexElements[j].vertices.get(i + 1),mesh._vertexElements[j].vertices.get(i + 2));
      mesh._vertexElements[j].finalVertices.put(vertexPos.x);
      mesh._vertexElements[j].finalVertices.put(vertexPos.y);
      mesh._vertexElements[j].finalVertices.put(vertexPos.z);
      mesh._vertexElements[j].finalVertices.put(mesh._vertexElements[j].tex.get(cTex));
      mesh._vertexElements[j].finalVertices.put(mesh._vertexElements[j].tex.get(cTex + 1));
      mesh._vertexElements[j].finalVertices.put(mesh._vertexElements[j].tex.get(cTex + 2));
      Double[] result=new Double[3];
      calcLightingValuesForVertexPos(vertexPos,result);
      mesh._vertexElements[j].finalVertices.put(result[0].floatValue());
      mesh._vertexElements[j].finalVertices.put(result[1].floatValue());
      mesh._vertexElements[j].finalVertices.put(result[2].floatValue());
      mesh._vertexElements[j].finalVertices.put(mesh._vertexElements[j].color.get(cColor));
      mesh._vertexElements[j].finalVertices.put(mesh._vertexElements[j].color.get(cColor + 1));
      mesh._vertexElements[j].finalVertices.put(mesh._vertexElements[j].color.get(cColor + 2));
      mesh._vertexElements[j].finalVertices.put(mesh._vertexElements[j].color.get(cColor + 3));
      mesh._vertexElements[j].finalVertices.put(mesh._vertexElements[j].normals.get(i));
      mesh._vertexElements[j].finalVertices.put(mesh._vertexElements[j].normals.get(i + 1));
      mesh._vertexElements[j].finalVertices.put(mesh._vertexElements[j].normals.get(i + 2));
    }
    mesh._vertexElements[j].finalIndices=BufferUtils.createIntBuffer(mesh._vertexElements[j].indices.size());
    TIntIterator indexIterator=mesh._vertexElements[j].indices.iterator();
    while (indexIterator.hasNext()) {
      mesh._vertexElements[j].finalIndices.put(indexIterator.next());
    }
    mesh._vertexElements[j].finalVertices.flip();
    mesh._vertexElements[j].finalIndices.flip();
  }
  PerformanceMonitor.endActivity();
}
