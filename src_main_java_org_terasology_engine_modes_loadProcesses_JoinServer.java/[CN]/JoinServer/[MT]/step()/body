{
  if (networkSystem.getServer() != null) {
    NetData.ServerInfoMessage serverInfo=networkSystem.getServer().getInfo();
    gameManifest.setTitle(serverInfo.getGameName());
    for (    NetData.WorldInfo worldInfo : serverInfo.getWorldInfoList()) {
      WorldInfo world=new WorldInfo();
      world.setTime(worldInfo.getTime());
      world.setTitle(worldInfo.getTitle());
      gameManifest.addWorld(world);
    }
    Map<String,Short> blockMap=Maps.newHashMap();
    for (int i=0; i < serverInfo.getBlockIdCount(); ++i) {
      blockMap.put(serverInfo.getBlockName(i),(short)serverInfo.getBlockId(i));
    }
    gameManifest.setRegisteredBlockFamilies(serverInfo.getRegisterBlockFamilyList());
    gameManifest.setBlockIdMap(blockMap);
    gameManifest.setTime(networkSystem.getServer().getInfo().getTime());
    ModuleManager moduleManager=CoreRegistry.get(ModuleManager.class);
    moduleManager.disableAllModules();
    for (    NetData.ModuleInfo moduleInfo : networkSystem.getServer().getInfo().getModuleList()) {
      if (!moduleInfo.hasModuleId() || !moduleInfo.hasModuleVersion() || Version.create(moduleInfo.getModuleVersion()) == null) {
        logger.error("Received incomplete module info");
      }
 else {
        Module module=moduleManager.getModule(moduleInfo.getModuleId(),Version.create(moduleInfo.getModuleVersion()));
        if (module == null) {
          StateMainMenu mainMenu=new StateMainMenu("Missing required module: " + moduleInfo.getModuleId() + ":"+ moduleInfo.getModuleVersion());
          CoreRegistry.get(GameEngine.class).changeState(mainMenu);
          return false;
        }
 else {
          logger.debug("Activating module: {}:{}",moduleInfo.getModuleId(),moduleInfo.getModuleVersion());
          gameManifest.addModule(module.getId(),module.getVersion());
          moduleManager.enableModule(module);
        }
      }
    }
    CoreRegistry.get(Game.class).load(gameManifest);
    moduleManager.applyActiveModules();
    AssetManager assetManager=CoreRegistry.get(AssetManager.class);
    assetManager.clear();
    assetManager.applyOverrides();
    return true;
  }
 else {
    return false;
  }
}
