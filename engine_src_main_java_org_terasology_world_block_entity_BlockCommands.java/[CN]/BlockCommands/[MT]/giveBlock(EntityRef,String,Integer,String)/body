{
  int quantity=quantityParam != null ? quantityParam : 16;
  if (shapeUriParam == null) {
    List<BlockUri> matchingUris=blockManager.resolveAllBlockFamilyUri(uri);
    if (matchingUris.size() == 1) {
      BlockFamily blockFamily=blockManager.getBlockFamily(matchingUris.get(0));
      return giveBlock(blockFamily,quantity,sender);
    }
 else     if (matchingUris.isEmpty()) {
      throw new IllegalArgumentException("No block found for '" + uri + "'");
    }
 else {
      StringBuilder builder=new StringBuilder();
      builder.append("Non-unique block name, possible matches: ");
      Joiner.on(", ").appendTo(builder,matchingUris);
      return builder.toString();
    }
  }
 else {
    List<BlockUri> resolvedBlockUris=blockManager.resolveAllBlockFamilyUri(uri);
    if (resolvedBlockUris.isEmpty()) {
      throw new IllegalArgumentException("No block found for '" + uri + "'");
    }
 else     if (resolvedBlockUris.size() > 1) {
      StringBuilder builder=new StringBuilder();
      builder.append("Non-unique block name, possible matches: ");
      Joiner.on(", ").appendTo(builder,resolvedBlockUris);
      return builder.toString();
    }
    List<AssetUri> resolvedShapeUris=Assets.resolveAllUri(AssetType.SHAPE,shapeUriParam);
    if (resolvedShapeUris.isEmpty()) {
      throw new IllegalArgumentException("No shape found for '" + shapeUriParam + "'");
    }
 else     if (resolvedShapeUris.size() > 1) {
      StringBuilder builder=new StringBuilder();
      builder.append("Non-unique shape name, possible matches: ");
      Iterator<AssetUri> shapeUris=resolvedShapeUris.iterator();
      while (shapeUris.hasNext()) {
        builder.append(shapeUris.next().toSimpleString());
        if (shapeUris.hasNext()) {
          builder.append(", ");
        }
      }
      return builder.toString();
    }
    BlockUri blockUri=new BlockUri(resolvedBlockUris.get(0).toString() + BlockUri.MODULE_SEPARATOR + resolvedShapeUris.get(0).toSimpleString());
    if (blockUri.isValid()) {
      return giveBlock(blockManager.getBlockFamily(blockUri),quantity,sender);
    }
    throw new IllegalArgumentException("Invalid block or shape");
  }
}
