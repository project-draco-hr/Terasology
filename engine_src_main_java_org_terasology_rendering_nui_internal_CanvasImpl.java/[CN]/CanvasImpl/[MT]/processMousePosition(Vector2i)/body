{
  if (clickedRegion != null) {
    Vector2i relPos=new Vector2i(position);
    relPos.sub(clickedRegion.offset);
    clickedRegion.listener.onMouseDrag(relPos,keyboard);
  }
  Set<InteractionRegion> newMouseOverRegions=Sets.newLinkedHashSet();
  Iterator<InteractionRegion> iter=interactionRegions.descendingIterator();
  while (iter.hasNext()) {
    InteractionRegion next=iter.next();
    if (next.region.contains(position)) {
      Vector2i relPos=new Vector2i(position);
      relPos.sub(next.offset);
      next.listener.onMouseOver(relPos,newMouseOverRegions.isEmpty(),keyboard);
      newMouseOverRegions.add(next);
    }
  }
  for (  InteractionRegion region : mouseOverRegions) {
    if (!newMouseOverRegions.contains(region)) {
      region.listener.onMouseLeave();
    }
  }
  if (clickedRegion != null && !interactionRegions.contains(clickedRegion)) {
    clickedRegion=null;
  }
  mouseOverRegions=newMouseOverRegions;
  if (mouseOverRegions.isEmpty()) {
    topMouseOverRegion=null;
  }
 else {
    InteractionRegion newTopMouseOverRegion=mouseOverRegions.iterator().next();
    if (!newTopMouseOverRegion.equals(topMouseOverRegion)) {
      topMouseOverRegion=newTopMouseOverRegion;
      tooltipTime=time.getGameTime() + newTopMouseOverRegion.element.getTooltipDelay();
      lastTooltipPosition.set(position);
    }
 else {
      if (lastTooltipPosition.gridDistance(position) > MAX_DOUBLE_CLICK_DISTANCE) {
        tooltipTime=time.getGameTime() + newTopMouseOverRegion.element.getTooltipDelay();
        lastTooltipPosition.set(position);
      }
    }
  }
}
