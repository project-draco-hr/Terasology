{
  final JavaArchive homeArchive=ShrinkWrap.create(JavaArchive.class);
  final FileSystem vfs=ShrinkWrapFileSystems.newFileSystem(homeArchive);
  PathManager.getInstance().useOverrideHomePath(vfs.getPath(""));
  if (!setup) {
    setup=true;
    LWJGLHelper.initNativeLibs();
    moduleManager=new ModuleManagerImpl(new ModuleSecurityManager());
    moduleManager.applyActiveModules();
    CoreRegistry.put(ModuleManager.class,moduleManager);
    assetManager=new AssetManager(moduleManager);
    CoreRegistry.put(AssetManager.class,assetManager);
    AssetType.registerAssetTypes(assetManager);
    assetManager.addAssetSource(new ClasspathSource(TerasologyConstants.ENGINE_MODULE,TerasologyEngine.class.getProtectionDomain().getCodeSource(),TerasologyConstants.ASSETS_SUBDIRECTORY,TerasologyConstants.OVERRIDES_SUBDIRECTORY));
    assetManager.addAssetSource(new ClasspathSource("unittest",TerasologyTestingEnvironment.class.getProtectionDomain().getCodeSource(),TerasologyConstants.ASSETS_SUBDIRECTORY,TerasologyConstants.OVERRIDES_SUBDIRECTORY));
    config=new Config();
    CoreRegistry.put(Config.class,config);
    Display.setDisplayMode(new DisplayMode(0,0));
    Display.create(CoreRegistry.get(Config.class).getRendering().getPixelFormat());
    assetManager.setAssetFactory(AssetType.PREFAB,new AssetFactory<PrefabData,Prefab>(){
      @Override public Prefab buildAsset(      AssetUri uri,      PrefabData data){
        return new PojoPrefab(uri,data);
      }
    }
);
    assetManager.setAssetFactory(AssetType.SHAPE,new AssetFactory<BlockShapeData,BlockShape>(){
      @Override public BlockShape buildAsset(      AssetUri uri,      BlockShapeData data){
        return new BlockShapeImpl(uri,data);
      }
    }
);
    assetManager.setAssetFactory(AssetType.TEXTURE,new AssetFactory<TextureData,Texture>(){
      @Override public Texture buildAsset(      AssetUri uri,      TextureData data){
        return new OpenGLTexture(uri,data);
      }
    }
);
    assetManager.setAssetFactory(AssetType.FONT,new AssetFactory<FontData,Font>(){
      @Override public Font buildAsset(      AssetUri uri,      FontData data){
        return new OpenGLFont(uri,data);
      }
    }
);
    assetManager.setAssetFactory(AssetType.SHADER,new AssetFactory<ShaderData,Shader>(){
      @Override public Shader buildAsset(      AssetUri uri,      ShaderData data){
        return new GLSLShader(uri,data);
      }
    }
);
    assetManager.setAssetFactory(AssetType.MATERIAL,new AssetFactory<MaterialData,Material>(){
      @Override public Material buildAsset(      AssetUri uri,      MaterialData data){
        return new GLSLMaterial(uri,data);
      }
    }
);
    assetManager.setAssetFactory(AssetType.MESH,new AssetFactory<MeshData,Mesh>(){
      @Override public Mesh buildAsset(      AssetUri uri,      MeshData data){
        return new OpenGLMesh(uri,data);
      }
    }
);
    assetManager.setAssetFactory(AssetType.SKELETON_MESH,new AssetFactory<SkeletalMeshData,SkeletalMesh>(){
      @Override public SkeletalMesh buildAsset(      AssetUri uri,      SkeletalMeshData data){
        return new OpenGLSkeletalMesh(uri,data);
      }
    }
);
    assetManager.setAssetFactory(AssetType.ANIMATION,new AssetFactory<MeshAnimationData,MeshAnimation>(){
      @Override public MeshAnimation buildAsset(      AssetUri uri,      MeshAnimationData data){
        return new MeshAnimationImpl(uri,data);
      }
    }
);
    CoreRegistry.get(AssetManager.class).setAssetFactory(AssetType.UI_SKIN,new AssetFactory<UISkinData,UISkin>(){
      @Override public UISkin buildAsset(      AssetUri uri,      UISkinData data){
        return new UISkin(uri,data);
      }
    }
);
    CoreRegistry.put(ShaderManager.class,new ShaderManager()).initShaders();
    DefaultBlockFamilyFactoryRegistry blockFamilyFactoryRegistry=new DefaultBlockFamilyFactoryRegistry();
    blockFamilyFactoryRegistry.setBlockFamilyFactory("horizontal",new HorizontalBlockFamilyFactory());
    blockFamilyFactoryRegistry.setBlockFamilyFactory("alignToSurface",new AttachedToSurfaceFamilyFactory());
    blockManager=new BlockManagerImpl(new WorldAtlas(4096),blockFamilyFactoryRegistry);
    CoreRegistry.put(BlockManager.class,blockManager);
    audioManager=new NullAudioManager();
    CoreRegistry.put(AudioManager.class,audioManager);
    collisionGroupManager=new CollisionGroupManager();
    CoreRegistry.put(CollisionGroupManager.class,collisionGroupManager);
  }
 else {
    CoreRegistry.put(AssetManager.class,assetManager);
    CoreRegistry.put(BlockManager.class,blockManager);
    CoreRegistry.put(Config.class,config);
    CoreRegistry.put(AudioManager.class,audioManager);
    CoreRegistry.put(CollisionGroupManager.class,collisionGroupManager);
    CoreRegistry.put(ModuleManager.class,moduleManager);
  }
  PathManager.getInstance().setCurrentSaveTitle("world1");
}
