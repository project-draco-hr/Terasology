{
  if (worldRenderer == null)   return;
  for (  EntityRef entity : entityManager.iteratorEntities(SimpleAIComponent.class,CharacterMovementComponent.class,LocationComponent.class)) {
    LocationComponent location=entity.getComponent(LocationComponent.class);
    SimpleAIComponent ai=entity.getComponent(SimpleAIComponent.class);
    CharacterMovementComponent moveComp=entity.getComponent(CharacterMovementComponent.class);
    Vector3f worldPos=location.getWorldPosition();
    moveComp.getDrive().set(0,0,0);
    if (worldRenderer.getPlayer() != null) {
      Vector3f dist=new Vector3f(worldPos);
      dist.sub(worldRenderer.getPlayer().getPosition());
      double distanceToPlayer=dist.lengthSquared();
      if (distanceToPlayer > 6 && distanceToPlayer < 16) {
        ai.movementTarget.set(worldRenderer.getPlayer().getPosition());
        ai.followingPlayer=true;
      }
 else {
        if (Terasology.getInstance().getTimeInMs() - ai.lastChangeOfDirectionAt > 12000 || ai.followingPlayer) {
          ai.movementTarget.set(worldPos.x + random.randomFloat() * 500,worldPos.y,worldPos.z + random.randomFloat() * 500);
          ai.lastChangeOfDirectionAt=Terasology.getInstance().getTimeInMs();
          ai.followingPlayer=false;
        }
      }
      Vector3f targetDirection=new Vector3f();
      targetDirection.sub(ai.movementTarget,worldPos);
      targetDirection.normalize();
      moveComp.setDrive(targetDirection);
      float yaw=(float)Math.atan2(targetDirection.x,targetDirection.z);
      AxisAngle4f axisAngle=new AxisAngle4f(0,1,0,yaw);
      location.getLocalRotation().set(axisAngle);
    }
  }
}
