{
  tick+=delta * 1000;
  if (tick - lastTick < timeBetweenSpawns) {
    return;
  }
  logger.info("Going to do stuff");
  lastTick=tick;
  int maxMobs=entityManager.getComponentCount(SpawnerComponent.class) * maxMobsPerSpawner + maxMobsPerSpawner;
  int currentMobs=entityManager.getComponentCount(SimpleAIComponent.class);
  logger.info("Mob count: {}/{}",currentMobs,maxMobs);
  if (currentMobs >= maxMobs) {
    logger.info("Too many mobs! Returning early");
    return;
  }
  logger.info("Count of entities with a SpawnerComponent: {}",entityManager.getComponentCount(SpawnerComponent.class));
  for (  EntityRef entity : entityManager.iteratorEntities(SpawnerComponent.class,BlockComponent.class)) {
    logger.info("Found a spawner: " + entity);
    SpawnerComponent spawnComp=entity.getComponent(SpawnerComponent.class);
    BlockComponent blockComp=entity.getComponent(BlockComponent.class);
    if (currentMobs < maxMobs) {
      Vector3f pos=blockComp.getPosition().toVector3f();
      logger.info("Going to spawn something at {}",pos);
      String chosenSpawnerType=spawnComp.types.get(random.randomIntAbs(spawnComp.types.size()));
      Set randomType=typeLists.get(chosenSpawnerType);
      logger.info("Picked random type {} which returned {} prefabs",chosenSpawnerType,randomType.size());
      if (randomType.size() == 0) {
        logger.warn("That type wasn't found, sad :-( Won't spawn anything this time");
        return;
      }
      int anotherRandomIndex=random.randomIntAbs(randomType.size());
      Object[] randomPrefabs=randomType.toArray();
      Prefab chosenPrefab=(Prefab)randomPrefabs[anotherRandomIndex];
      logger.info("Picked index {} of types {} which is a {}",anotherRandomIndex,chosenSpawnerType,chosenPrefab);
      factory.generateGelatinousCube(pos,chosenPrefab);
      currentMobs++;
    }
  }
}
