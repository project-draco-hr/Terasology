{
  final Class<T> rawType=(Class<T>)type.getRawType();
  if (!Uri.class.isAssignableFrom(rawType)) {
    return null;
  }
  final Constructor<T> constructor;
  try {
    constructor=rawType.getConstructor(String.class);
    constructor.setAccessible(true);
  }
 catch (  NoSuchMethodException e) {
    logger.error("URI type {} lacks String constructor",rawType);
    return null;
  }
  return new TypeAdapter<T>(){
    @Override public void write(    JsonWriter out,    T value) throws IOException {
      out.value(value.toString());
    }
    @Override public T read(    JsonReader reader) throws IOException {
      if (reader.peek() == JsonToken.NULL) {
        reader.nextNull();
        return null;
      }
 else {
        String nextString=reader.nextString();
        try {
          return constructor.newInstance(nextString);
        }
 catch (        InstantiationException|IllegalAccessException|InvocationTargetException e) {
          logger.error("Failed to instantiate uri of type {} from value {}",rawType,nextString,e);
          return null;
        }
      }
    }
  }
;
}
