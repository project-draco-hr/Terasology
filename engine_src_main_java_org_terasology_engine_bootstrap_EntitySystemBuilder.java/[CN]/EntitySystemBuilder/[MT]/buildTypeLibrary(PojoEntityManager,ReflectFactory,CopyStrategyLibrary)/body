{
  Vector3iTypeHandler vector3iHandler=new Vector3iTypeHandler();
  TypeSerializationLibrary serializationLibrary=new TypeSerializationLibrary(factory,copyStrategies);
  serializationLibrary.add(BlockFamily.class,new BlockFamilyTypeHandler());
  serializationLibrary.add(Block.class,new BlockTypeHandler());
  serializationLibrary.add(Color4f.class,new Color4fTypeHandler());
  serializationLibrary.add(Color.class,new ColorTypeHandler());
  serializationLibrary.add(Quat4f.class,new Quat4fTypeHandler());
  serializationLibrary.add(Texture.class,new AssetTypeHandler<>(AssetType.TEXTURE,Texture.class));
  serializationLibrary.add(Mesh.class,new AssetTypeHandler<>(AssetType.MESH,Mesh.class));
  serializationLibrary.add(Sound.class,new AssetTypeHandler<>(AssetType.SOUND,Sound.class));
  serializationLibrary.add(Material.class,new AssetTypeHandler<>(AssetType.MATERIAL,Material.class));
  serializationLibrary.add(SkeletalMesh.class,new AssetTypeHandler<>(AssetType.SKELETON_MESH,SkeletalMesh.class));
  serializationLibrary.add(MeshAnimation.class,new AssetTypeHandler<>(AssetType.ANIMATION,MeshAnimation.class));
  serializationLibrary.add(TextureRegion.class,new TextureRegionTypeHandler());
  serializationLibrary.add(TextureRegionAsset.class,new TextureRegionTypeHandler());
  serializationLibrary.add(Vector4f.class,new Vector4fTypeHandler());
  serializationLibrary.add(Vector3f.class,new Vector3fTypeHandler());
  serializationLibrary.add(Vector2f.class,new Vector2fTypeHandler());
  serializationLibrary.add(Vector3i.class,vector3iHandler);
  serializationLibrary.add(CollisionGroup.class,new CollisionGroupTypeHandler());
  serializationLibrary.add(Region3i.class,new Region3iTypeHandler(vector3iHandler));
  serializationLibrary.add(EntityRef.class,new EntityRefTypeHandler(entityManager));
  serializationLibrary.add(Prefab.class,new PrefabTypeHandler());
  serializationLibrary.add(BehaviorTree.class,new AssetTypeHandler<>(AssetType.BEHAVIOR,BehaviorTree.class));
  return serializationLibrary;
}
