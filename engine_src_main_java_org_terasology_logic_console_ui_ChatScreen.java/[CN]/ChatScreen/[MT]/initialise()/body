{
  final ScrollableArea scrollArea=find("scrollArea",ScrollableArea.class);
  scrollArea.moveToBottom();
  commandLine=find("commandLine",UIText.class);
  getManager().setFocus(commandLine);
  commandLine.subscribe(new ActivateEventListener(){
    @Override public void onActivated(    UIWidget widget){
      String text=commandLine.getText();
      if (!text.isEmpty()) {
        String command="say";
        List<String> params=Collections.singletonList(text);
        console.execute(new Name(command),params,localPlayer.getClientEntity());
        commandLine.setText("");
        scrollArea.moveToBottom();
      }
    }
  }
);
  final UILabel history=find("messageHistory",UILabel.class);
  history.bindText(new ReadOnlyBinding<String>(){
    @Override public String get(){
      StringBuilder messageList=new StringBuilder();
      for (      Message msg : console.getMessages(CoreMessageType.CHAT,CoreMessageType.NOTIFICATION)) {
        messageList.append(msg.getMessage());
        messageList.append(Message.NEW_LINE);
      }
      return messageList.toString();
    }
  }
);
}
