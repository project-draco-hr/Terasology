{
  Region3i edgeRegion=TeraMath.getEdgeRegion(Region3i.createFromMinAndSize(Vector3i.zero(),ChunkConstants.CHUNK_SIZE),side);
  Vector3i adjPos=new Vector3i();
  for (  Vector3i pos : edgeRegion) {
    adjPos.set(pos);
    adjPos.add(chunkEdgeDeltas.get(side));
    Block block=chunk.getBlock(pos);
    byte value=rules.getValue(chunk,pos);
    Block adjBlock=adjChunk.getBlock(adjPos);
    byte adjValue=rules.getValue(adjChunk,adjPos);
    byte expectedAdjValue=rules.propagateValue(value,side,block);
    if (rules.canSpreadOutOf(block,side) && rules.canSpreadInto(adjBlock,side.reverse()) && adjValue < expectedAdjValue) {
      rules.setValue(adjChunk,adjPos,expectedAdjValue);
      queueSpreadValue(adjChunk.getBlockWorldPos(adjPos),expectedAdjValue);
    }
    byte expectedValue=rules.propagateValue(adjValue,side.reverse(),adjBlock);
    if (rules.canSpreadInto(block,side) && rules.canSpreadOutOf(adjBlock,side.reverse()) && value < expectedValue) {
      rules.setValue(chunk,pos,expectedValue);
      queueSpreadValue(chunk.getBlockWorldPos(pos),expectedValue);
    }
  }
}
