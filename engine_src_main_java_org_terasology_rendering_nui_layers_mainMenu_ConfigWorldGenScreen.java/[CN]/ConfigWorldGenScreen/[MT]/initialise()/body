{
  WidgetUtil.trySubscribe(this,"close",new ActivateEventListener(){
    @Override public void onActivated(    UIWidget button){
      getManager().popScreen();
    }
  }
);
  WorldGeneratorInfo info=worldGeneratorManager.getWorldGeneratorInfo(config.getWorldGeneration().getDefaultGenerator());
  Module worldGeneratorModule=moduleManager.getLatestModuleVersion(info.getUri().getModuleName());
  try {
    moduleManager.enableModuleAndDependencies(worldGeneratorModule);
    WorldGenerator wg=CoreRegistry.get(WorldGeneratorManager.class).createGenerator(info.getUri());
    if (wg.getConfigurator().isPresent()) {
      worldConfig=wg.getConfigurator().get();
    }
 else {
      logger.info(info.getUri().toString() + " does not support configuration");
      return;
    }
  }
 catch (  UnresolvedWorldGeneratorException e) {
    logger.error("Unable to load world generator: " + info.getUri().toString());
  }
 finally {
    moduleManager.disableAllModules();
  }
  list=find("params",ScrollableArea.class);
  if (list != null) {
    ColumnLayout layout=new ColumnLayout();
    layout.setColumns(2);
    layout.setVerticalSpacing(4);
    layout.setHorizontalSpacing(8);
    layout.setFamily("option-grid");
    layout.setColumnWidths(0.25f,0.75f);
    list.setContent(layout);
    for (    Parameter p : worldConfig.getParams()) {
      UILabel label=new UILabel(p.getLabel());
      UIWidget widget=getWidgetFor(p);
      layout.addWidget(label,null);
      layout.addWidget(widget,null);
    }
  }
}
