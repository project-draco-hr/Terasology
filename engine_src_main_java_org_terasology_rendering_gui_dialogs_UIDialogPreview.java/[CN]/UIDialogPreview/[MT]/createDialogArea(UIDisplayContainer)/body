{
  setModal(true);
  UIComposite detailPanel=new UIComposite();
  ColumnLayout layout=new ColumnLayout();
  layout.setSpacingVertical(8f);
  detailPanel.setLayout(layout);
  UILabel inputSeedLabel=new UILabel("Seed");
  inputSeedLabel.setColor(org.newdawn.slick.Color.darkGray);
  inputSeed=new UIText();
  inputSeed.setSize(new Vector2f(120,32));
  inputSeed.addChangedListener(new ChangedListener(){
    @Override public void changed(    UIDisplayElement element){
      biomeProvider=new WorldBiomeProviderImpl(inputSeed.getText());
      updatePreview();
    }
  }
);
  detailPanel.addDisplayElement(inputSeedLabel);
  detailPanel.addDisplayElement(inputSeed);
  Vector2f defSize=new Vector2f(80,32);
  UIButton buttonShowBiomes=new UIButton(defSize,ButtonType.TOGGLE);
  buttonShowBiomes.getLabel().setText("Biomes");
  buttonShowBiomes.setToggleState(true);
  ColorFunction biomeColor=new ColorFunction(){
    @Override public Color get(    int x,    int z){
      Biome biome=biomeProvider.getBiomeAt(x,z);
switch (biome) {
case DESERT:
        return Color.YELLOW;
case FOREST:
      return Color.GREEN;
case MOUNTAINS:
    return new Color(240,120,120);
case PLAINS:
  return new Color(220,220,60);
case SNOW:
return Color.WHITE;
default :
return Color.GREY;
}
}
}
;
buttonShowBiomes.setUserData(biomeColor);
UIButton buttonShowHum=new UIButton(defSize,ButtonType.TOGGLE);
buttonShowHum.getLabel().setText("Humidity");
ColorFunction humColor=new ColorFunction(){
@Override public Color get(int x,int z){
float hum=biomeProvider.getHumidityAt(x,z);
return new Color(hum * 0.2f,hum * 0.2f,hum);
}
}
;
buttonShowHum.setUserData(humColor);
UIButton buttonShowTemp=new UIButton(defSize,ButtonType.TOGGLE);
buttonShowTemp.getLabel().setText("Temperature");
ColorFunction tempColor=new ColorFunction(){
@Override public Color get(int x,int z){
float temp=biomeProvider.getTemperatureAt(x,z);
return new Color(temp,temp * 0.2f,temp * 0.2f);
}
}
;
buttonShowTemp.setUserData(tempColor);
radioGroup=Lists.newArrayList(buttonShowBiomes,buttonShowHum,buttonShowTemp);
ClickListener btnClick=new ClickListener(){
@Override public void click(UIDisplayElement element,int button){
UIButton clickedBtn=(UIButton)element;
for (UIButton btn : radioGroup) {
if (clickedBtn != btn) {
btn.setToggleState(false);
}
 else {
btn.setToggleState(true);
}
}
updatePreview();
}
}
;
for (UIButton btn : radioGroup) {
btn.addClickListener(btnClick);
detailPanel.addDisplayElement(btn);
}
zoomSlider=new UISlider(defSize,0,100);
zoomSlider.setValue(64);
zoomSlider.setText("64x");
zoomSlider.addChangedListener(new ChangedListener(){
@Override public void changed(UIDisplayElement element){
UISlider slider=(UISlider)element;
slider.setText(slider.getValue() + "x");
updatePreview();
}
}
);
detailPanel.addDisplayElement(zoomSlider);
detailPanel.layout();
int imageScreenSize=384;
detailPanel.setPosition(new Vector2f(40 + imageScreenSize,40));
imagePreview=new UIImage();
imagePreview.setSize(new Vector2f(imageScreenSize,imageScreenSize));
imagePreview.setPosition(new Vector2f(20,40));
imagePreview.setBorderSolid(new Vector4f(1f,1f,1f,1f),org.newdawn.slick.Color.black);
parent.addDisplayElement(imagePreview);
parent.addDisplayElement(detailPanel);
parent.layout();
}
