{
  double[] lights=new double[8];
  double[] blockLights=new double[8];
  byte[] blocks=new byte[8];
  Vector3f vertexWorldPos=moveVectorFromChunkSpaceToWorldSpace(vertexPos);
  blocks[0]=_chunk.getParent().getBlockAtPosition(new Vector3d((vertexWorldPos.x + 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z + 0.1f)));
  blocks[1]=_chunk.getParent().getBlockAtPosition(new Vector3d((vertexWorldPos.x + 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z - 0.1f)));
  blocks[2]=_chunk.getParent().getBlockAtPosition(new Vector3d((vertexWorldPos.x - 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z - 0.1f)));
  blocks[3]=_chunk.getParent().getBlockAtPosition(new Vector3d((vertexWorldPos.x - 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z + 0.1f)));
  lights[0]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x + 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z + 0.1f)),Chunk.LIGHT_TYPE.SUN);
  lights[1]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x + 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z - 0.1f)),Chunk.LIGHT_TYPE.SUN);
  lights[2]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x - 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z - 0.1f)),Chunk.LIGHT_TYPE.SUN);
  lights[3]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x - 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z + 0.1f)),Chunk.LIGHT_TYPE.SUN);
  lights[4]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x + 0.1f),(vertexWorldPos.y - 0.1f),(vertexWorldPos.z + 0.1f)),Chunk.LIGHT_TYPE.SUN);
  lights[5]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x + 0.1f),(vertexWorldPos.y - 0.1f),(vertexWorldPos.z - 0.1f)),Chunk.LIGHT_TYPE.SUN);
  lights[6]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x - 0.1f),(vertexWorldPos.y - 0.1f),(vertexWorldPos.z - 0.1f)),Chunk.LIGHT_TYPE.SUN);
  lights[7]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x - 0.1f),(vertexWorldPos.y - 0.1f),(vertexWorldPos.z + 0.1f)),Chunk.LIGHT_TYPE.SUN);
  blockLights[0]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x + 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z + 0.1f)),Chunk.LIGHT_TYPE.BLOCK);
  blockLights[1]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x + 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z - 0.1f)),Chunk.LIGHT_TYPE.BLOCK);
  blockLights[2]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x - 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z - 0.1f)),Chunk.LIGHT_TYPE.BLOCK);
  blockLights[3]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x - 0.1f),(vertexWorldPos.y + 0.8f),(vertexWorldPos.z + 0.1f)),Chunk.LIGHT_TYPE.BLOCK);
  blockLights[4]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x + 0.1f),(vertexWorldPos.y - 0.1f),(vertexWorldPos.z + 0.1f)),Chunk.LIGHT_TYPE.BLOCK);
  blockLights[5]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x + 0.1f),(vertexWorldPos.y - 0.1f),(vertexWorldPos.z - 0.1f)),Chunk.LIGHT_TYPE.BLOCK);
  blockLights[6]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x - 0.1f),(vertexWorldPos.y - 0.1f),(vertexWorldPos.z - 0.1f)),Chunk.LIGHT_TYPE.BLOCK);
  blockLights[7]=_chunk.getParent().getLightAtPosition(new Vector3d((vertexWorldPos.x - 0.1f),(vertexWorldPos.y - 0.1f),(vertexWorldPos.z + 0.1f)),Chunk.LIGHT_TYPE.BLOCK);
  double resultAmbientOcclusion=1.0;
  double resultLight=0;
  double resultBlockLight=0;
  int counterLight=0;
  int counterBlockLight=0;
  int occCounter=0;
  int occCounterBillboard=0;
  for (int i=0; i < 8; i++) {
    if (lights[i] > 0) {
      resultLight+=lights[i];
      counterLight++;
    }
    if (blockLights[i] > 0) {
      resultBlockLight+=blockLights[i];
      counterBlockLight++;
    }
    if (i < 4) {
      Block b=BlockManager.getInstance().getBlock(blocks[i]);
      if (b.isCastsShadows() && b.getBlockForm() != Block.BLOCK_FORM.BILLBOARD) {
        occCounter++;
      }
 else       if (b.isCastsShadows() && b.getBlockForm() == Block.BLOCK_FORM.BILLBOARD) {
        occCounterBillboard++;
      }
    }
  }
  resultAmbientOcclusion=(Math.pow(0.70,occCounter) + Math.pow(0.92,occCounterBillboard)) / 2.0;
  if (counterLight == 0)   output[0]=(double)0;
 else   output[0]=resultLight / counterLight / 15f;
  if (counterBlockLight == 0)   output[1]=(double)0;
 else   output[1]=resultBlockLight / counterBlockLight / 15f;
  output[2]=resultAmbientOcclusion;
}
