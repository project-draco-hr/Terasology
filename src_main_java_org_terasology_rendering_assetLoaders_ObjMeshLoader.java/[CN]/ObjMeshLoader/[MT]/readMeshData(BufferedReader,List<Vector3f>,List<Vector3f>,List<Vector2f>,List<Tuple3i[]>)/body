{
  String line=null;
  int lineNum=0;
  try {
    while ((line=reader.readLine()) != null) {
      line=line.trim();
      lineNum++;
      if (line.isEmpty())       continue;
      String[] prefixSplit=line.trim().split("\\s+",2);
      String prefix=prefixSplit[0];
      if ("#".equals(prefix))       continue;
      if (prefixSplit.length < 2) {
        throw new IOException(String.format("Incomplete statement"));
      }
      if ("o".equals(prefix)) {
      }
 else       if ("v".equals(prefix)) {
        String[] floats=prefixSplit[1].trim().split("\\s+",4);
        if (floats.length != 3) {
          throw new IOException("Bad statement");
        }
        rawVertices.add(new Vector3f(Float.parseFloat(floats[0]),Float.parseFloat(floats[1]),Float.parseFloat(floats[2])));
      }
 else       if ("vt".equals(prefix)) {
        String[] floats=prefixSplit[1].trim().split("\\s+",4);
        if (floats.length < 2 || floats.length > 3) {
          throw new IOException("Bad statement");
        }
        rawTexCoords.add(new Vector2f(Float.parseFloat(floats[0]),1 - Float.parseFloat(floats[1])));
      }
 else       if ("vn".equals(prefix)) {
        String[] floats=prefixSplit[1].trim().split("\\s+",4);
        if (floats.length != 3) {
          throw new IOException("Bad statement");
        }
        rawNormals.add(new Vector3f(Float.parseFloat(floats[0]),Float.parseFloat(floats[1]),Float.parseFloat(floats[2])));
      }
 else       if ("usemtl".equals(prefix)) {
        continue;
      }
 else       if ("s".equals(prefix)) {
        if (!"off".equals(prefixSplit[1]) && !"0".equals(prefixSplit[1])) {
          logger.warn("Smoothing groups not supported in obj import yet");
        }
      }
 else       if ("f".equals(prefix)) {
        String[] elements=prefixSplit[1].trim().split("\\s+");
        Tuple3i[] result=new Tuple3i[elements.length];
        for (int i=0; i < elements.length; ++i) {
          String[] parts=elements[i].split("/",4);
          if (parts.length > 3) {
            throw new IOException("Bad Statement");
          }
          result[i]=new Vector3i(Integer.parseInt(parts[0]),-1,-1);
          if (parts.length > 1 && !parts[1].isEmpty()) {
            result[i].y=Integer.parseInt(parts[1]);
          }
          if (parts.length > 2 && !parts[2].isEmpty()) {
            result[i].z=Integer.parseInt(parts[2]);
          }
        }
        rawIndices.add(result);
      }
 else {
        logger.warn("Skipping unsupported obj statement on line {}:\"{}\"",lineNum,line);
      }
    }
  }
 catch (  Exception e) {
    throw new IOException(String.format("Failed to process line %d:\"%s\"",lineNum,line),e);
  }
}
