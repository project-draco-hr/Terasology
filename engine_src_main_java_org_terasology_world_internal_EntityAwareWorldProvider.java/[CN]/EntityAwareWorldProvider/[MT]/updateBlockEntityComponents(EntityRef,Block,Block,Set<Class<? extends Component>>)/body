{
  EntityRef oldEntitySample=(!oldType.getPrefab().isEmpty()) ? entityManager.createEntityWithoutLifecycleEvents(oldType.getPrefab()) : EntityRef.NULL;
  EntityRef newEntitySample=(!type.getPrefab().isEmpty()) ? entityManager.createEntityWithoutLifecycleEvents(type.getPrefab()) : EntityRef.NULL;
  try {
    for (    Component component : blockEntity.iterateComponents()) {
      if (!COMMON_BLOCK_COMPONENTS.contains(component.getClass()) && !entityManager.getComponentLibrary().getMetadata(component.getClass()).isRetainUnalteredOnBlockChange() && !newEntitySample.hasComponent(component.getClass())&& !retainComponents.contains(component.getClass())) {
        blockEntity.removeComponent(component.getClass());
      }
    }
    BlockComponent blockComponent=blockEntity.getComponent(BlockComponent.class);
    blockComponent.setBlock(type);
    blockEntity.saveComponent(blockComponent);
    HealthComponent health=blockEntity.getComponent(HealthComponent.class);
    if (health == null && type.isDestructible()) {
      blockEntity.addComponent(new HealthComponent(type.getHardness(),2.0f,1.0f));
    }
 else     if (health != null && !type.isDestructible()) {
      blockEntity.removeComponent(HealthComponent.class);
    }
 else     if (health != null && type.isDestructible()) {
      health.maxHealth=type.getHardness();
      health.currentHealth=Math.min(health.currentHealth,health.maxHealth);
      blockEntity.saveComponent(health);
    }
    if (Objects.equal(oldEntitySample,newEntitySample)) {
      return;
    }
    if (newEntitySample.exists()) {
      for (      Component comp : newEntitySample.iterateComponents()) {
        copyIntoPrefab(blockEntity,comp,retainComponents);
      }
    }
  }
  finally {
    entityManager.destroyEntityWithoutEvents(oldEntitySample);
    entityManager.destroyEntityWithoutEvents(newEntitySample);
  }
}
