{
  float t=(float)(time - a.getTime()) / (b.getTime() - a.getTime());
  Vector3f newPos=new Vector3f();
  newPos.interpolate(a.getPosition(),b.getPosition(),t);
  Quat4f newRot=new Quat4f();
  newRot.interpolate(a.getRotation(),b.getRotation(),t);
  LocationComponent location=entity.getComponent(LocationComponent.class);
  location.setWorldPosition(newPos);
  location.setWorldRotation(newRot);
  entity.saveComponent(location);
  CharacterMovementComponent movementComponent=entity.getComponent(CharacterMovementComponent.class);
  movementComponent.mode=a.getMode();
  movementComponent.setVelocity(a.getVelocity());
  movementComponent.grounded=a.isGrounded();
  if (b.getFootstepDelta() < a.getFootstepDelta()) {
    movementComponent.footstepDelta=t * (movementComponent.distanceBetweenFootsteps + b.getFootstepDelta() - a.getFootstepDelta()) + a.getFootstepDelta();
    if (movementComponent.footstepDelta > movementComponent.distanceBetweenFootsteps) {
      movementComponent.footstepDelta-=movementComponent.distanceBetweenFootsteps;
    }
  }
 else {
    movementComponent.footstepDelta=t * (b.getFootstepDelta() - a.getFootstepDelta()) + a.getFootstepDelta();
  }
  entity.saveComponent(movementComponent);
  CharacterComponent characterComponent=entity.getComponent(CharacterComponent.class);
  characterComponent.pitch=b.pitch;
  characterComponent.yaw=b.yaw;
  entity.saveComponent(characterComponent);
  movementComponent.collider.setInterpolationWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),newPos,1.0f)));
}
