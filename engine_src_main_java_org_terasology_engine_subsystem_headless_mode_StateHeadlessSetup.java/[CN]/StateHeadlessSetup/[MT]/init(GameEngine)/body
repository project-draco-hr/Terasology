{
  context=gameEngine.createChildContext();
  CoreRegistry.setContext(context);
  EntitySystemSetupUtil.addEntityManagementRelatedClasses(context);
  entityManager=context.get(EngineEntityManager.class);
  eventSystem=context.get(EventSystem.class);
  context.put(Console.class,new ConsoleImpl(context));
  NUIManager nuiManager=new NUIManagerInternal(context.get(CanvasRenderer.class),context);
  context.put(NUIManager.class,nuiManager);
  componentSystemManager=new ComponentSystemManager(context);
  context.put(ComponentSystemManager.class,componentSystemManager);
  componentSystemManager.register(new ConsoleSystem(),"engine:ConsoleSystem");
  componentSystemManager.register(new CoreCommands(),"engine:CoreCommands");
  componentSystemManager.register(context.get(InputSystem.class),"engine:InputSystem");
  EntityRef localPlayerEntity=entityManager.create(new ClientComponent());
  LocalPlayer localPlayer=new LocalPlayer();
  context.put(LocalPlayer.class,localPlayer);
  localPlayer.setClientEntity(localPlayerEntity);
  componentSystemManager.initialise();
  GameManifest gameManifest=null;
  List<GameInfo> savedGames=GameProvider.getSavedGames();
  if (savedGames.size() > 0) {
    gameManifest=savedGames.get(0).getManifest();
  }
 else {
    gameManifest=createGameManifest();
  }
  gameEngine.changeState(new StateLoading(gameManifest,NetworkMode.LISTEN_SERVER));
}
