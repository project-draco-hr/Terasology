{
  setId("config:controls");
  setBackgroundImage("engine:loadingbackground");
  setModal(true);
  maximize();
  addMouseButtonListener(new MouseButtonListener(){
    @Override public void wheel(    UIDisplayElement element,    int wheel,    boolean intersect){
      if (editButton != null) {
        changeButton(editButton,new Input(InputType.MOUSE_WHEEL,wheel));
        editButton=null;
      }
    }
    @Override public void up(    UIDisplayElement element,    int button,    boolean intersect){
    }
    @Override public void down(    UIDisplayElement element,    int button,    boolean intersect){
      if (editButton != null) {
        changeButton(editButton,new Input(InputType.MOUSE_BUTTON,button));
        editButton=null;
      }
    }
  }
);
  addKeyListener(new KeyListener(){
    @Override public void key(    UIDisplayElement element,    KeyEvent event){
      if (editButton != null) {
        changeButton(editButton,new Input(InputType.KEY,event.getKey()));
        editButton=null;
      }
    }
  }
);
  ClickListener editButtonClick=new ClickListener(){
    @Override public void click(    UIDisplayElement element,    int button){
      if (editButton == null) {
        editButton=(UIButton)element;
        editButtonCurrent=editButton.getLabel().getText();
        editButton.getLabel().setText("...");
      }
    }
  }
;
  title=new UIImage(AssetManager.loadTexture("engine:terasology"));
  title.setSize(new Vector2f(512f,128f));
  title.setHorizontalAlign(EHorizontalAlign.CENTER);
  title.setPosition(new Vector2f(0f,28f));
  title.setVisible(true);
  subtitle=new UILabel("Control Settings");
  subtitle.setHorizontalAlign(EHorizontalAlign.CENTER);
  subtitle.setPosition(new Vector2f(0f,128f));
  subtitle.setVisible(true);
  backToConfigMenuButton=new UIButton(new Vector2f(128f,32f),UIButton.ButtonType.NORMAL);
  backToConfigMenuButton.getLabel().setText("Back");
  backToConfigMenuButton.setHorizontalAlign(EHorizontalAlign.CENTER);
  backToConfigMenuButton.setPosition(new Vector2f(306f,570f));
  backToConfigMenuButton.setVisible(true);
  backToConfigMenuButton.addClickListener(new ClickListener(){
    @Override public void click(    UIDisplayElement element,    int button){
      getGUIManager().openWindow("config");
    }
  }
);
  GridLayout buttonGroupLayout=new GridLayout(2);
  buttonGroupLayout.setCellPadding(new Vector4f(5f,5f,5f,5f));
  buttonGroupLayout.setVerticalCellAlign(EVerticalAlign.CENTER);
  for (int i=0; i < buttonGroups.length; ++i) {
    buttonGroups[i]=new UIComposite();
    buttonGroups[i].setLayout(buttonGroupLayout);
    buttonGroups[i].setVisible(true);
  }
  for (  ButtonDefinition def : buttonDefs) {
    UIButton button=new UIButton(new Vector2f(96f,32f),UIButton.ButtonType.NORMAL);
    button.setUserData(def.bindId);
    button.addClickListener(editButtonClick);
    button.setVisible(true);
    inputButtons.add(button);
    UILabel label=new UILabel(def.displayText);
    label.setVisible(true);
    inputLabels.add(label);
    buttonGroups[def.group].addDisplayElement(label);
    buttonGroups[def.group].addDisplayElement(button);
  }
  mouseSensitivity=new UISlider(new Vector2f(256f,32f),20,150);
  mouseSensitivity.setHorizontalAlign(EHorizontalAlign.CENTER);
  mouseSensitivity.setPosition(new Vector2f(-245f,570f));
  mouseSensitivity.setVisible(true);
  mouseSensitivity.addChangedListener(new ChangedListener(){
    @Override public void changed(    UIDisplayElement element){
      UISlider slider=(UISlider)element;
      slider.setText("Mouse Sensitivity: " + String.valueOf(slider.getValue()));
      Config.getInstance().setMouseSens((float)slider.getValue() / 1000f);
    }
  }
);
  mouseSensitivity.setValue((int)(Config.getInstance().getMouseSens() * 1000));
  defaultButton=new UIButton(new Vector2f(128f,32f),UIButton.ButtonType.NORMAL);
  defaultButton.getLabel().setText("Default");
  defaultButton.setHorizontalAlign(EHorizontalAlign.CENTER);
  defaultButton.setPosition(new Vector2f(-30f,570f));
  defaultButton.setVisible(true);
  defaultButton.addClickListener(new ClickListener(){
    @Override public void click(    UIDisplayElement element,    int button){
      CoreRegistry.get(org.terasology.config.Config.class).getInputConfig().setInputs(InputConfig.createDefault());
      Config.getInstance().setMouseSens(0.075f);
      setup();
      mouseSensitivity.setValue((int)(Config.getInstance().getMouseSens() * 1000));
    }
  }
);
  GridLayout layout=new GridLayout(4);
  layout.setCellPadding(new Vector4f(0f,20f,0f,20f));
  container=new UIComposite();
  container.setHorizontalAlign(EHorizontalAlign.CENTER);
  container.setPosition(new Vector2f(0f,170f));
  container.setLayout(layout);
  container.setVisible(true);
  addDisplayElement(title);
  addDisplayElement(subtitle);
  addDisplayElement(container);
  for (  UIComposite group : buttonGroups) {
    container.addDisplayElement(group);
  }
  addDisplayElement(mouseSensitivity);
  addDisplayElement(defaultButton);
  addDisplayElement(backToConfigMenuButton);
  setup();
}
