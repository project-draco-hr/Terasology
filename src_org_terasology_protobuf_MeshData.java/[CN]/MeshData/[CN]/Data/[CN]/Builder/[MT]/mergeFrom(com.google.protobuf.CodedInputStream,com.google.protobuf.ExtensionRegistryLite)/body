{
  com.google.protobuf.UnknownFieldSet.Builder unknownFields=com.google.protobuf.UnknownFieldSet.newBuilder(this.getUnknownFields());
  while (true) {
    int tag=input.readTag();
switch (tag) {
case 0:
      this.setUnknownFields(unknownFields.build());
    onChanged();
  return this;
default :
{
  if (!parseUnknownField(input,unknownFields,extensionRegistry,tag)) {
    this.setUnknownFields(unknownFields.build());
    onChanged();
    return this;
  }
  break;
}
case 13:
{
ensureVerticesIsMutable();
vertices_.add(input.readFloat());
break;
}
case 10:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addVertices(input.readFloat());
}
input.popLimit(limit);
break;
}
case 21:
{
ensureTexCoords0IsMutable();
texCoords0_.add(input.readFloat());
break;
}
case 18:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addTexCoords0(input.readFloat());
}
input.popLimit(limit);
break;
}
case 29:
{
ensureTexCoords1IsMutable();
texCoords1_.add(input.readFloat());
break;
}
case 26:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addTexCoords1(input.readFloat());
}
input.popLimit(limit);
break;
}
case 37:
{
ensureNormalsIsMutable();
normals_.add(input.readFloat());
break;
}
case 34:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addNormals(input.readFloat());
}
input.popLimit(limit);
break;
}
case 45:
{
ensureColorsIsMutable();
colors_.add(input.readFloat());
break;
}
case 42:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addColors(input.readFloat());
}
input.popLimit(limit);
break;
}
case 48:
{
ensureIndicesIsMutable();
indices_.add(input.readInt32());
break;
}
case 50:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addIndices(input.readInt32());
}
input.popLimit(limit);
break;
}
case 130:
{
bitField0_|=0x00000001;
name_=input.readBytes();
break;
}
}
}
}
