{
  Matrix4f tempRotation=new Matrix4f();
  float probabilityMultiplier=calculateProbabilityMultiplier(depth);
  while (axiomIterator.hasNext()) {
    char c=axiomIterator.nextChar();
switch (c) {
case 'G':
case 'F':
      view.setBlock(posX + (int)position.x + 1,posY + (int)position.y,posZ + (int)position.z,barkType);
    view.setBlock(posX + (int)position.x - 1,posY + (int)position.y,posZ + (int)position.z,barkType);
  view.setBlock(posX + (int)position.x,posY + (int)position.y,posZ + (int)position.z + 1,barkType);
view.setBlock(posX + (int)position.x,posY + (int)position.y,posZ + (int)position.z - 1,barkType);
if (depth > 1) {
int size=1;
for (int x=-size; x <= size; x++) {
  for (int y=-size; y <= size; y++) {
    for (int z=-size; z <= size; z++) {
      if (Math.abs(x) == size && Math.abs(y) == size && Math.abs(z) == size) {
        continue;
      }
      view.setBlock(posX + (int)position.x + x+ 1,posY + (int)position.y + y,posZ + z + (int)position.z,leafType);
      view.setBlock(posX + (int)position.x + x - 1,posY + (int)position.y + y,posZ + z + (int)position.z,leafType);
      view.setBlock(posX + (int)position.x + x,posY + (int)position.y + y,posZ + z + (int)position.z+ 1,leafType);
      view.setBlock(posX + (int)position.x + x,posY + (int)position.y + y,posZ + z + (int)position.z - 1,leafType);
    }
  }
}
}
Vector3f dir=new Vector3f(1,0,0);
rotation.transform(dir);
position.add(dir);
break;
case '[':
recurse(view,rand,posX,posY,posZ,angleOffset,axiomIterator,new Vector3f(position),new Matrix4f(rotation),depth);
break;
case ']':
return;
case '+':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(0,0,1),angle + angleOffset));
rotation.mul(tempRotation);
break;
case '-':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(0,0,-1),angle + angleOffset));
rotation.mul(tempRotation);
break;
case '&':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(0,1,0),angle + angleOffset));
rotation.mul(tempRotation);
break;
case '^':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(0,-1,0),angle + angleOffset));
rotation.mul(tempRotation);
break;
case '*':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(1,0,0),angle));
rotation.mul(tempRotation);
break;
case '/':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(-1,0,0),angle));
rotation.mul(tempRotation);
break;
default :
if (depth == iterations) break;
LSystemRule rule=ruleSet.get(c);
if (rule == null) break;
if (rand.randomFloat() > rule.getProbability() * probabilityMultiplier) break;
recurse(view,rand,posX,posY,posZ,angleOffset,new CharSequenceIterator(rule.getAxiom()),position,rotation,depth + 1);
}
}
}
