{
  EntityData.GlobalStore.Builder store=EntityData.GlobalStore.newBuilder();
  Map<Class<? extends Component>,Integer> componentIdTable=Maps.newHashMap();
  for (  ComponentMetadata<?> componentMetadata : entityManager.getComponentLibrary().iterateComponentMetadata()) {
    store.addComponentClass(componentMetadata.getUri().toString());
    componentIdTable.put(componentMetadata.getType(),componentIdTable.size());
  }
  prefabSerializer.setComponentIdMapping(componentIdTable);
  Set<Prefab> prefabsRequiredForEntityStorage=new HashSet<>();
  for (  EntityRef entityRef : entityManager.getAllEntities()) {
    Prefab prefab=entityRef.getParentPrefab();
    if (prefab != null) {
      prefabsRequiredForEntityStorage.add(prefab);
    }
  }
  for (  Prefab prefab : prefabsRequiredForEntityStorage) {
    store.addPrefab(prefabSerializer.serialize(prefab));
  }
  EntitySerializer entitySerializer=new EntitySerializer(entityManager);
  entitySerializer.setComponentIdMapping(componentIdTable);
  for (  EntityRef entity : entities) {
    if (entity.isPersistent()) {
      store.addEntity(entitySerializer.serialize(entity));
    }
  }
  store.setNextEntityId(nextEntityId);
  return store.build();
}
