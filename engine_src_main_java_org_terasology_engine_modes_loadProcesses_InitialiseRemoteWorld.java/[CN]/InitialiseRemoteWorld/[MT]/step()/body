{
  context.put(LocalPlayer.class,new LocalPlayer());
  RemoteChunkProvider chunkProvider=new RemoteChunkProvider();
  WorldProviderCoreImpl worldProviderCore=new WorldProviderCoreImpl(gameManifest.getWorldInfo(TerasologyConstants.MAIN_WORLD),chunkProvider);
  EntityAwareWorldProvider entityWorldProvider=new EntityAwareWorldProvider(worldProviderCore);
  WorldProvider worldProvider=new WorldProviderWrapper(entityWorldProvider);
  context.put(WorldProvider.class,worldProvider);
  context.put(BlockEntityRegistry.class,entityWorldProvider);
  context.get(ComponentSystemManager.class).register(entityWorldProvider,"engine:BlockEntityRegistry");
  DefaultCelestialSystem celestialSystem=new DefaultCelestialSystem(new BasicCelestialModel());
  context.put(CelestialSystem.class,celestialSystem);
  context.get(ComponentSystemManager.class).register(celestialSystem);
  Skysphere skysphere=new Skysphere();
  BackdropProvider backdropProvider=skysphere;
  BackdropRenderer backdropRenderer=skysphere;
  context.put(BackdropProvider.class,backdropProvider);
  context.put(BackdropRenderer.class,backdropRenderer);
  RenderingSubsystemFactory engineSubsystemFactory=context.get(RenderingSubsystemFactory.class);
  WorldRenderer worldRenderer=engineSubsystemFactory.createWorldRenderer(backdropProvider,backdropRenderer,worldProvider,chunkProvider,context.get(LocalPlayerSystem.class));
  float reflectionHeight=context.get(NetworkSystem.class).getServer().getInfo().getReflectionHeight();
  worldRenderer.getActiveCamera().setReflectionHeight(reflectionHeight);
  context.put(WorldRenderer.class,worldRenderer);
  context.put(Camera.class,worldRenderer.getActiveCamera());
  context.get(NetworkSystem.class).setRemoteWorldProvider(chunkProvider);
  return true;
}
