{
  super.applyParameters(program);
  int texId=0;
  DefaultRenderingProcess.FBO sceneOpaque=DefaultRenderingProcess.getInstance().getFBO("sceneOpaque");
  if (sceneOpaque != null) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindTexture();
    program.setInt("texSceneOpaque",texId++,true);
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindDepthTexture();
    program.setInt("texSceneOpaqueDepth",texId++,true);
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindNormalsTexture();
    program.setInt("texSceneOpaqueNormals",texId++,true);
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneOpaque.bindLightBufferTexture();
    program.setInt("texSceneOpaqueLightBuffer",texId++,true);
  }
  if (CoreRegistry.get(Config.class).getRendering().isVolumetricFog()) {
    Camera activeCamera=CoreRegistry.get(WorldRenderer.class).getActiveCamera();
    if (activeCamera != null) {
      program.setMatrix4("invViewProjMatrix",activeCamera.getInverseViewProjectionMatrix(),true);
    }
    Vector3f fogWorldPosition=new Vector3f(0.0f,32.0f - activeCamera.getPosition().y,0.0f);
    program.setFloat3("fogWorldPosition",fogWorldPosition.x,fogWorldPosition.y,fogWorldPosition.z,true);
    final float worldFog=Math.min(CoreRegistry.get(WorldProvider.class).getFog(activeCamera.getPosition()),0.5f);
    program.setFloat4("volumetricFogSettings",volFogDensityAtViewer,volFogGlobalDensity,volFogHeightFalloff,worldFog);
  }
  DefaultRenderingProcess.FBO sceneTransparent=DefaultRenderingProcess.getInstance().getFBO("sceneTransparent");
  if (sceneTransparent != null) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    sceneTransparent.bindTexture();
    program.setInt("texSceneTransparent",texId++,true);
  }
  if (CoreRegistry.get(Config.class).getRendering().isSsao()) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    DefaultRenderingProcess.getInstance().bindFboTexture("ssaoBlurred");
    program.setInt("texSsao",texId++,true);
  }
  if (CoreRegistry.get(Config.class).getRendering().isOutline()) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    DefaultRenderingProcess.getInstance().bindFboTexture("sobel");
    program.setInt("texEdges",texId++,true);
    program.setFloat("outlineDepthThreshold",outlineDepthThreshold,true);
    program.setFloat("outlineThickness",outlineThickness,true);
  }
  if (CoreRegistry.get(Config.class).getRendering().isInscattering()) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    DefaultRenderingProcess.getInstance().bindFboTexture("sceneSkyBand1");
    program.setInt("texSceneSkyBand",texId++,true);
    Vector4f skyInscatteringSettingsFrag=new Vector4f();
    skyInscatteringSettingsFrag.y=skyInscatteringStrength;
    skyInscatteringSettingsFrag.z=skyInscatteringLength;
    skyInscatteringSettingsFrag.w=skyInscatteringThreshold;
    program.setFloat4("skyInscatteringSettingsFrag",skyInscatteringSettingsFrag,true);
  }
}
