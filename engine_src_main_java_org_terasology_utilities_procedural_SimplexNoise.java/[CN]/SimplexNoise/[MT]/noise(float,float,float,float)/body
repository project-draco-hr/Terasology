{
  float n0;
  float n1;
  float n2;
  float n3;
  float n4;
  float s=(xin + yin + zin+ win) * F4;
  int i=TeraMath.floorToInt(xin + s);
  int j=TeraMath.floorToInt(yin + s);
  int k=TeraMath.floorToInt(zin + s);
  int l=TeraMath.floorToInt(win + s);
  float t=(i + j + k+ l) * G4;
  float xo0=i - t;
  float yo0=j - t;
  float zo0=k - t;
  float wo0=l - t;
  float x0=xin - xo0;
  float y0=yin - yo0;
  float z0=zin - zo0;
  float w0=win - wo0;
  int rankx=0;
  int ranky=0;
  int rankz=0;
  int rankw=0;
  if (x0 > y0) {
    rankx++;
  }
 else {
    ranky++;
  }
  if (x0 > z0) {
    rankx++;
  }
 else {
    rankz++;
  }
  if (x0 > w0) {
    rankx++;
  }
 else {
    rankw++;
  }
  if (y0 > z0) {
    ranky++;
  }
 else {
    rankz++;
  }
  if (y0 > w0) {
    ranky++;
  }
 else {
    rankw++;
  }
  if (z0 > w0) {
    rankz++;
  }
 else {
    rankw++;
  }
  int i1;
  int j1;
  int k1;
  int l1;
  int i2;
  int j2;
  int k2;
  int l2;
  int i3;
  int j3;
  int k3;
  int l3;
  i1=rankx >= 3 ? 1 : 0;
  j1=ranky >= 3 ? 1 : 0;
  k1=rankz >= 3 ? 1 : 0;
  l1=rankw >= 3 ? 1 : 0;
  i2=rankx >= 2 ? 1 : 0;
  j2=ranky >= 2 ? 1 : 0;
  k2=rankz >= 2 ? 1 : 0;
  l2=rankw >= 2 ? 1 : 0;
  i3=rankx >= 1 ? 1 : 0;
  j3=ranky >= 1 ? 1 : 0;
  k3=rankz >= 1 ? 1 : 0;
  l3=rankw >= 1 ? 1 : 0;
  float x1=x0 - i1 + G4;
  float y1=y0 - j1 + G4;
  float z1=z0 - k1 + G4;
  float w1=w0 - l1 + G4;
  float x2=x0 - i2 + 2.0f * G4;
  float y2=y0 - j2 + 2.0f * G4;
  float z2=z0 - k2 + 2.0f * G4;
  float w2=w0 - l2 + 2.0f * G4;
  float x3=x0 - i3 + 3.0f * G4;
  float y3=y0 - j3 + 3.0f * G4;
  float z3=z0 - k3 + 3.0f * G4;
  float w3=w0 - l3 + 3.0f * G4;
  float x4=x0 - 1.0f + 4.0f * G4;
  float y4=y0 - 1.0f + 4.0f * G4;
  float z4=z0 - 1.0f + 4.0f * G4;
  float w4=w0 - 1.0f + 4.0f * G4;
  int ii=i & 255;
  int jj=j & 255;
  int kk=k & 255;
  int ll=l & 255;
  int gi0=perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;
  int gi1=perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;
  int gi2=perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;
  int gi3=perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;
  int gi4=perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;
  float t0=0.6f - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
  if (t0 < 0) {
    n0=0.0f;
  }
 else {
    t0*=t0;
    n0=t0 * t0 * dot(grad4[gi0],x0,y0,z0,w0);
  }
  float t1=0.6f - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;
  if (t1 < 0) {
    n1=0.0f;
  }
 else {
    t1*=t1;
    n1=t1 * t1 * dot(grad4[gi1],x1,y1,z1,w1);
  }
  float t2=0.6f - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;
  if (t2 < 0) {
    n2=0.f;
  }
 else {
    t2*=t2;
    n2=t2 * t2 * dot(grad4[gi2],x2,y2,z2,w2);
  }
  float t3=0.6f - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;
  if (t3 < 0) {
    n3=0.0f;
  }
 else {
    t3*=t3;
    n3=t3 * t3 * dot(grad4[gi3],x3,y3,z3,w3);
  }
  float t4=0.6f - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;
  if (t4 < 0) {
    n4=0.0f;
  }
 else {
    t4*=t4;
    n4=t4 * t4 * dot(grad4[gi4],x4,y4,z4,w4);
  }
  return 27.0f * (n0 + n1 + n2+ n3+ n4);
}
