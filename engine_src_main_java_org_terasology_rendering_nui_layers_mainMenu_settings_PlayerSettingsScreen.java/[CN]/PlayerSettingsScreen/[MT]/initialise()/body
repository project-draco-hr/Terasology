{
  nametext=find("playername",UIText.class);
  if (nametext != null) {
    nametext.setTooltipDelay(0);
    nametext.bindTooltipString(new ReadOnlyBinding<String>(){
      @Override public String get(){
        return validateScreen();
      }
    }
);
  }
  img=find("image",UIImage.class);
  slider=find("tone",UISlider.class);
  if (slider != null) {
    slider.setIncrement(0.01f);
    Function<Object,String> constant=Functions.constant("  ");
    slider.setLabelFunction(constant);
  }
  language=find("language",UIDropdown.class);
  if (language != null) {
    SimpleUri menuUri=new SimpleUri("engine:menu");
    TranslationProject menuProject=translationSystem.getProject(menuUri);
    List<Locale> locales=new ArrayList<>(menuProject.getAvailableLocales());
    language.setOptions(Lists.newArrayList(locales));
    language.setOptionRenderer(new LocaleRenderer(translationSystem));
  }
  WidgetUtil.trySubscribe(this,"close",new ActivateEventListener(){
    @Override public void onActivated(    UIWidget button){
      getManager().popScreen();
    }
  }
);
  UIButton okButton=find("ok",UIButton.class);
  if (okButton != null) {
    okButton.subscribe(new ActivateEventListener(){
      @Override public void onActivated(      UIWidget button){
        savePlayerSettings();
        getManager().popScreen();
      }
    }
);
    okButton.bindEnabled(new ReadOnlyBinding<Boolean>(){
      @Override public Boolean get(){
        return Strings.isNullOrEmpty(validateScreen());
      }
    }
);
    okButton.setTooltipDelay(0);
    okButton.bindTooltipString(new ReadOnlyBinding<String>(){
      @Override public String get(){
        return validateScreen();
      }
    }
);
  }
}
