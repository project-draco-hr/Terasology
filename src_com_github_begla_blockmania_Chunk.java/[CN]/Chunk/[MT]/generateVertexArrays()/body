{
  Vector3f offset=new Vector3f(_position.x * Configuration.CHUNK_DIMENSIONS.x,_position.y * Configuration.CHUNK_DIMENSIONS.y,_position.z * Configuration.CHUNK_DIMENSIONS.z);
  for (int x=0; x < Configuration.CHUNK_DIMENSIONS.x; x++) {
    for (int y=0; y < Configuration.CHUNK_DIMENSIONS.y; y++) {
      for (int z=0; z < Configuration.CHUNK_DIMENSIONS.z; z++) {
        int block=_blocks[x][y][z];
        if (block > 0) {
          boolean drawFront, drawBack, drawLeft, drawRight, drawTop, drawBottom;
          int blockToCheck=blockToCheck=_parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y + 1),getBlockWorldPosZ(z));
          drawTop=isSideVisibleForBlockTypes(blockToCheck,block);
          List<Float> quads=new ArrayList<Float>();
          List<Float> tex=new ArrayList<Float>();
          List<Float> color=new ArrayList<Float>();
          if (drawTop) {
            Vector4f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.TOP);
            float shadowIntens=Math.max(_parent.getLight(getBlockWorldPosX(x),getBlockWorldPosY(y + 1),getBlockWorldPosZ(z)) - (calcSimpleOcclusionAmount(x,y + 1,z) * Configuration.DIMMING_INTENS),Configuration.MIN_LIGHT);
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.TOP).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.TOP).y;
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
          }
          blockToCheck=_parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z - 1));
          drawFront=isSideVisibleForBlockTypes(blockToCheck,block);
          if (drawFront) {
            Vector4f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.FRONT);
            float shadowIntens=Math.max(_parent.getLight(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z - 1)) - Configuration.BLOCK_SIDE_DIMMING - (calcSimpleOcclusionAmount(x,y,z - 1) * Configuration.DIMMING_INTENS),Configuration.MIN_LIGHT);
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.FRONT).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.FRONT).y;
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
          }
          blockToCheck=_parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z + 1));
          drawBack=isSideVisibleForBlockTypes(blockToCheck,block);
          if (drawBack) {
            Vector4f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.BACK);
            float shadowIntens=Math.max(_parent.getLight(getBlockWorldPosX(x),getBlockWorldPosY(y),getBlockWorldPosZ(z + 1)) - Configuration.BLOCK_SIDE_DIMMING - (calcSimpleOcclusionAmount(x,y,z + 1) * Configuration.DIMMING_INTENS),Configuration.MIN_LIGHT);
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.BACK).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.BACK).y;
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
          }
          blockToCheck=_parent.getBlock(getBlockWorldPosX(x - 1),getBlockWorldPosY(y),getBlockWorldPosZ(z));
          drawLeft=isSideVisibleForBlockTypes(blockToCheck,block);
          if (drawLeft) {
            Vector4f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.LEFT);
            float shadowIntens=Math.max(_parent.getLight(getBlockWorldPosX(x - 1),getBlockWorldPosY(y),getBlockWorldPosZ(z)) - Configuration.BLOCK_SIDE_DIMMING - (calcSimpleOcclusionAmount(x - 1,y,z) * Configuration.DIMMING_INTENS),Configuration.MIN_LIGHT);
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.LEFT).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.LEFT).y;
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
          }
          blockToCheck=_parent.getBlock(getBlockWorldPosX(x + 1),getBlockWorldPosY(y),getBlockWorldPosZ(z));
          drawRight=isSideVisibleForBlockTypes(blockToCheck,block);
          if (drawRight) {
            Vector4f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.RIGHT);
            float shadowIntens=Math.max(_parent.getLight(getBlockWorldPosX(x + 1),getBlockWorldPosY(y),getBlockWorldPosZ(z)) - Configuration.BLOCK_SIDE_DIMMING - (calcSimpleOcclusionAmount(x + 1,y,z) * Configuration.DIMMING_INTENS),Configuration.MIN_LIGHT);
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.RIGHT).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.RIGHT).y;
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
          }
          blockToCheck=_parent.getBlock(getBlockWorldPosX(x),getBlockWorldPosY(y - 1),getBlockWorldPosZ(z));
          drawBottom=isSideVisibleForBlockTypes(blockToCheck,block);
          if (drawBottom) {
            Vector4f colorOffset=Helper.getInstance().getColorOffsetFor(block,Helper.SIDE.BOTTOM);
            float shadowIntens=Math.max(_parent.getLight(getBlockWorldPosX(x),getBlockWorldPosY(y - 1),getBlockWorldPosZ(z)) - Configuration.BLOCK_SIDE_DIMMING - (calcSimpleOcclusionAmount(x,y - 1,z) * Configuration.DIMMING_INTENS),Configuration.MIN_LIGHT);
            float texOffsetX=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.BOTTOM).x;
            float texOffsetY=Helper.getInstance().getTextureOffsetFor(block,Helper.SIDE.BOTTOM).y;
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(-0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX + 0.0625f);
            tex.add(texOffsetY + 0.0625f);
            quads.add(0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
            color.add(colorOffset.x * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.y * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.z * shadowIntens * _parent.getDaylight());
            color.add(colorOffset.w);
            tex.add(texOffsetX);
            tex.add(texOffsetY + 0.0625f);
            quads.add(-0.5f + x + offset.x);
            quads.add(-0.5f + y + offset.y);
            quads.add(0.5f + z + offset.z);
          }
          if (!Helper.getInstance().isBlockTypeTranslucent(block)) {
            _quadsOpaque.addAll(quads);
            _texOpaque.addAll(tex);
            _colorOpaque.addAll(color);
          }
 else {
            _quadsTranslucent.addAll(quads);
            _texTranslucent.addAll(tex);
            _colorTranslucent.addAll(color);
          }
        }
      }
    }
  }
}
