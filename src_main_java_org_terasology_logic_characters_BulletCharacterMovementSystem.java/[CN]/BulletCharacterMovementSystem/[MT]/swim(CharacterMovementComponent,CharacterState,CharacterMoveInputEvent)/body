{
  CharacterState newState=new CharacterState(state);
  Vector3f desiredVelocity=new Vector3f(input.getMovementDirection());
  float lengthSquared=desiredVelocity.lengthSquared();
  if (lengthSquared > 1) {
    desiredVelocity.normalize();
  }
  float maxSpeed=movementComp.maxWaterSpeed;
  if (input.isRunning()) {
    maxSpeed*=movementComp.runFactor;
  }
  desiredVelocity.scale(maxSpeed);
  desiredVelocity.y-=UNDERWATER_GRAVITY;
  Vector3f velocityDiff=new Vector3f(desiredVelocity);
  velocityDiff.sub(state.getVelocity());
  velocityDiff.scale(Math.min(UNDERWATER_INERTIA * input.getDeltaMS(),1.0f));
  newState.getVelocity().x+=velocityDiff.x;
  newState.getVelocity().y+=velocityDiff.y;
  newState.getVelocity().z+=velocityDiff.z;
  float speed=newState.getVelocity().length();
  if (speed > movementComp.maxWaterSpeed) {
    newState.getVelocity().scale((speed - 4 * (speed - movementComp.maxWaterSpeed) * input.getDeltaMS()) / speed);
  }
  Vector3f moveDelta=new Vector3f(newState.getVelocity());
  moveDelta.scale(input.getDeltaMS());
  MoveResult moveResult=move(state.getPosition(),moveDelta,0,-1,movementComp.collider);
  Vector3f distanceMoved=new Vector3f(moveResult.finalPosition);
  distanceMoved.sub(state.getPosition());
  newState.getPosition().set(moveResult.finalPosition);
  return newState;
}
