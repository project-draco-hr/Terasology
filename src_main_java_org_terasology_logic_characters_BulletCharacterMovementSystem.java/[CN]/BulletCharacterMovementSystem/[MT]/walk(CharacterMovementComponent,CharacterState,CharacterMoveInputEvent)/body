{
  CharacterState newState=new CharacterState(state);
  Vector3f desiredVelocity=new Vector3f(input.getMovementDirection());
  float lengthSquared=desiredVelocity.lengthSquared();
  if (lengthSquared > 1) {
    desiredVelocity.normalize();
  }
  float maxSpeed=movementComp.maxGroundSpeed;
  if (input.isRunning()) {
    maxSpeed*=movementComp.runFactor;
  }
  if (desiredVelocity.y != 0) {
    float speed=desiredVelocity.length();
    desiredVelocity.y=0;
    if (desiredVelocity.x != 0 || desiredVelocity.z != 0) {
      desiredVelocity.normalize();
      desiredVelocity.scale(speed);
    }
  }
  desiredVelocity.scale(maxSpeed);
  Vector3f velocityDiff=new Vector3f(desiredVelocity);
  velocityDiff.sub(state.getVelocity());
  velocityDiff.scale(Math.min(movementComp.groundFriction * input.getDeltaMS(),1.0f));
  newState.getVelocity().x+=velocityDiff.x;
  newState.getVelocity().z+=velocityDiff.z;
  newState.getVelocity().y=Math.max(-TERMINAL_VELOCITY,(newState.getVelocity().y - GRAVITY * input.getDeltaMS()));
  Vector3f moveDelta=new Vector3f(newState.getVelocity());
  moveDelta.scale(input.getDeltaMS());
  MoveResult moveResult=move(state.getPosition(),moveDelta,(state.isGrounded()) ? movementComp.stepHeight : 0,movementComp.slopeFactor,movementComp.collider);
  Vector3f distanceMoved=new Vector3f(moveResult.finalPosition);
  distanceMoved.sub(newState.getPosition());
  newState.getPosition().set(moveResult.finalPosition);
  movementComp.collider.setWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),moveResult.finalPosition,1.0f)));
  if (moveResult.hitBottom) {
    if (!newState.isGrounded()) {
      newState.setGrounded(true);
    }
    newState.getVelocity().y=0;
  }
 else {
    if (moveResult.hitTop && newState.getVelocity().y > 0) {
      newState.getVelocity().y=-0.5f * newState.getVelocity().y;
    }
    newState.setGrounded(false);
  }
  if (moveResult.hitHoriz) {
  }
  if (newState.isGrounded()) {
  }
  return newState;
}
