{
  super.applyParameters(program);
  Optional<Texture> terrain=Assets.getTexture("engine:terrain");
  Optional<Texture> terrainNormal=Assets.getTexture("engine:terrainNormal");
  Optional<Texture> terrainHeight=Assets.getTexture("engine:terrainHeight");
  Optional<Texture> water=Assets.getTexture("engine:waterStill");
  Optional<Texture> lava=Assets.getTexture("engine:lavaStill");
  Optional<Texture> waterNormal=Assets.getTexture("engine:waterNormal");
  Optional<Texture> waterNormalAlt=Assets.getTexture("engine:waterNormalAlt");
  Optional<Texture> effects=Assets.getTexture("engine:effects");
  if (!terrain.isPresent() || !water.isPresent() || !lava.isPresent()|| !waterNormal.isPresent()|| !effects.isPresent()) {
    return;
  }
  DynamicFBM dynamicFBM=CoreRegistry.get(DynamicFBM.class);
  RenderingConfig renderingConfig=CoreRegistry.get(Config.class).getRendering();
  int texId=0;
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  glBindTexture(GL11.GL_TEXTURE_2D,terrain.get().getId());
  program.setInt("textureAtlas",texId++,true);
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  glBindTexture(GL11.GL_TEXTURE_2D,water.get().getId());
  program.setInt("textureWater",texId++,true);
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  glBindTexture(GL11.GL_TEXTURE_2D,lava.get().getId());
  program.setInt("textureLava",texId++,true);
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  glBindTexture(GL11.GL_TEXTURE_2D,waterNormal.get().getId());
  program.setInt("textureWaterNormal",texId++,true);
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  glBindTexture(GL11.GL_TEXTURE_2D,waterNormalAlt.get().getId());
  program.setInt("textureWaterNormalAlt",texId++,true);
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  glBindTexture(GL11.GL_TEXTURE_2D,effects.get().getId());
  program.setInt("textureEffects",texId++,true);
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  dynamicFBM.bindFboColorTexture(WorldReflectionNode.REFLECTED_URN);
  program.setInt("textureWaterReflection",texId++,true);
  GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
  dynamicFBM.bindFboColorTexture(DefaultDynamicFBOs.ReadOnlyGBuffer.getResourceUrn());
  program.setInt("texSceneOpaque",texId++,true);
  if (renderingConfig.isNormalMapping()) {
    GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
    glBindTexture(GL11.GL_TEXTURE_2D,terrainNormal.get().getId());
    program.setInt("textureAtlasNormal",texId++,true);
    if (renderingConfig.isParallaxMapping()) {
      GL13.glActiveTexture(GL13.GL_TEXTURE0 + texId);
      glBindTexture(GL11.GL_TEXTURE_2D,terrainHeight.get().getId());
      program.setInt("textureAtlasHeight",texId++,true);
      program.setFloat4("parallaxProperties",parallaxBias,parallaxScale,0.0f,0.0f,true);
    }
  }
  Vector4f lightingSettingsFrag=new Vector4f();
  lightingSettingsFrag.z=waterSpecExp;
  program.setFloat4("lightingSettingsFrag",lightingSettingsFrag,true);
  Vector4f waterSettingsFrag=new Vector4f();
  waterSettingsFrag.x=waterNormalBias;
  waterSettingsFrag.y=waterRefraction;
  waterSettingsFrag.z=waterFresnelBias;
  waterSettingsFrag.w=waterFresnelPow;
  program.setFloat4("waterSettingsFrag",waterSettingsFrag,true);
  Vector4f alternativeWaterSettingsFrag=new Vector4f();
  alternativeWaterSettingsFrag.x=waterTint;
  program.setFloat4("alternativeWaterSettingsFrag",alternativeWaterSettingsFrag,true);
  if (renderingConfig.isAnimateWater()) {
    program.setFloat("waveIntensFalloff",waveIntensFalloff,true);
    program.setFloat("waveSizeFalloff",waveSizeFalloff,true);
    program.setFloat("waveSize",waveSize,true);
    program.setFloat("waveSpeedFalloff",waveSpeedFalloff,true);
    program.setFloat("waveSpeed",waveSpeed,true);
    program.setFloat("waveIntens",waveIntens,true);
    program.setFloat("waterOffsetY",waterOffsetY,true);
    program.setFloat("waveOverallScale",waveOverallScale,true);
  }
}
