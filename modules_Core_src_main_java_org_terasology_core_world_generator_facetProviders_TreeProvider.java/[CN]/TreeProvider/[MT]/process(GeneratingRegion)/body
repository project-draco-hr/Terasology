{
  Border3D borderForTreeFacet=region.getBorderForFacet(TreeFacet.class);
  TreeFacet facet=new TreeFacet(region.getRegion(),borderForTreeFacet.extendBy(0,15,10));
  SurfaceHeightFacet surface=region.getRegionFacet(SurfaceHeightFacet.class);
  DensityFacet density=region.getRegionFacet(DensityFacet.class);
  SeaLevelFacet seaLevel=region.getRegionFacet(SeaLevelFacet.class);
  int minY=facet.getWorldRegion().minY();
  int maxY=facet.getWorldRegion().maxY();
  for (int z=facet.getWorldRegion().minZ(); z <= facet.getWorldRegion().maxZ(); z++) {
    for (int x=facet.getWorldRegion().minX(); x <= facet.getWorldRegion().maxX(); x++) {
      int height=TeraMath.ceilToInt(surface.getWorld(x,z));
      if (height >= minY && height <= maxY) {
        if (height > seaLevel.getSeaLevel()) {
          float densBelow=density.getWorld(x,height - 1,z);
          float densThis=density.getWorld(x,height,z);
          if (densBelow >= 0 && densThis < 0 && (TeraMath.ceilToInt(surface.getWorld(x - 1,z)) == height) && (TeraMath.ceilToInt(surface.getWorld(x + 1,z)) == height) && (TeraMath.ceilToInt(surface.getWorld(x,z - 1)) == height) && (TeraMath.ceilToInt(surface.getWorld(x,z + 1)) == height) && treeNoise.noise(x,z) / 255f < configuration.density) {
            facet.setWorld(x,height,z,Integer.valueOf(treeSeedNoise.noise(x,z)));
          }
        }
      }
    }
  }
  region.setRegionFacet(TreeFacet.class,facet);
}
