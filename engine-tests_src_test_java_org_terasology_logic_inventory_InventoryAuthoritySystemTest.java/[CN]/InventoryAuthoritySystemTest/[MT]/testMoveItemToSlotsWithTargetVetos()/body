{
  int stackSize=10;
  EntityRef toInventory=inventory;
  InventoryComponent toInventoryComp=toInventory.getComponent(InventoryComponent.class);
  EntityRef itemA1=createItem("A",8,stackSize);
  toInventoryComp.itemSlots.set(0,itemA1);
  EntityRef fromInventory=Mockito.mock(EntityRef.class);
  InventoryComponent fromInventoryComp=new InventoryComponent(5);
  Mockito.when(fromInventory.getComponent(InventoryComponent.class)).thenReturn(fromInventoryComp);
  EntityRef itemA2=createItem("A",5,stackSize);
  int fromSlot=1;
  fromInventoryComp.itemSlots.set(fromSlot,itemA2);
  Mockito.when(inventory.send(Matchers.any(BeforeItemPutInInventory.class))).then(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Exception {
      Object arg=invocation.getArguments()[0];
      if (arg instanceof BeforeItemPutInInventory) {
        BeforeItemPutInInventory event=(BeforeItemPutInInventory)arg;
        if (event.getSlot() == 1) {
          event.consume();
        }
      }
      return null;
    }
  }
);
  List<Integer> toSlots=Arrays.asList(0,1,2,3,4);
  boolean result=inventoryAuthoritySystem.moveItemToSlots(instigator,fromInventory,fromSlot,toInventory,toSlots);
  assertTrue(result);
  assertEquals(10,itemA1.getComponent(ItemComponent.class).stackCount);
  assertEquals(3,itemA2.getComponent(ItemComponent.class).stackCount);
  assertEquals(EntityRef.NULL,toInventoryComp.itemSlots.get(1));
  assertEquals(itemA2,toInventoryComp.itemSlots.get(2));
  assertFalse(fromInventoryComp.itemSlots.get(fromSlot).exists());
}
