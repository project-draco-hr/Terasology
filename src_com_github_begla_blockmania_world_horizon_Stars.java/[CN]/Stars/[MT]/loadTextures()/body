{
  int internalFormat=GL11.GL_RGBA8, format=GL12.GL_BGR, face=0;
  GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT,1);
  GL11.glGenTextures(textureId);
  GL11.glBindTexture(GL13.GL_TEXTURE_CUBE_MAP,textureId.get(0));
  GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP,GL11.GL_TEXTURE_WRAP_S,GL11.GL_LINEAR);
  GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP,GL11.GL_TEXTURE_WRAP_T,GL11.GL_LINEAR);
  GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP,GL11.GL_TEXTURE_MAG_FILTER,GL11.GL_LINEAR);
  GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP,GL11.GL_TEXTURE_MIN_FILTER,GL11.GL_LINEAR);
  GL11.glTexEnvf(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_REPLACE);
  for (int i=1; i <= 6; i++) {
switch (i) {
case 1:
      face=GL13.GL_TEXTURE_CUBE_MAP_POSITIVE_X;
    break;
case 2:
  face=GL13.GL_TEXTURE_CUBE_MAP_NEGATIVE_X;
break;
case 3:
face=GL13.GL_TEXTURE_CUBE_MAP_POSITIVE_Y;
break;
case 4:
face=GL13.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y;
break;
case 5:
face=GL13.GL_TEXTURE_CUBE_MAP_POSITIVE_Z;
break;
case 6:
face=GL13.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z;
break;
}
byte[] data=TextureManager.getInstance().getTexture("stars" + i).getTextureData();
ByteBuffer byteBuffer=ByteBuffer.allocateDirect(data.length).order(ByteOrder.nativeOrder()).put(data);
byteBuffer.flip();
GL11.glTexImage2D(face,0,internalFormat,TextureManager.getInstance().getTexture("stars" + i).getImageWidth(),TextureManager.getInstance().getTexture("stars" + i).getImageHeight(),0,format,GL11.GL_UNSIGNED_BYTE,byteBuffer);
}
}
