{
  if (!engine.hasFocus()) {
    return;
  }
  Vector2i deltaMouse=mouse.getDelta();
  if (deltaMouse.x != 0) {
    MouseAxisEvent event=new MouseXAxisEvent(deltaMouse.x * config.getInput().getMouseSensitivity(),delta);
    setupTarget(event);
    for (    EntityRef entity : getInputEntities()) {
      entity.send(event);
      if (event.isConsumed()) {
        break;
      }
    }
  }
  if (deltaMouse.y != 0) {
    MouseAxisEvent event=new MouseYAxisEvent(deltaMouse.y * config.getInput().getMouseSensitivity(),delta);
    setupTarget(event);
    for (    EntityRef entity : getInputEntities()) {
      entity.send(event);
      if (event.isConsumed()) {
        break;
      }
    }
  }
  for (  InputAction action : mouse.getInputQueue()) {
switch (action.getInput().getType()) {
case MOUSE_BUTTON:
      int id=action.getInput().getId();
    if (id != -1) {
      MouseInput button=MouseInput.getInputFor(action.getInput().getType(),action.getInput().getId());
      boolean consumed=sendMouseEvent(button,action.getState().isDown(),mouse.getPosition(),delta);
      BindableButtonImpl bind=mouseButtonBinds.get(button);
      if (bind != null) {
        bind.updateBindState(action.getState().isDown(),delta,getInputEntities(),targetSystem.getTarget(),targetSystem.getTargetBlockPosition(),targetSystem.getHitPosition(),targetSystem.getHitNormal(),consumed);
      }
    }
  break;
case MOUSE_WHEEL:
int dir=action.getInput().getId();
if (dir != 0 && action.getTurns() != 0) {
boolean consumed=sendMouseWheelEvent(dir * action.getTurns(),delta);
BindableButtonImpl bind=(dir == 1) ? mouseWheelUpBind : mouseWheelDownBind;
if (bind != null) {
  for (int i=0; i < action.getTurns(); ++i) {
    bind.updateBindState(true,delta,getInputEntities(),targetSystem.getTarget(),targetSystem.getTargetBlockPosition(),targetSystem.getHitPosition(),targetSystem.getHitNormal(),consumed);
    bind.updateBindState(false,delta,getInputEntities(),targetSystem.getTarget(),targetSystem.getTargetBlockPosition(),targetSystem.getHitPosition(),targetSystem.getHitNormal(),consumed);
  }
}
}
break;
case KEY:
break;
}
}
}
