{
  deltaToSave.getEntityDeltas().forEachEntry(new TLongObjectProcedure<EntityDelta>(){
    @Override public boolean execute(    long entityId,    EntityDelta delta){
      if (entityId >= privateEntityManager.getNextId()) {
        privateEntityManager.setNextId(entityId + 1);
      }
      return true;
    }
  }
);
  deltaToSave.getDestroyedEntities().forEach(new TLongProcedure(){
    @Override public boolean execute(    long entityId){
      if (entityId >= privateEntityManager.getNextId()) {
        privateEntityManager.setNextId(entityId + 1);
      }
      return true;
    }
  }
);
  deltaToSave.getEntityDeltas().forEachEntry(new TLongObjectProcedure<EntityDelta>(){
    @Override public boolean execute(    long entityId,    EntityDelta delta){
      if (entityId >= privateEntityManager.getNextId()) {
        privateEntityManager.setNextId(entityId + 1);
      }
      if (privateEntityManager.isActiveEntity(entityId)) {
        EntityRef entity=privateEntityManager.getEntity(entityId);
        for (        Component changedComponent : delta.getChangedComponents().values()) {
          entity.removeComponent(changedComponent.getClass());
          entity.addComponent(changedComponent);
        }
        for (        Class<? extends Component> c : delta.getRemovedComponents()) {
          entity.removeComponent(c);
        }
      }
 else {
        EntityRef created=privateEntityManager.createEntityWithId(entityId,delta.getChangedComponents().values());
      }
      return true;
    }
  }
);
  final List<EntityRef> entitiesToDestroy=Lists.newArrayList();
  deltaToSave.getDestroyedEntities().forEach(new TLongProcedure(){
    @Override public boolean execute(    long entityId){
      EntityRef entityToDestroy;
      if (privateEntityManager.isActiveEntity(entityId)) {
        entityToDestroy=privateEntityManager.getEntity(entityId);
      }
 else {
        entityToDestroy=privateEntityManager.createEntityWithId(entityId,Collections.<Component>emptyList());
      }
      entitiesToDestroy.add(entityToDestroy);
      return true;
    }
  }
);
  deltaToSave.bindAllDelayedEntityRefsTo(privateEntityManager);
  for (  EntityRef entityRef : entitiesToDestroy) {
    entityRef.destroy();
  }
  deltaToSave.getDeactivatedEntities().forEach(new TLongProcedure(){
    @Override public boolean execute(    long entityId){
      EntityRef entityRef=privateEntityManager.getEntity(entityId);
      privateEntityManager.deactivateForStorage(entityRef);
      return true;
    }
  }
);
}
