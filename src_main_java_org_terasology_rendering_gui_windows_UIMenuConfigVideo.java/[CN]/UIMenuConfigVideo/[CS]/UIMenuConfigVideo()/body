{
  setBackgroundImage("engine:loadingbackground");
  setModal(true);
  maximize();
  _title=new UIImage(AssetManager.loadTexture("engine:terasology"));
  _title.setHorizontalAlign(EHorizontalAlign.CENTER);
  _title.setPosition(new Vector2f(0f,128f));
  _title.setVisible(true);
  _title.setSize(new Vector2f(512f,128f));
  _version=new UIText("Video Settings");
  _version.setHorizontalAlign(EHorizontalAlign.CENTER);
  _version.setPosition(new Vector2f(0f,230f));
  _version.setVisible(true);
  _graphicsQualityButton=new UIStateButton(new Vector2f(256f,32f));
  StateButtonAction graphicsQualityStateAction=new StateButtonAction(){
    @Override public void action(    UIDisplayElement element){
      UIStateButton button=(UIStateButton)element;
switch (button.getState()) {
case 0:
        Config.getInstance().setEnablePostProcessingEffects(false);
      Config.getInstance().setFlickeringLight(false);
    break;
case 1:
  Config.getInstance().setEnablePostProcessingEffects(false);
Config.getInstance().setFlickeringLight(true);
break;
case 2:
Config.getInstance().setEnablePostProcessingEffects(true);
Config.getInstance().setFlickeringLight(true);
break;
}
ShaderManager.getInstance().recompileAllShaders();
}
}
;
_graphicsQualityButton.addState("Graphics Quality: Ugly",graphicsQualityStateAction);
_graphicsQualityButton.addState("Graphics Quality: Nice",graphicsQualityStateAction);
_graphicsQualityButton.addState("Graphics Quality: Epic",graphicsQualityStateAction);
_graphicsQualityButton.addClickListener(clickAction);
_graphicsQualityButton.setHorizontalAlign(EHorizontalAlign.CENTER);
_graphicsQualityButton.setPosition(new Vector2f(-_graphicsQualityButton.getSize().x / 2f - 10f,300f));
_graphicsQualityButton.setVisible(true);
_viewingDistanceButton=new UIStateButton(new Vector2f(256f,32f));
StateButtonAction viewingDistanceStateAction=new StateButtonAction(){
@Override public void action(UIDisplayElement element){
UIStateButton button=(UIStateButton)element;
Config.getInstance().setViewingDistanceById(button.getState());
}
}
;
_viewingDistanceButton.addState("Viewing Distance: Near",viewingDistanceStateAction);
_viewingDistanceButton.addState("Viewing Distance: Moderate",viewingDistanceStateAction);
_viewingDistanceButton.addState("Viewing Distance: Far",viewingDistanceStateAction);
_viewingDistanceButton.addState("Viewing Distance: Ultra",viewingDistanceStateAction);
_viewingDistanceButton.addClickListener(clickAction);
_viewingDistanceButton.setHorizontalAlign(EHorizontalAlign.CENTER);
_viewingDistanceButton.setPosition(new Vector2f(-_viewingDistanceButton.getSize().x / 2f - 10f,300f + 40f));
_viewingDistanceButton.setVisible(true);
_fovButton=new UISlider(new Vector2f(256f,32f),75,120);
_fovButton.addChangedListener(new ChangedListener(){
@Override public void changed(UIDisplayElement element){
UISlider slider=(UISlider)element;
slider.setText("FOV: " + String.valueOf(slider.getValue()));
Config.getInstance().setFov(slider.getValue());
}
}
);
_fovButton.setHorizontalAlign(EHorizontalAlign.CENTER);
_fovButton.setPosition(new Vector2f(-_fovButton.getSize().x / 2f - 10f,300f + 2 * 40f));
_fovButton.setVisible(true);
_bobbingButton=new UIStateButton(new Vector2f(256f,32f));
StateButtonAction bobbingStateAction=new StateButtonAction(){
@Override public void action(UIDisplayElement element){
UIStateButton button=(UIStateButton)element;
if (button.getState() == 0) Config.getInstance().setCameraBobbing(false);
 else Config.getInstance().setCameraBobbing(true);
}
}
;
_bobbingButton.addState("Bobbing: Off",bobbingStateAction);
_bobbingButton.addState("Bobbing: On",bobbingStateAction);
_bobbingButton.addClickListener(clickAction);
_bobbingButton.setHorizontalAlign(EHorizontalAlign.CENTER);
_bobbingButton.setPosition(new Vector2f(-_bobbingButton.getSize().x / 2f - 10f,300f + 3 * 40f));
_bobbingButton.setVisible(true);
_animateGrassButton=new UIStateButton(new Vector2f(256f,32f));
StateButtonAction animateGrassStateAction=new StateButtonAction(){
@Override public void action(UIDisplayElement element){
UIStateButton button=(UIStateButton)element;
if (button.getState() == 0) Config.getInstance().setAnimatedGrass(false);
 else Config.getInstance().setAnimatedGrass(true);
ShaderManager.getInstance().recompileAllShaders();
}
}
;
_animateGrassButton.addState("Animate Grass: Off",animateGrassStateAction);
_animateGrassButton.addState("Animate Grass: On",animateGrassStateAction);
_animateGrassButton.addClickListener(clickAction);
_animateGrassButton.setHorizontalAlign(EHorizontalAlign.CENTER);
_animateGrassButton.setPosition(new Vector2f(_animateGrassButton.getSize().x / 2f,300f));
_animateGrassButton.setVisible(true);
_reflectiveWaterButton=new UIStateButton(new Vector2f(256f,32f));
StateButtonAction reflectiveWaterStateAction=new StateButtonAction(){
@Override public void action(UIDisplayElement element){
UIStateButton button=(UIStateButton)element;
if (button.getState() == 0) Config.getInstance().setComplexWater(false);
 else Config.getInstance().setComplexWater(true);
ShaderManager.getInstance().recompileAllShaders();
}
}
;
_reflectiveWaterButton.addState("Reflective water: Off",reflectiveWaterStateAction);
_reflectiveWaterButton.addState("Reflective water: On",reflectiveWaterStateAction);
_reflectiveWaterButton.addClickListener(clickAction);
_reflectiveWaterButton.setHorizontalAlign(EHorizontalAlign.CENTER);
_reflectiveWaterButton.setPosition(new Vector2f(_reflectiveWaterButton.getSize().x / 2f,300f + 40f));
_reflectiveWaterButton.setVisible(true);
_blurIntensityButton=new UIStateButton(new Vector2f(256f,32f));
StateButtonAction blurIntensityStateAction=new StateButtonAction(){
@Override public void action(UIDisplayElement element){
UIStateButton button=(UIStateButton)element;
Config.getInstance().setBlurIntensity(button.getState());
}
}
;
_blurIntensityButton.addState("Blur intensity: Off",blurIntensityStateAction);
_blurIntensityButton.addState("Blur intensity: Some",blurIntensityStateAction);
_blurIntensityButton.addState("Blur intensity: Normal",blurIntensityStateAction);
_blurIntensityButton.addState("Blur intensity: Max",blurIntensityStateAction);
_blurIntensityButton.addClickListener(clickAction);
_blurIntensityButton.setHorizontalAlign(EHorizontalAlign.CENTER);
_blurIntensityButton.setPosition(new Vector2f(_blurIntensityButton.getSize().x / 2f,300f + 2 * 40f));
_blurIntensityButton.setVisible(true);
_backToConfigMenuButton=new UIButton(new Vector2f(256f,32f),UIButton.eButtonType.NORMAL);
_backToConfigMenuButton.getLabel().setText("Back");
_backToConfigMenuButton.setHorizontalAlign(EHorizontalAlign.CENTER);
_backToConfigMenuButton.setPosition(new Vector2f(0f,300f + 7 * 40f));
_backToConfigMenuButton.setVisible(true);
_backToConfigMenuButton.addClickListener(new ClickListener(){
@Override public void click(UIDisplayElement element,int button){
GUIManager.getInstance().setFocusedWindow(GUIManager.getInstance().getWindowById("menuConfig"));
}
}
);
addDisplayElement(_title);
addDisplayElement(_version);
addDisplayElement(_graphicsQualityButton,"graphicsQualityButton");
addDisplayElement(_fovButton,"fovSlider");
addDisplayElement(_viewingDistanceButton,"viewingDistanceButton");
addDisplayElement(_animateGrassButton,"animateGrassButton");
addDisplayElement(_reflectiveWaterButton,"reflectiveWaterButton");
addDisplayElement(_blurIntensityButton,"blurIntensityButton");
addDisplayElement(_bobbingButton,"bobbingButton");
addDisplayElement(_backToConfigMenuButton,"backToConfigMenuButton");
}
