{
  SplashScreen.getInstance().post("Loading modules ...");
  ModuleManager moduleManager=CoreRegistry.putPermanently(ModuleManager.class,new ModuleManagerImpl());
  SplashScreen.getInstance().post("Loading reflections ...");
  ReflectFactory reflectFactory=CoreRegistry.putPermanently(ReflectFactory.class,new ReflectionReflectFactory());
  CopyStrategyLibrary copyStrategyLibrary=CoreRegistry.putPermanently(CopyStrategyLibrary.class,new CopyStrategyLibrary(reflectFactory));
  CoreRegistry.putPermanently(TypeSerializationLibrary.class,new TypeSerializationLibrary(reflectFactory,copyStrategyLibrary));
  SplashScreen.getInstance().post("Loading assets ...");
  assetTypeManager=CoreRegistry.putPermanently(ModuleAwareAssetTypeManager.class,new ModuleAwareAssetTypeManager());
  CoreRegistry.putPermanently(AssetManager.class,assetTypeManager.getAssetManager());
  CoreRegistry.putPermanently(CollisionGroupManager.class,new CollisionGroupManager());
  CoreRegistry.putPermanently(WorldGeneratorManager.class,new WorldGeneratorManager());
  CoreRegistry.putPermanently(ComponentSystemManager.class,new ComponentSystemManager());
  CoreRegistry.putPermanently(ParameterAdapterManager.class,ParameterAdapterManager.createCore());
  CoreRegistry.putPermanently(NetworkSystem.class,new NetworkSystemImpl(time));
  CoreRegistry.putPermanently(Game.class,new Game(this,time));
}
