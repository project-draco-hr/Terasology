{
  if (initialised) {
    return;
  }
  Stopwatch sw=Stopwatch.createStarted();
  try {
    logger.info("Initializing Terasology...");
    logger.info(TerasologyVersion.getInstance().toString());
    logger.info("Home path: {}",PathManager.getInstance().getHomePath());
    logger.info("Install path: {}",PathManager.getInstance().getInstallPath());
    logger.info("Java: {} in {}",System.getProperty("java.version"),System.getProperty("java.home"));
    logger.info("Java VM: {}, version: {}",System.getProperty("java.vm.name"),System.getProperty("java.vm.version"));
    logger.info("OS: {}, arch: {}, version: {}",System.getProperty("os.name"),System.getProperty("os.arch"),System.getProperty("os.version"));
    logger.info("Max. Memory: {} MB",Runtime.getRuntime().maxMemory() / (1024 * 1024));
    logger.info("Processors: {}",Runtime.getRuntime().availableProcessors());
    initConfig();
    for (    EngineSubsystem subsystem : getSubsystems()) {
      subsystem.preInitialise();
    }
    time=(EngineTime)CoreRegistry.get(Time.class);
    if (time == null) {
      throw new IllegalStateException("Time not registered as a core system.");
    }
    initManagers();
    for (    EngineSubsystem subsystem : getSubsystems()) {
      subsystem.postInitialise(config);
    }
    if (CoreRegistry.get(DisplayDevice.class) == null) {
      throw new IllegalStateException("DisplayDevice not registered as a core system.");
    }
    if (CoreRegistry.get(RenderingSubsystemFactory.class) == null) {
      throw new IllegalStateException("EngineSubsystemFactory not registered as a core system.");
    }
    if (CoreRegistry.get(InputSystem.class) == null) {
      throw new IllegalStateException("InputSystem not registered as a core system.");
    }
    initAssets();
    if (config.getSystem().isMonitoringEnabled()) {
      new AdvancedMonitor().setVisible(true);
    }
    initialised=true;
  }
 catch (  RuntimeException e) {
    logger.error("Failed to initialise Terasology",e);
    cleanup();
    throw e;
  }
  double secs=0.001 * sw.elapsed(TimeUnit.MILLISECONDS);
  logger.info("Initialization completed in {}sec.",String.format("%.2f",secs));
}
