{
  NetworkSystem networkSystem=CoreRegistry.get(NetworkSystem.class);
  Display display=CoreRegistry.get(Display.class);
  PerformanceMonitor.startActivity("Other");
  while (running && !display.isCloseRequested()) {
    if (!display.isActive() && isHibernationAllowed()) {
      time.setPaused(true);
      Iterator<Float> updateCycles=time.tick();
      while (updateCycles.hasNext()) {
        updateCycles.next();
      }
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        logger.warn("Display inactivity sleep interrupted",e);
      }
      display.processMessages();
      time.setPaused(false);
      continue;
    }
    processStateChanges();
    if (currentState == null) {
      shutdown();
      break;
    }
    Iterator<Float> updateCycles=time.tick();
    PerformanceMonitor.startActivity("Network Update");
    networkSystem.update();
    PerformanceMonitor.endActivity();
    long totalDelta=0;
    while (updateCycles.hasNext()) {
      float delta=updateCycles.next();
      totalDelta+=time.getDeltaInMs();
      PerformanceMonitor.startActivity("Main Update");
      currentState.update(delta);
      PerformanceMonitor.endActivity();
    }
    float delta=totalDelta / 1000f;
    for (    EngineSubsystem subsystem : getSubsystems()) {
      PerformanceMonitor.startActivity(subsystem.getClass().getSimpleName());
      subsystem.preUpdate(currentState,delta);
      PerformanceMonitor.endActivity();
    }
    GameThread.processWaitingProcesses();
    for (    EngineSubsystem subsystem : getSubsystems()) {
      PerformanceMonitor.startActivity(subsystem.getClass().getSimpleName());
      subsystem.postUpdate(currentState,delta);
      PerformanceMonitor.endActivity();
    }
    PerformanceMonitor.rollCycle();
    PerformanceMonitor.startActivity("Other");
  }
  PerformanceMonitor.endActivity();
  running=false;
}
