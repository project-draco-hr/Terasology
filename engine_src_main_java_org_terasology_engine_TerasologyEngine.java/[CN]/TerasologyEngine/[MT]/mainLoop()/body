{
  NetworkSystem networkSystem=rootContext.get(NetworkSystem.class);
  DisplayDevice display=rootContext.get(DisplayDevice.class);
  PerformanceMonitor.startActivity("Other");
  while (!shutdownRequested && !display.isCloseRequested()) {
    if (!display.hasFocus() && isHibernationAllowed()) {
      timeSubsystem.getEngineTime().setPaused(true);
      Iterator<Float> updateCycles=timeSubsystem.getEngineTime().tick();
      while (updateCycles.hasNext()) {
        updateCycles.next();
      }
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        logger.warn("Display inactivity sleep interrupted",e);
      }
      display.processMessages();
      timeSubsystem.getEngineTime().setPaused(false);
      continue;
    }
    assetTypeManager.reloadChangedOnDisk();
    processPendingState();
    if (currentState == null) {
      shutdown();
      break;
    }
    Iterator<Float> updateCycles=timeSubsystem.getEngineTime().tick();
    for (    EngineSubsystem subsystem : allSubsystems) {
      try (Activity ignored=PerformanceMonitor.startActivity(subsystem.getName() + " PreUpdate")){
        subsystem.preUpdate(currentState,timeSubsystem.getEngineTime().getRealDelta());
      }
     }
    while (updateCycles.hasNext()) {
      float updateDelta=updateCycles.next();
      try (Activity ignored=PerformanceMonitor.startActivity("Main Update")){
        currentState.update(updateDelta);
      }
     }
    GameThread.processWaitingProcesses();
    for (    EngineSubsystem subsystem : getSubsystems()) {
      try (Activity ignored=PerformanceMonitor.startActivity(subsystem.getName() + " Subsystem postUpdate")){
        subsystem.postUpdate(currentState,timeSubsystem.getEngineTime().getRealDelta());
      }
     }
    PerformanceMonitor.rollCycle();
    PerformanceMonitor.startActivity("Other");
  }
  PerformanceMonitor.endActivity();
}
