{
  NetworkSystem networkSystem=context.get(NetworkSystem.class);
  DisplayDevice display=context.get(DisplayDevice.class);
  PerformanceMonitor.startActivity("Other");
  while (!shutdownRequested && !display.isCloseRequested()) {
    long totalDelta;
    float updateDelta;
    float subsystemsDelta;
    if (!display.isActive() && isHibernationAllowed()) {
      time.setPaused(true);
      Iterator<Float> updateCycles=time.tick();
      while (updateCycles.hasNext()) {
        updateCycles.next();
      }
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        logger.warn("Display inactivity sleep interrupted",e);
      }
      display.processMessages();
      time.setPaused(false);
      continue;
    }
    assetTypeManager.reloadChangedOnDisk();
    processPendingState();
    if (currentState == null) {
      shutdown();
      break;
    }
    Iterator<Float> updateCycles=time.tick();
    try (Activity ignored=PerformanceMonitor.startActivity("Network Update")){
      networkSystem.update();
    }
     totalDelta=0;
    while (updateCycles.hasNext()) {
      updateDelta=updateCycles.next();
      totalDelta+=time.getDeltaInMs();
      try (Activity ignored=PerformanceMonitor.startActivity("Main Update")){
        currentState.update(updateDelta);
      }
     }
    subsystemsDelta=totalDelta / 1000f;
    for (    EngineSubsystem subsystem : getSubsystems()) {
      try (Activity ignored=PerformanceMonitor.startActivity(subsystem.getClass().getSimpleName())){
        subsystem.preUpdate(currentState,subsystemsDelta);
      }
     }
    GameThread.processWaitingProcesses();
    for (    EngineSubsystem subsystem : getSubsystems()) {
      try (Activity ignored=PerformanceMonitor.startActivity(subsystem.getClass().getSimpleName())){
        subsystem.postUpdate(currentState,subsystemsDelta);
      }
     }
    PerformanceMonitor.rollCycle();
    PerformanceMonitor.startActivity("Other");
  }
  PerformanceMonitor.endActivity();
}
