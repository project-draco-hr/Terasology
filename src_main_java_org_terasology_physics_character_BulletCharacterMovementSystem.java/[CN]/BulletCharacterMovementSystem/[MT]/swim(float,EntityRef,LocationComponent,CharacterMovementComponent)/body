{
  Vector3f desiredVelocity=new Vector3f(movementComp.getDrive());
  float maxSpeed=movementComp.maxWaterSpeed;
  if (movementComp.isRunning) {
    maxSpeed*=movementComp.runFactor;
  }
  desiredVelocity.scale(maxSpeed);
  desiredVelocity.y-=UNDERWATER_GRAVITY;
  Vector3f velocityDiff=new Vector3f(desiredVelocity);
  velocityDiff.sub(movementComp.getVelocity());
  velocityDiff.scale(Math.min(UNDERWATER_INERTIA * delta,1.0f));
  movementComp.getVelocity().x+=velocityDiff.x;
  movementComp.getVelocity().y+=velocityDiff.y;
  movementComp.getVelocity().z+=velocityDiff.z;
  float speed=movementComp.getVelocity().length();
  if (speed > movementComp.maxWaterSpeed) {
    movementComp.getVelocity().scale((speed - 4 * (speed - movementComp.maxWaterSpeed) * delta) / speed);
  }
  Vector3f moveDelta=new Vector3f(movementComp.getVelocity());
  moveDelta.scale(delta);
  MoveResult moveResult=move(location.getWorldPosition(),moveDelta,0,0,-1,movementComp.collider);
  Vector3f distanceMoved=new Vector3f(moveResult.finalPosition);
  distanceMoved.sub(location.getWorldPosition());
  location.setWorldPosition(moveResult.finalPosition);
  movementComp.collider.setWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),moveResult.finalPosition,1.0f)));
  if (movementComp.faceMovementDirection && distanceMoved.lengthSquared() > 0.01f) {
    float yaw=(float)Math.atan2(distanceMoved.x,distanceMoved.z);
    AxisAngle4f axisAngle=new AxisAngle4f(0,1,0,yaw);
    location.getLocalRotation().set(axisAngle);
  }
}
