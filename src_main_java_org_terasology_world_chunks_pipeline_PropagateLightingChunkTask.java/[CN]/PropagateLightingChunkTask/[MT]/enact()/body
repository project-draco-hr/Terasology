{
  ChunkView chunkView=getProvider().getViewAround(getPosition());
  if (chunkView == null) {
    return;
  }
  chunkView.lock();
  try {
    if (!chunkView.isValidView()) {
      return;
    }
    Chunk chunk=getProvider().getChunkForProcessing(getPosition());
    if (chunk.getChunkState() != Chunk.State.LIGHT_PROPAGATION_PENDING) {
      return;
    }
    Vector3i chunkMin=new Vector3i(chunk.getPos().x * Chunk.SIZE_X,chunk.getPos().y * Chunk.SIZE_Y,chunk.getPos().z * Chunk.SIZE_Z);
    List<Region3i> externalSurfaces=Lists.newArrayList();
    externalSurfaces.add(Region3i.createFromMinAndSize(chunkMin,new Vector3i(Chunk.SIZE_X - 1,Chunk.SIZE_Y,1)));
    externalSurfaces.add(Region3i.createFromMinAndSize(new Vector3i(chunkMin.x + Chunk.SIZE_X - 1,chunkMin.y,chunkMin.z),new Vector3i(1,Chunk.SIZE_Y,Chunk.SIZE_Z - 1)));
    externalSurfaces.add(Region3i.createFromMinAndSize(new Vector3i(chunkMin.x,chunkMin.y,chunkMin.z + 1),new Vector3i(1,Chunk.SIZE_Y,Chunk.SIZE_Z - 1)));
    externalSurfaces.add(Region3i.createFromMinAndSize(new Vector3i(chunkMin.x + 1,chunkMin.y,chunkMin.z + Chunk.SIZE_Z - 1),new Vector3i(Chunk.SIZE_X - 1,Chunk.SIZE_Y,1)));
    new BatchPropagator(new SunlightPropagationRules(),new SunlightChunkView(chunkView)).propagateFrom(externalSurfaces);
    new BatchPropagator(new LightPropagationRules(),new LightChunkView(chunkView)).propagateFrom(externalSurfaces);
    chunk.setChunkState(Chunk.State.FULL_LIGHT_CONNECTIVITY_PENDING);
    getPipeline().requestReview(Region3i.createFromCenterExtents(getPosition(),ChunkConstants.LOCAL_REGION_EXTENTS));
  }
  finally {
    chunkView.unlock();
  }
}
