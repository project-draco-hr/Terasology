{
  EntityRef player=entityManager.create("core:player",spawnPosition);
  EntityRef transferSlot=entityManager.create("engine:transferSlot");
  NetworkComponent netComp=transferSlot.getComponent(NetworkComponent.class);
  netComp.owner=player;
  transferSlot.saveComponent(netComp);
  CharacterComponent playerComponent=player.getComponent(CharacterComponent.class);
  playerComponent.spawnPosition.set(spawnPosition);
  playerComponent.movingItem=transferSlot;
  player.saveComponent(playerComponent);
  EntityRef chest=blockFactory.newInstance(blockManager.getBlockFamily("core:chest"));
  BlockItemComponent blockItem=chest.getComponent(BlockItemComponent.class);
  EntityRef chestContents=blockItem.placedEntity;
  inventoryManager.giveItem(chestContents,blockFactory.newInstance(blockManager.getBlockFamily("core:companion"),99));
  inventoryManager.giveItem(chestContents,blockFactory.newInstance(blockManager.getBlockFamily("engine:brick:engine:stair"),99));
  inventoryManager.giveItem(chestContents,blockFactory.newInstance(blockManager.getBlockFamily("core:Tnt"),99));
  inventoryManager.giveItem(chestContents,blockFactory.newInstance(blockManager.getBlockFamily("engine:StoneStair"),99));
  inventoryManager.giveItem(chestContents,entityManager.create("core:railgunTool"));
  inventoryManager.giveItem(chestContents,entityManager.create("core:mrbarsack"));
  inventoryManager.giveItem(chestContents,blockFactory.newInstance(blockManager.getBlockFamily("engine:Brick"),99));
  inventoryManager.giveItem(chestContents,blockFactory.newInstance(blockManager.getBlockFamily("engine:Ice"),99));
  inventoryManager.giveItem(chestContents,blockFactory.newInstance(blockManager.getBlockFamily("engine:Plank"),99));
  EntityRef doorItem=entityManager.create("core:door");
  ItemComponent doorItemComp=doorItem.getComponent(ItemComponent.class);
  doorItemComp.stackCount=20;
  doorItem.saveComponent(doorItemComp);
  inventoryManager.giveItem(chestContents,doorItem);
  EntityRef innerChest=blockFactory.newInstance(blockManager.getBlockFamily("core:Chest"));
  BlockItemComponent innerBlockItem=innerChest.getComponent(BlockItemComponent.class);
  EntityRef innerChestContents=innerBlockItem.placedEntity;
  inventoryManager.giveItem(innerChestContents,blockFactory.newInstance(blockManager.getBlockFamily("engine:Lava"),99));
  inventoryManager.giveItem(innerChestContents,blockFactory.newInstance(blockManager.getBlockFamily("engine:Water"),99));
  inventoryManager.giveItem(innerChestContents,blockFactory.newInstance(blockManager.getBlockFamily("engine:Iris"),99));
  inventoryManager.giveItem(innerChestContents,blockFactory.newInstance(blockManager.getBlockFamily("engine:Dandelion"),99));
  inventoryManager.giveItem(innerChestContents,blockFactory.newInstance(blockManager.getBlockFamily("engine:Tulip"),99));
  inventoryManager.giveItem(innerChestContents,blockFactory.newInstance(blockManager.getBlockFamily("engine:YellowFlower"),99));
  inventoryManager.giveItem(chestContents,innerChest);
  inventoryManager.giveItem(player,entityManager.create("core:pickaxe"));
  inventoryManager.giveItem(player,entityManager.create("core:axe"));
  inventoryManager.giveItem(player,blockFactory.newInstance(blockManager.getBlockFamily("engine:Torch"),99));
  inventoryManager.giveItem(player,entityManager.create("core:explodeTool"));
  inventoryManager.giveItem(player,entityManager.create("core:railgunTool"));
  inventoryManager.giveItem(player,entityManager.create("core:miniaturizer"));
  inventoryManager.giveItem(player,chest);
  return player;
}
