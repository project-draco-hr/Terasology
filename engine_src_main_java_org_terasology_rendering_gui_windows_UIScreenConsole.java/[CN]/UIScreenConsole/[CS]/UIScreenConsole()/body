{
  console=CoreRegistry.get(Console.class);
  localPlayer=CoreRegistry.get(LocalPlayer.class);
  commandCursor=console.previousCommandSize();
  setCloseKeys(new int[]{Keyboard.KEY_ESCAPE});
  setCloseBinds(new String[]{"engine:console"});
  setId("chat");
  setModal(true);
  maximize();
  inputBox=new UIText();
  inputBox.setSize(new Vector2f(900f,28f));
  inputBox.setBackgroundColor(new Color(255,255,255,200));
  inputBox.setVerticalAlign(EVerticalAlign.BOTTOM);
  inputBox.setSelectionColor(Color.gray);
  inputBox.setPosition(new Vector2f(2,-2));
  inputBox.setVisible(true);
  inputBox.addKeyListener(new KeyListener(){
    @Override public void key(    UIDisplayElement element,    KeyEvent event){
      if (event.isDown()) {
        if (event.getKey() == Keyboard.KEY_RETURN) {
          String message=inputBox.getText().trim();
          inputBox.deleteText();
          console.execute(message,localPlayer.getClientEntity());
          commandCursor=console.previousCommandSize();
        }
 else         if (event.getKey() == Keyboard.KEY_UP) {
          if (commandCursor > 0) {
            commandCursor--;
            inputBox.setText(console.getPreviousCommand(commandCursor));
            inputBox.setCursorEnd();
          }
        }
 else         if (event.getKey() == Keyboard.KEY_DOWN) {
          if (commandCursor < console.previousCommandSize()) {
            commandCursor++;
            if (commandCursor == console.previousCommandSize()) {
              inputBox.setText("");
            }
 else {
              inputBox.setText(console.getPreviousCommand(commandCursor));
            }
            inputBox.setCursorEnd();
          }
        }
 else         if (event.getKey() == Keyboard.KEY_TAB && !inputBox.getText().trim().isEmpty()) {
          String cmdQuery=inputBox.getText().trim();
          List<CommandInfo> commands=console.getCommandList();
          Collection<String> commandNames=Collections2.transform(commands,new Function<CommandInfo,String>(){
            @Override public String apply(            CommandInfo input){
              return input.getName();
            }
          }
);
          List<String> matches=CamelCaseMatcher.getMatches(cmdQuery,commandNames);
          if (matches.size() == 1) {
            inputBox.setText(matches.get(0));
            inputBox.setCursorEnd();
          }
 else           if (matches.size() > 1) {
            String commandMatches="";
            for (            String cmd : matches) {
              if (!commandMatches.isEmpty()) {
                commandMatches+=" ";
              }
              commandMatches+=cmd;
            }
            console.addMessage(commandMatches);
          }
        }
      }
    }
  }
);
  setFocus(inputBox);
  messageList=new UIList();
  messageList.setSize(new Vector2f(900f,400f));
  messageList.setBackgroundColor(new Color(255,255,255,200));
  messageList.setShadow(new Vector4f(0f,3f,3f,0f),EShadowDirection.OUTSIDE,1f);
  messageList.setBorderSolid(new Vector4f(1f,1f,1f,1f),new Color(0,0,0));
  messageList.setVerticalAlign(EVerticalAlign.BOTTOM);
  messageList.setPosition(new Vector2f(2,-32));
  messageList.setPadding(new Vector4f(0f,5f,0f,5f));
  messageList.setDisabled(true);
  messageList.setVisible(true);
  addDisplayElement(inputBox);
  addDisplayElement(messageList);
  for (  Message message : console.getMessages()) {
    addMessage(message);
  }
  messageList.scrollToBottom();
  console.subscribe(this);
}
