{
  List<EntityRef> operationsToInvoke=new LinkedList<>();
  Iterator<Long> scheduledOperationsIterator=periodicOperationsSortedByTime.keySet().iterator();
  long processedTime;
  while (scheduledOperationsIterator.hasNext()) {
    processedTime=scheduledOperationsIterator.next();
    if (processedTime > currentWorldTime) {
      break;
    }
    operationsToInvoke.addAll(periodicOperationsSortedByTime.get(processedTime));
    scheduledOperationsIterator.remove();
  }
  for (  EntityRef periodicEntity : operationsToInvoke) {
    if (periodicEntity.exists()) {
      final PeriodicActionComponent periodicActionComponent=periodicEntity.getComponent(PeriodicActionComponent.class);
      final Set<String> actionIds=periodicActionComponent.getTriggeredActionsAndReschedule(currentWorldTime);
      saveOrRemoveComponent(periodicEntity,periodicActionComponent);
      if (!periodicActionComponent.isEmpty()) {
        periodicOperationsSortedByTime.put(periodicActionComponent.getLowestWakeUp(),periodicEntity);
      }
      for (      String actionId : actionIds) {
        periodicEntity.send(new PeriodicActionTriggeredEvent(actionId));
      }
    }
  }
}
