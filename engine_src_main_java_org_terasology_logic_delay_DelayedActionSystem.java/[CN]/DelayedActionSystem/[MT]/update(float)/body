{
  long currentWorldTime=time.getGameTimeInMs();
  List<DelayedOperation> operationsToInvoke=new LinkedList<>();
  Iterator<Long> scheduledOperationsIterator=delayedOperationsSortedByTime.keySet().iterator();
  long processedTime;
  while (scheduledOperationsIterator.hasNext()) {
    processedTime=scheduledOperationsIterator.next();
    if (processedTime > currentWorldTime) {
      break;
    }
    operationsToInvoke.addAll(delayedOperationsSortedByTime.get(processedTime));
    scheduledOperationsIterator.remove();
  }
  for (  DelayedOperation delayedOperation : operationsToInvoke) {
    if (delayedOperation.entityRef.exists()) {
      delayedOperation.entityRef.removeComponent(DelayedActionComponent.class);
      delayedOperation.entityRef.send(new DelayedActionTriggeredEvent(delayedOperation.operationId));
    }
  }
}
