{
  this._player=p;
  _title=title;
  _seed=seed;
  if (_title.equals("")) {
    _title=seed;
  }
  _generatorTerrain=new ChunkGeneratorTerrain(seed);
  _generatorForest=new ChunkGeneratorForest(seed);
  _generatorTree=new ObjectGeneratorTree(this,seed);
  _generatorPineTree=new ObjectGeneratorPineTree(this,seed);
  _generatorGrass=new ChunkGeneratorFlora(seed);
  _rand=new FastRandom(seed.hashCode());
  _updateThread=new Thread(new Runnable(){
    @Override public void run(){
      while (true) {
        if (!_updateThreadAlive) {
          return;
        }
        if (!_updatingEnabled) {
synchronized (_updateThread) {
            try {
              _updateThread.wait();
            }
 catch (            InterruptedException ex) {
            }
          }
        }
        long timeStart=System.currentTimeMillis();
        timeStart=System.currentTimeMillis();
        if (!_chunkUpdateNormal.isEmpty()) {
          Chunk[] chunks=_chunkUpdateNormal.toArray(new Chunk[0]);
          double dist=Float.MAX_VALUE;
          int index=-1;
          for (int i=0; i < chunks.length; i++) {
            Chunk c=chunks[i];
            double tDist=c.calcDistanceToPlayer();
            if (tDist <= dist) {
              dist=tDist;
              index=i;
            }
          }
          if (index >= 0) {
            Chunk c=(Chunk)chunks[index];
            processChunk(c);
          }
          _statUpdateDuration+=System.currentTimeMillis() - timeStart;
          _statUpdateDuration/=2;
        }
        updateDaytime();
        evolveChunks();
        if (Helper.getInstance().getTime() - _lastWorldUpdate > 1000) {
          _visibleChunks=fetchVisibleChunks();
          _lastWorldUpdate=Helper.getInstance().getTime();
        }
        try {
          Thread.sleep(15);
        }
 catch (        InterruptedException ex) {
          Logger.getLogger(World.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
    }
  }
);
}
