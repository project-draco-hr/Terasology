{
  if (title == null) {
    throw new IllegalArgumentException("No title provided.");
  }
  if (title.isEmpty()) {
    throw new IllegalArgumentException("No title provided.");
  }
  if (seed == null) {
    throw new IllegalArgumentException("No seed provided.");
  }
  if (seed.isEmpty()) {
    throw new IllegalArgumentException("No seed provided.");
  }
  if (p == null) {
    throw new IllegalArgumentException("No player provided.");
  }
  this._player=p;
  this._title=title;
  this._seed=seed;
  if (!loadMetaData()) {
    File dir=new File(getWorldSavePath());
    if (!dir.exists()) {
      dir.mkdirs();
    }
    saveMetaData();
  }
  _generatorTerrain=new ChunkGeneratorTerrain(seed);
  _generatorForest=new ChunkGeneratorForest(seed);
  _generatorTree=new ObjectGeneratorTree(this,seed);
  _generatorPineTree=new ObjectGeneratorPineTree(this,seed);
  _generatorGrass=new ChunkGeneratorFlora(seed);
  _rand=new FastRandom(seed.hashCode());
  resetPlayer();
  updateDaylight();
  _updateThread=new Thread(new Runnable(){
    @Override public void run(){
      while (true) {
        if (!_updateThreadAlive) {
          return;
        }
        if (!_updatingEnabled) {
synchronized (_updateThread) {
            try {
              _updateThread.wait();
            }
 catch (            InterruptedException ex) {
              Helper.LOGGER.log(Level.SEVERE,ex.toString());
            }
          }
        }
        long timeStart=System.currentTimeMillis();
        timeStart=System.currentTimeMillis();
        _visibleChunks=fetchVisibleChunks();
        double weight=Double.MAX_VALUE;
        ChunkUpdate nearestChunkUpdate=null;
        FastList<ChunkUpdate> deletableUpdates=new FastList<ChunkUpdate>();
        for (FastSet.Record n=_chunkUpdateNormal.head(), end=_chunkUpdateNormal.tail(); (n=n.getNext()) != end; ) {
          ChunkUpdate cu=_chunkUpdateNormal.valueOf(n);
          double tWeight=cu.getWeight();
          if (!isChunkVisible(cu.getChunk())) {
            deletableUpdates.add(cu);
            continue;
          }
          if (tWeight < weight) {
            weight=tWeight;
            nearestChunkUpdate=cu;
          }
        }
        _chunkUpdateNormal.removeAll(deletableUpdates);
        if (nearestChunkUpdate != null) {
          _chunkUpdateNormal.remove(nearestChunkUpdate);
          processChunkUpdate(nearestChunkUpdate);
        }
        updateDaytime();
        replantDirt();
        _statUpdateDuration+=System.currentTimeMillis() - timeStart;
        _statUpdateDuration/=2;
      }
    }
  }
);
}
