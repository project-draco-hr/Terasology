{
  this._player=p;
  _rand=new Random(seed.hashCode());
  _pGen1=new PerlinNoise(_rand.nextInt());
  _pGen2=new PerlinNoise(_rand.nextInt());
  _pGen3=new PerlinNoise(_rand.nextInt());
  _chunks=new Chunk[(int)Configuration.VIEWING_DISTANCE_IN_CHUNKS.x][(int)Configuration.VIEWING_DISTANCE_IN_CHUNKS.y][(int)Configuration.VIEWING_DISTANCE_IN_CHUNKS.z];
  _updateThread=new Thread(new Runnable(){
    @Override public void run(){
      long timeStart=System.currentTimeMillis();
      Logger.getLogger(this.getClass().getName()).log(Level.INFO,"Generating chunks. Please wait.");
      for (int x=0; x < Configuration.VIEWING_DISTANCE_IN_CHUNKS.x; x++) {
        for (int z=0; z < Configuration.VIEWING_DISTANCE_IN_CHUNKS.z; z++) {
          Chunk c=loadOrCreateChunk(x,z);
          _chunks[x][0][z]=c;
          queueChunkForUpdate(c,0);
        }
      }
      _worldGenerated=true;
      _player.resetPlayer();
      Logger.getLogger(this.getClass().getName()).log(Level.INFO,"World updated ({0}s).",(System.currentTimeMillis() - timeStart) / 1000d);
      while (true) {
        if (_chunkUpdateImportant.size() > 0) {
          Chunk c=_chunkUpdateImportant.poll();
          processChunk(c);
        }
 else {
          ArrayList<Chunk> sortedUpdates=new ArrayList<Chunk>(_chunkUpdateNormal);
          Collections.sort(sortedUpdates);
          if (sortedUpdates.size() > 0) {
            Chunk c=sortedUpdates.remove(0);
            _chunkUpdateNormal.remove(c);
            processChunk(c);
          }
        }
      }
    }
  }
);
  _worldThread=new Thread(new Runnable(){
    @Override public void run(){
      while (true) {
        updateInfWorld();
      }
    }
  }
);
  _updateThread.start();
  _worldThread.start();
}
