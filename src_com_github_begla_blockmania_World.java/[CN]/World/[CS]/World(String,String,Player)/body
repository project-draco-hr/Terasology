{
  this._player=p;
  _rand=new Random(seed.hashCode());
  _pGen1=new PerlinNoise(_rand.nextInt());
  _pGen2=new PerlinNoise(_rand.nextInt());
  _pGen3=new PerlinNoise(_rand.nextInt());
  final World currentWorld=this;
  _chunks=new Chunk[(int)Configuration._viewingDistanceInChunks.x][(int)Configuration._viewingDistanceInChunks.y][(int)Configuration._viewingDistanceInChunks.z];
  _updateThread=new Thread(new Runnable(){
    @Override public void run(){
      long timeStart=System.currentTimeMillis();
      Logger.getLogger(this.getClass().getName()).log(Level.INFO,"Generating chunks. Please wait.");
      for (int x=0; x < Configuration._viewingDistanceInChunks.x; x++) {
        for (int y=0; y < Configuration._viewingDistanceInChunks.y; y++) {
          for (int z=0; z < Configuration._viewingDistanceInChunks.z; z++) {
            Chunk c=new Chunk(currentWorld,new Vector3f(x,y,z));
            _chunks[x][y][z]=c;
            c.generate();
            c.populate();
            c.calcSunlight();
          }
        }
      }
      _worldGenerated=true;
      _player.resetPlayer();
      Logger.getLogger(this.getClass().getName()).log(Level.INFO,"World updated ({0}s).",(System.currentTimeMillis() - timeStart) / 1000d);
      while (true) {
        _chunkUpdateQueue.clear();
        for (int x=0; x < Configuration._viewingDistanceInChunks.x; x++) {
          for (int y=0; y < Configuration._viewingDistanceInChunks.y; y++) {
            for (int z=0; z < Configuration._viewingDistanceInChunks.z; z++) {
synchronized (_chunkUpdateQueueDL) {
                if (_chunks[x][y][z].isDirty()) {
                  _chunkUpdateQueue.add(_chunks[x][y][z]);
                }
              }
            }
          }
        }
        int updateCounter=0;
        while (_chunkUpdateQueue.size() > 0 && updateCounter < 10) {
          Chunk c=_chunkUpdateQueue.poll();
synchronized (_chunkUpdateQueueDL) {
            if (_chunkUpdateQueueDL.contains(c)) {
              continue;
            }
          }
          c.calcLight();
          c.generateVertexArray();
          updateCounter++;
          _chunkUpdateQueueDL.add(c);
        }
      }
    }
  }
);
  _worldThread=new Thread(new Runnable(){
    @Override public void run(){
      while (true) {
        updateInfWorld();
        if (Helper.getInstance().getTime() - _daylightTimer > 120000) {
          _daylight-=0.2;
          if (_daylight <= 0.4f) {
            _daylight=1.0f;
          }
          _daylightTimer=Helper.getInstance().getTime();
          updateAllChunks();
        }
      }
    }
  }
);
}
