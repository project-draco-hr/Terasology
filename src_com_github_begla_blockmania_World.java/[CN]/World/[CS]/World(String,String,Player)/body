{
  this._player=p;
  _rand=new Random(seed.hashCode());
  _pGen1=new PerlinNoise(_rand.nextInt());
  _pGen2=new PerlinNoise(_rand.nextInt());
  _pGen3=new PerlinNoise(_rand.nextInt());
  _chunks=new Chunk[(int)Configuration._viewingDistanceInChunks.x][(int)Configuration._viewingDistanceInChunks.y][(int)Configuration._viewingDistanceInChunks.z];
  _updateThread=new Thread(new Runnable(){
    @Override public void run(){
      long timeStart=System.currentTimeMillis();
      Logger.getLogger(this.getClass().getName()).log(Level.INFO,"Generating chunks. Please wait.");
      for (int x=0; x < Configuration._viewingDistanceInChunks.x; x++) {
        for (int z=0; z < Configuration._viewingDistanceInChunks.z; z++) {
          Chunk c=loadOrCreateChunk(x,z);
          _chunks[x][0][z]=c;
          queueChunkForUpdate(c,0);
        }
      }
      _worldGenerated=true;
      _player.resetPlayer();
      Logger.getLogger(this.getClass().getName()).log(Level.INFO,"World updated ({0}s).",(System.currentTimeMillis() - timeStart) / 1000d);
      PriorityBlockingQueue<Chunk> sortedUpdates=null;
      while (true) {
        sortedUpdates=new PriorityBlockingQueue<Chunk>();
        for (        Chunk c : _chunkUpdateNormal) {
          sortedUpdates.add(c);
        }
        for (int i=0; i < 4; i++) {
          Chunk c=null;
          if (_chunkUpdateImportant.size() > 0) {
            c=_chunkUpdateImportant.poll();
          }
 else {
            c=sortedUpdates.poll();
            _chunkUpdateNormal.remove(c);
          }
          if (c != null) {
            c.generate();
            c.calcLight();
            Chunk[] neighbors=c.getNeighbors();
            for (            Chunk nc : neighbors) {
              if (nc != null) {
                nc.generate();
                nc.calcLight();
              }
            }
            for (            Chunk nc : neighbors) {
              if (nc != null) {
                nc.generateVertexArray();
                _chunkUpdateQueueDL.add(nc);
              }
            }
            c.generateVertexArray();
            _chunkUpdateQueueDL.add(c);
          }
        }
      }
    }
  }
);
  _worldThread=new Thread(new Runnable(){
    @Override public void run(){
      while (true) {
        updateInfWorld();
      }
    }
  }
);
}
