{
  if (this.entityManager != null) {
    this.entityManager.unsubscribe(this);
  }
  this.entityManager=entityManager;
  this.entityManager.subscribe(this);
  TypeHandlerLibraryBuilder builder=new TypeHandlerLibraryBuilder();
  for (  Map.Entry<Class<?>,TypeHandler<?>> entry : library.getTypeHandlerLibrary()) {
    builder.addRaw(entry.getKey(),entry.getValue());
  }
  builder.add(EntityRef.class,new NetEntityRefTypeHandler(this,blockEntityRegistry));
  this.entitySystemLibrary=new EntitySystemLibraryImpl(builder.build());
  EventLibrary eventLibrary=entitySystemLibrary.getEventLibrary();
  for (  ClassMetadata<? extends Event> eventMetadata : library.getEventLibrary()) {
    eventLibrary.register(eventMetadata.getType(),eventMetadata.getNames());
  }
  ComponentLibrary componentLibrary=entitySystemLibrary.getComponentLibrary();
  for (  ClassMetadata<? extends Component> componentMetadata : library.getComponentLibrary()) {
    componentLibrary.register(componentMetadata.getType(),componentMetadata.getNames());
  }
  eventSerializer=new EventSerializer(eventLibrary);
  entitySerializer=new EntitySerializer(entityManager,componentLibrary);
  entitySerializer.setUsingFieldIds(true);
  entitySerializer.setIgnoringEntityId(true);
  entitySerializer.setComponentSerializeCheck(new NetComponentSerializeCheck());
  if (mode == NetworkMode.CLIENT) {
    applySerializationTables();
  }
  if (server != null) {
    server.connectToEntitySystem(entityManager,entitySerializer,eventSerializer,blockEntityRegistry);
  }
}
