{
  if (nextSendState < timer.getTimeInMs()) {
    long lastSendTime=nextSendState - TIME_BETWEEN_STATE_REPLICATE;
    for (    Map.Entry<EntityRef,CircularBuffer<CharacterStateEvent>> entry : characterStates.entrySet()) {
      if (entry.getValue().size() > 0) {
        CharacterStateEvent state=entry.getValue().getLast();
        if (state.getTime() >= lastSendTime) {
          entry.getKey().send(state);
        }
 else         if (timer.getTimeInMs() - state.getTime() > MAX_INPUT_UNDERFLOW) {
          CharacterMoveInputEvent lastInput=lastInputEvent.get(entry.getKey());
          if (lastInput != null) {
            CharacterMoveInputEvent newInput=new CharacterMoveInputEvent(lastInput,(int)(timer.getTimeInMs() - state.getTime()));
            onPlayerInput(newInput,entry.getKey());
          }
          entry.getKey().send(state);
        }
      }
    }
    nextSendState+=TIME_BETWEEN_STATE_REPLICATE;
  }
  long renderTime=timer.getTimeInMs() - RENDER_DELAY;
  for (  Map.Entry<EntityRef,CircularBuffer<CharacterStateEvent>> entry : characterStates.entrySet()) {
    if (entry.getKey().equals(localPlayer.getCharacterEntity())) {
      continue;
    }
    setToTime(renderTime,entry.getKey(),entry.getValue());
  }
}
