{
  if (getParent() != null) {
    if (Keyboard.isKeyDown(Keyboard.KEY_R)) {
      resetPlayer();
    }
    if (Keyboard.isKeyDown(Keyboard.KEY_T)) {
      parent.generateTrees();
    }
    if (Keyboard.isKeyDown(Keyboard.KEY_W)) {
      walkForward();
    }
    if (Keyboard.isKeyDown(Keyboard.KEY_S)) {
      walkBackwards();
    }
    if (Keyboard.isKeyDown(Keyboard.KEY_A)) {
      strafeLeft();
    }
    if (Keyboard.isKeyDown(Keyboard.KEY_D)) {
      strafeRight();
    }
    if (Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
      jump();
    }
    boolean hitting=parent.isHitting(new Vector3f(getPosition().x + 0.5f,getPosition().y - PLAYER_HEIGHT,getPosition().z + 0.5f));
    if (!hitting) {
      if (gravity > -MAX_GRAVITY) {
        gravity-=0.5f;
      }
      getPosition().y+=(gravity / 1000.0f) * delta;
    }
 else     if (gravity > 0.0f) {
      getPosition().y+=(gravity / 1000.0f) * delta;
    }
 else {
      gravity=0.0f;
    }
    Vector2f dir=new Vector2f((float)accX,(float)accZ);
    try {
      dir.normalise();
    }
 catch (    Exception e) {
    }
    if (checkForCollision(new Vector3f(getPosition().x + dir.x * 0.1f,getPosition().y - PLAYER_HEIGHT + 1,getPosition().z + dir.y * 0.1f))) {
      accX=0;
      accZ=0;
    }
    getPosition().x+=(accX / 1000.0f) * delta;
    getPosition().z+=(accZ / 1000.0f) * delta;
    accX=0;
    accZ=0;
  }
}
