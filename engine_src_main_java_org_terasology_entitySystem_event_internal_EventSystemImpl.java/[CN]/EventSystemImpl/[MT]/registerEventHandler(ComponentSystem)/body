{
  Class handlerClass=handler.getClass();
  if (!Modifier.isPublic(handlerClass.getModifiers())) {
    logger.error("Cannot register handler {}, must be public",handler.getClass().getName());
    return;
  }
  logger.debug("Registering event handler " + handlerClass.getName());
  for (  Method method : handlerClass.getMethods()) {
    ReceiveEvent receiveEventAnnotation=method.getAnnotation(ReceiveEvent.class);
    if (receiveEventAnnotation != null) {
      if (!receiveEventAnnotation.netFilter().isValidFor(networkSystem.getMode(),false)) {
        continue;
      }
      Set<Class<? extends Component>> requiredComponents=Sets.newLinkedHashSet();
      method.setAccessible(true);
      Class<?>[] types=method.getParameterTypes();
      logger.debug("Found method: " + method.toString());
      if (!Event.class.isAssignableFrom(types[0]) || !EntityRef.class.isAssignableFrom(types[1])) {
        logger.error("Invalid event handler method: {}",method.getName());
        return;
      }
      requiredComponents.addAll(Arrays.asList(receiveEventAnnotation.components()));
      List<Class<? extends Component>> componentParams=Lists.newArrayList();
      for (int i=2; i < types.length; ++i) {
        if (!Component.class.isAssignableFrom(types[i])) {
          logger.error("Invalid event handler method: {} - {} is not a component class",method.getName(),types[i]);
          return;
        }
        requiredComponents.add((Class<? extends Component>)types[i]);
        componentParams.add((Class<? extends Component>)types[i]);
      }
      ByteCodeEventHandlerInfo handlerInfo=new ByteCodeEventHandlerInfo(handler,method,receiveEventAnnotation.priority(),requiredComponents,componentParams);
      addEventHandler((Class<? extends Event>)types[0],handlerInfo,requiredComponents);
    }
  }
}
