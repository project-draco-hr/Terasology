{
  super();
  setSize(size);
  _title=new UIWindowTitle(new Vector2f(getSize().x * 0.55f,19f),title);
  _title.setVisible(true);
  _title.getPosition().x=(getPosition().x + size.x / 2f) - _title.getSize().x / 2;
  _title.setTitle(title);
  _title.addMouseButtonListener(new MouseButtonListener(){
    @Override public void wheel(    UIDisplayElement element,    int wheel,    boolean intersect){
    }
    @Override public void up(    UIDisplayElement element,    int button,    boolean intersect){
      _dragged=false;
      _prevMousePos=null;
    }
    @Override public void down(    UIDisplayElement element,    int button,    boolean intersect){
      if (intersect) {
        _dragged=true;
        if (_prevMousePos == null) {
          _prevMousePos=new Vector2f(new Vector2f(Mouse.getX(),Display.getHeight() - Mouse.getY()));
        }
      }
    }
  }
);
  _title.addMouseMoveListener(new MouseMoveListener(){
    @Override public void move(    UIDisplayElement element){
      if (_dragged) {
        Vector2f mousePos=new Vector2f(Mouse.getX(),Display.getHeight() - Mouse.getY());
        drag(new Vector2f(_prevMousePos.x - mousePos.x,_prevMousePos.y - mousePos.y));
        _prevMousePos=new Vector2f(mousePos);
      }
    }
    @Override public void leave(    UIDisplayElement element){
    }
    @Override public void hover(    UIDisplayElement element){
    }
    @Override public void enter(    UIDisplayElement element){
    }
  }
);
  _close=new UIButton(new Vector2f(19f,19f),UIButton.eButtonType.NORMAL);
  _close.getPosition().x=getSize().x - 25f;
  _close.setVisible(true);
  _close.getLabel().setText("");
  _close.addClickListener(new ClickListener(){
    @Override public void click(    UIDisplayElement element,    int button){
      close(true);
    }
  }
);
  windowStyleSetup();
  addDisplayElement(_close);
  addDisplayElement(_title);
}
