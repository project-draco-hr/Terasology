{
  Node processedNode=node;
  while (true) {
    if (processedNode.center != null) {
      int subNodeIndex=getSubNodeIndex(position,processedNode.center);
      if (subNodeIndex == -1) {
        T oldValue=processedNode.centerValue;
        processedNode.centerValue=value;
        return oldValue;
      }
 else {
        Node subNode=processedNode.subNodes[subNodeIndex];
        if (subNode == null) {
          float[] min=new float[dimensions];
          float[] max=new float[dimensions];
          for (int i=0; i < dimensions; i++) {
            if (position[i] > processedNode.center[i]) {
              min[i]=processedNode.center[i];
              max[i]=processedNode.maxValues[i];
            }
 else {
              min[i]=processedNode.minValues[i];
              max[i]=processedNode.center[i];
            }
          }
          processedNode.subNodes[subNodeIndex]=createNewNode(position,min,max,value);
          return null;
        }
 else {
          processedNode=subNode;
        }
      }
    }
 else {
      for (      NodeEntry<T> nodeEntry : processedNode.nodeBucket) {
        if (distanceFunction.getDistance(nodeEntry.position,position) == 0) {
          processedNode.nodeBucket.remove(nodeEntry);
          processedNode.nodeBucket.add(new NodeEntry<>(position,value));
          return nodeEntry.value;
        }
      }
      processedNode.nodeBucket.add(new NodeEntry<>(position,value));
      if (processedNode.nodeBucket.size() > bucketSize) {
        processedNode.splitNode();
      }
      return null;
    }
  }
}
