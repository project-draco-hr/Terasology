{
  Chunk chunk=new ChunkImpl(CHUNK_POS,blockManager,biomeManager);
  chunk.setBlock(0,0,0,testBlock);
  chunk.setBlock(0,4,2,testBlock2);
  chunk.markReady();
  ChunkProvider chunkProvider=mock(ChunkProvider.class);
  when(chunkProvider.getAllChunks()).thenReturn(Arrays.asList(chunk));
  when(chunkProvider.getChunk(Matchers.any(Vector3i.class))).thenReturn(chunk);
  CoreRegistry.put(ChunkProvider.class,chunkProvider);
  boolean storeChunkInZips=true;
  esm.setStoreChunksInZips(storeChunkInZips);
  esm.waitForCompletionOfPreviousSaveAndStartSaving();
  esm.finishSavingAndShutdown();
  EntitySystemSetupUtil.addReflectionBasedLibraries(context);
  EntitySystemSetupUtil.addEntityManagementRelatedClasses(context);
  EngineEntityManager newEntityManager=context.get(EngineEntityManager.class);
  StorageManager newSM=new ReadWriteStorageManager(savePath,moduleEnvironment,newEntityManager,blockManager,biomeManager,storeChunkInZips);
  newSM.loadGlobalStore();
  ChunkStore restored=newSM.loadChunkStore(CHUNK_POS);
  assertNotNull(restored);
  assertEquals(CHUNK_POS,restored.getChunkPosition());
  assertNotNull(restored.getChunk());
  assertEquals(testBlock,restored.getChunk().getBlock(0,0,0));
  assertEquals(testBlock2,restored.getChunk().getBlock(0,4,2));
}
