{
  Chunk chunk=new ChunkImpl(CHUNK_POS);
  chunk.setBlock(0,0,0,testBlock);
  chunk.markReady();
  ChunkProvider chunkProvider=mock(ChunkProvider.class);
  when(chunkProvider.getAllChunks()).thenReturn(Arrays.asList(chunk));
  CoreRegistry.put(ChunkProvider.class,chunkProvider);
  EntityRef entity=entityManager.create();
  long id=entity.getId();
  LocationComponent locationComponent=new LocationComponent();
  Vector3f positionInChunk=new Vector3f(chunk.getAABB().getMin());
  positionInChunk.x+=1;
  positionInChunk.y+=1;
  positionInChunk.z+=1;
  locationComponent.setWorldPosition(positionInChunk);
  entity.addComponent(locationComponent);
  esm.waitForCompletionOfPreviousSaveAndStartSaving();
  esm.finishSavingAndShutdown();
  EngineEntityManager newEntityManager=new EntitySystemBuilder().build(moduleManager.getEnvironment(),networkSystem,new ReflectionReflectFactory());
  StorageManager newSM=new ReadWriteStorageManager(savePath,moduleManager.getEnvironment(),newEntityManager,false);
  newSM.loadGlobalStore();
  ChunkStore restored=newSM.loadChunkStore(CHUNK_POS);
  restored.restoreEntities();
  EntityRef ref=newEntityManager.getEntity(id);
  assertTrue(ref.exists());
  assertTrue(ref.isActive());
}
