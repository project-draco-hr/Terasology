{
  boolean debugEnabled=config.getSystem().isDebugEnabled();
  if (debugEnabled) {
switch (event.getKey()) {
case Keyboard.KEY_R:
      config.getRendering().getDebug().setWireframe(!config.getRendering().getDebug().isWireframe());
    event.consume();
  break;
case Keyboard.KEY_K:
entity.send(new DoDamageEvent(9999,null));
break;
case Keyboard.KEY_H:
for (UIDisplayElement element : CoreRegistry.get(GUIManager.class).getWindowById("hud").getDisplayElements()) {
element.setVisible(!element.isVisible());
}
event.consume();
break;
case Keyboard.KEY_F6:
config.getRendering().getDebug().setEnabled(!config.getRendering().getDebug().isEnabled());
event.consume();
break;
case Keyboard.KEY_F7:
config.getRendering().getDebug().cycleStage();
entity.send(new ConsoleMessageEvent("Set debug stage to: " + config.getRendering().getDebug().getStage()));
event.consume();
break;
case Keyboard.KEY_F8:
config.getRendering().getDebug().setRenderChunkBoundingBoxes(!config.getRendering().getDebug().isRenderChunkBoundingBoxes());
event.consume();
break;
}
}
switch (event.getKey()) {
case Keyboard.KEY_F1:
engine.setFocus(!engine.hasFocus());
Mouse.setGrabbed(engine.hasFocus());
event.consume();
break;
case Keyboard.KEY_F3:
config.getSystem().setDebugEnabled(!config.getSystem().isDebugEnabled());
event.consume();
break;
case Keyboard.KEY_F:
toggleViewingDistance();
event.consume();
break;
case Keyboard.KEY_F4:
metrics=(UIScreenMetrics)CoreRegistry.get(GUIManager.class).openWindow("metrics");
metrics.toggleMode();
event.consume();
break;
}
}
