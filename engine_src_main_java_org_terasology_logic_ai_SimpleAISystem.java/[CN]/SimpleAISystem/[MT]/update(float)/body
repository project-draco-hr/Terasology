{
  for (  EntityRef entity : entityManager.getEntitiesWith(SimpleAIComponent.class,CharacterMovementComponent.class,LocationComponent.class)) {
    LocationComponent location=entity.getComponent(LocationComponent.class);
    Vector3f worldPos=location.getWorldPosition();
    if (!worldProvider.isBlockRelevant(worldPos)) {
      continue;
    }
    SimpleAIComponent ai=entity.getComponent(SimpleAIComponent.class);
    Vector3f drive=new Vector3f();
    if (localPlayer != null) {
      Vector3f dist=new Vector3f(worldPos);
      dist.sub(localPlayer.getPosition());
      double distanceToPlayer=dist.lengthSquared();
      if (distanceToPlayer > 6 && distanceToPlayer < 16) {
        ai.movementTarget.set(localPlayer.getPosition());
        ai.followingPlayer=true;
        entity.saveComponent(ai);
      }
 else {
        if (time.getGameTimeInMs() - ai.lastChangeOfDirectionAt > 12000 || ai.followingPlayer) {
          ai.movementTarget.set(worldPos.x + random.nextFloat(-500.0f,500.0f),worldPos.y,worldPos.z + random.nextFloat(-500.0f,500.0f));
          ai.lastChangeOfDirectionAt=time.getGameTimeInMs();
          ai.followingPlayer=false;
          entity.saveComponent(ai);
        }
      }
      Vector3f targetDirection=new Vector3f();
      targetDirection.sub(ai.movementTarget,worldPos);
      targetDirection.normalize();
      drive.set(targetDirection);
      float yaw=(float)Math.atan2(targetDirection.x,targetDirection.z);
      location.getLocalRotation().set(new Vector3f(0,1,0),yaw);
      entity.saveComponent(location);
    }
    entity.send(new CharacterMoveInputEvent(0,0,0,drive,false,false));
  }
}
