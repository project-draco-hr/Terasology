{
  this.data=newData;
  List<TFloatIterator> parts=Lists.newArrayList();
  TIntList partSizes=new TIntArrayList();
  int vertexCount=newData.getVertices().size() / VERTEX_SIZE;
  int vertexSize=VERTEX_SIZE;
  parts.add(newData.getVertices().iterator());
  partSizes.add(VERTEX_SIZE);
  if (newData.getTexCoord0() != null && newData.getTexCoord0().size() / TEX_COORD_0_SIZE == vertexCount) {
    parts.add(newData.getTexCoord0().iterator());
    partSizes.add(TEX_COORD_0_SIZE);
    texCoord0Offset=vertexSize * FLOAT_SIZE;
    vertexSize+=TEX_COORD_0_SIZE;
    hasTexCoord0=true;
  }
  if (newData.getTexCoord1() != null && newData.getTexCoord1().size() / TEX_COORD_1_SIZE == vertexCount) {
    parts.add(newData.getTexCoord1().iterator());
    partSizes.add(TEX_COORD_1_SIZE);
    texCoord1Offset=vertexSize * FLOAT_SIZE;
    vertexSize+=TEX_COORD_1_SIZE;
    hasTexCoord1=true;
  }
  if (newData.getNormals() != null && newData.getNormals().size() / NORMAL_SIZE == vertexCount) {
    parts.add(newData.getNormals().iterator());
    partSizes.add(NORMAL_SIZE);
    normalOffset=vertexSize * FLOAT_SIZE;
    vertexSize+=NORMAL_SIZE;
    hasNormal=true;
  }
  if (newData.getColors() != null && newData.getColors().size() / COLOR_SIZE == vertexCount) {
    parts.add(newData.getColors().iterator());
    partSizes.add(COLOR_SIZE);
    colorOffset=vertexSize * FLOAT_SIZE;
    vertexSize+=COLOR_SIZE;
    hasColor=true;
  }
  stride=vertexSize * FLOAT_SIZE;
  indexCount=newData.getIndices().size();
  createVertexBuffer(parts,partSizes,vertexCount,vertexSize);
  createIndexBuffer(newData.getIndices());
  aabb=AABB.createEncompasing(newData.getVertices());
}
