{
  PerformanceMonitor.startActivity("OptimizeBuffers");
  for (int j=0; j < mesh._vertexElements.length; j++) {
    mesh._vertexElements[j].finalVertices=BufferUtils.createByteBuffer(mesh._vertexElements[j].vertices.size() * 2 * 4 + mesh._vertexElements[j].tex.size() * 4 + mesh._vertexElements[j].color.size() * 4 + mesh._vertexElements[j].normals.size() * 4);
    int cTex=0;
    int cColor=0;
    for (int i=0; i < mesh._vertexElements[j].vertices.size(); i+=3, cTex+=3, cColor+=4) {
      Vector3f vertexPos=new Vector3f(mesh._vertexElements[j].vertices.get(i),mesh._vertexElements[j].vertices.get(i + 1),mesh._vertexElements[j].vertices.get(i + 2));
      mesh._vertexElements[j].finalVertices.putFloat(vertexPos.x);
      mesh._vertexElements[j].finalVertices.putFloat(vertexPos.y);
      mesh._vertexElements[j].finalVertices.putFloat(vertexPos.z);
      mesh._vertexElements[j].finalVertices.putFloat(mesh._vertexElements[j].tex.get(cTex));
      mesh._vertexElements[j].finalVertices.putFloat(mesh._vertexElements[j].tex.get(cTex + 1));
      mesh._vertexElements[j].finalVertices.putFloat(mesh._vertexElements[j].tex.get(cTex + 2));
      float[] result=new float[3];
      Vector3f normal=new Vector3f(mesh._vertexElements[j].normals.get(i),mesh._vertexElements[j].normals.get(i + 1),mesh._vertexElements[j].normals.get(i + 2));
      calcLightingValuesForVertexPos(chunkView,vertexPos,result,normal);
      mesh._vertexElements[j].finalVertices.putFloat(result[0]);
      mesh._vertexElements[j].finalVertices.putFloat(result[1]);
      mesh._vertexElements[j].finalVertices.putFloat(result[2]);
      mesh._vertexElements[j].finalVertices.putFloat(mesh._vertexElements[j].color.get(cColor));
      mesh._vertexElements[j].finalVertices.putFloat(mesh._vertexElements[j].color.get(cColor + 1));
      mesh._vertexElements[j].finalVertices.putFloat(mesh._vertexElements[j].color.get(cColor + 2));
      mesh._vertexElements[j].finalVertices.putFloat(mesh._vertexElements[j].color.get(cColor + 3));
      mesh._vertexElements[j].finalVertices.putFloat(normal.x);
      mesh._vertexElements[j].finalVertices.putFloat(normal.y);
      mesh._vertexElements[j].finalVertices.putFloat(normal.z);
    }
    mesh._vertexElements[j].finalIndices=BufferUtils.createIntBuffer(mesh._vertexElements[j].indices.size());
    TIntIterator indexIterator=mesh._vertexElements[j].indices.iterator();
    while (indexIterator.hasNext()) {
      mesh._vertexElements[j].finalIndices.put(indexIterator.next());
    }
    mesh._vertexElements[j].finalVertices.flip();
    mesh._vertexElements[j].finalIndices.flip();
  }
  PerformanceMonitor.endActivity();
}
