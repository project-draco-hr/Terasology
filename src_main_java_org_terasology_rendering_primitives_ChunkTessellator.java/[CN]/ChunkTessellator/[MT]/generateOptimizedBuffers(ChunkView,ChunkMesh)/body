{
  PerformanceMonitor.startActivity("OptimizeBuffers");
  for (int j=0; j < mesh.vertexElements.length; j++) {
    mesh.vertexElements[j].finalVertices=BufferUtils.createByteBuffer(mesh.vertexElements[j].vertices.size() * 4 + mesh.vertexElements[j].tex.size() * 4 + mesh.vertexElements[j].tex.size() * 4 + mesh.vertexElements[j].flags.size() * 4 + mesh.vertexElements[j].color.size() * 4 + mesh.vertexElements[j].normals.size() * 4);
    int cTex=0;
    int cColor=0;
    int cFlags=0;
    for (int i=0; i < mesh.vertexElements[j].vertices.size(); i+=3, cTex+=2, cColor+=4, cFlags++) {
      Vector3f vertexPos=new Vector3f(mesh.vertexElements[j].vertices.get(i),mesh.vertexElements[j].vertices.get(i + 1),mesh.vertexElements[j].vertices.get(i + 2));
      mesh.vertexElements[j].finalVertices.putFloat(vertexPos.x);
      mesh.vertexElements[j].finalVertices.putFloat(vertexPos.y);
      mesh.vertexElements[j].finalVertices.putFloat(vertexPos.z);
      mesh.vertexElements[j].finalVertices.putFloat(mesh.vertexElements[j].tex.get(cTex));
      mesh.vertexElements[j].finalVertices.putFloat(mesh.vertexElements[j].tex.get(cTex + 1));
      mesh.vertexElements[j].finalVertices.putFloat(mesh.vertexElements[j].flags.get(cFlags));
      float[] result=new float[3];
      Vector3f normal=new Vector3f(mesh.vertexElements[j].normals.get(i),mesh.vertexElements[j].normals.get(i + 1),mesh.vertexElements[j].normals.get(i + 2));
      calcLightingValuesForVertexPos(chunkView,vertexPos,result,normal);
      mesh.vertexElements[j].finalVertices.putFloat(result[0]);
      mesh.vertexElements[j].finalVertices.putFloat(result[1]);
      mesh.vertexElements[j].finalVertices.putFloat(result[2]);
      final int packedColor=RenderMath.packColor(mesh.vertexElements[j].color.get(cColor),mesh.vertexElements[j].color.get(cColor + 1),mesh.vertexElements[j].color.get(cColor + 2),mesh.vertexElements[j].color.get(cColor + 3));
      mesh.vertexElements[j].finalVertices.putInt(packedColor);
      mesh.vertexElements[j].finalVertices.putFloat(normal.x);
      mesh.vertexElements[j].finalVertices.putFloat(normal.y);
      mesh.vertexElements[j].finalVertices.putFloat(normal.z);
    }
    mesh.vertexElements[j].finalIndices=BufferUtils.createIntBuffer(mesh.vertexElements[j].indices.size());
    TIntIterator indexIterator=mesh.vertexElements[j].indices.iterator();
    while (indexIterator.hasNext()) {
      mesh.vertexElements[j].finalIndices.put(indexIterator.next());
    }
    mesh.vertexElements[j].finalVertices.flip();
    mesh.vertexElements[j].finalIndices.flip();
  }
  PerformanceMonitor.endActivity();
}
