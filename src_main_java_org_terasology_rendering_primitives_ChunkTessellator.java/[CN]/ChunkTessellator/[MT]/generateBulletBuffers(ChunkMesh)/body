{
  mesh._indexedMesh=new IndexedMesh();
  mesh._indexedMesh.vertexBase=BufferUtils.createByteBuffer(mesh._vertexElements[0].vertices.size() * FLOAT_BYTES);
  mesh._indexedMesh.triangleIndexBase=BufferUtils.createByteBuffer(mesh._vertexElements[0].indices.size() * INT_BYTES);
  mesh._indexedMesh.triangleIndexStride=3 * INT_BYTES;
  mesh._indexedMesh.vertexStride=3 * FLOAT_BYTES;
  mesh._indexedMesh.numVertices=mesh._vertexElements[0].vertices.size() / 3;
  mesh._indexedMesh.numTriangles=mesh._vertexElements[0].indices.size() / 3;
  mesh._indexedMesh.indexType=ScalarType.INTEGER;
  TIntIterator indexIterator=mesh._vertexElements[0].indices.iterator();
  while (indexIterator.hasNext()) {
    mesh._indexedMesh.triangleIndexBase.putInt(indexIterator.next());
  }
  TFloatIterator vertIterator=mesh._vertexElements[0].vertices.iterator();
  while (vertIterator.hasNext()) {
    mesh._indexedMesh.vertexBase.putFloat(vertIterator.next());
  }
}
