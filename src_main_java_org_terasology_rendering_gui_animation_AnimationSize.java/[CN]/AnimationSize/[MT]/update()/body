{
  if (dX == 0 || dY == 0) {
    dX=target.getSize().x < distination.x ? target.getSize().x / distination.x : -distination.x / target.getSize().x;
    dY=target.getSize().y < distination.y ? target.getSize().y / distination.y : -distination.y / target.getSize().y;
  }
  Vector2f direction=new Vector2f(dX,dY);
  direction.normalize();
  if (isRepeat() && (sizeFrom == null || sizeFrom.equals(new Vector2f(0f,0f)))) {
    sizeFrom=new Vector2f(target.getSize());
  }
  if (Math.abs((target.getSize().x - distination.x)) > speed || Math.abs((target.getSize().y - distination.y)) > speed) {
    direction.normalize();
    direction.scale(speed);
    Vector2f newSize=new Vector2f(target.getSize());
    newSize.add(direction);
    if (Math.abs((target.getSize().x - distination.x)) < speed) {
      newSize.x=target.getSize().x;
    }
    if (Math.abs((target.getSize().y - distination.y)) < speed) {
      newSize.y=target.getSize().y;
    }
    target.setSize(newSize);
  }
 else {
    target.setSize(distination);
    if (isRepeat()) {
      Vector2f swap=new Vector2f(distination);
      distination=new Vector2f(sizeFrom);
      sizeFrom=swap;
      dX=0;
      dY=0;
    }
 else {
      stop();
    }
  }
}
