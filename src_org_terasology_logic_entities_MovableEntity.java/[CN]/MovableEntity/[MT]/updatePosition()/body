{
  Vector3d oldPosition=new Vector3d(getPosition());
  double friction=Config.getInstance().getFriction();
  if (TeraMath.fastAbs(_velocity.y) > 0f) {
    _velocity.y+=-1f * _velocity.y * friction;
  }
  if (TeraMath.fastAbs(_velocity.x) > 0f) {
    _velocity.x+=-1f * _velocity.x * friction;
  }
  if (TeraMath.fastAbs(_velocity.z) > 0f) {
    _velocity.z+=-1f * _velocity.z * friction;
  }
  if (TeraMath.fastAbs(_velocity.x) > _activeWalkingSpeed || TeraMath.fastAbs(_velocity.z) > _activeWalkingSpeed || TeraMath.fastAbs(_velocity.y) > _activeWalkingSpeed) {
    double max=java.lang.Math.max(java.lang.Math.max(TeraMath.fastAbs(_velocity.x),TeraMath.fastAbs(_velocity.z)),TeraMath.fastAbs(_velocity.y));
    double div=max / _activeWalkingSpeed;
    _velocity.x/=div;
    _velocity.z/=div;
    _velocity.y/=div;
  }
  _velocity.x+=_movementDirection.x;
  _velocity.y+=_movementDirection.y;
  _velocity.z+=_movementDirection.z;
  double maxGravity=Config.getInstance().getMaxGravity();
  double maxGravitySwimming=Config.getInstance().getMaxGravitySwimming();
  double gravitySwimming=Config.getInstance().getGravitySwimming();
  double gravity=Config.getInstance().getGravity();
  if (_gravity > -maxGravity && !_godMode && !_isSwimming) {
    _gravity-=gravity;
  }
  if (_gravity < -maxGravity && !_godMode && !_isSwimming) {
    _gravity=-maxGravity;
  }
  if (_gravity > -maxGravitySwimming && !_godMode && _isSwimming) {
    _gravity-=gravitySwimming;
  }
  if (_gravity < -maxGravitySwimming && !_godMode && _isSwimming) {
    _gravity=-maxGravitySwimming;
  }
  getPosition().y+=_velocity.y;
  getPosition().y+=_gravity;
  if (!_godMode) {
    if (verticalHitTest(oldPosition)) {
      handleVerticalCollision();
      double oldGravity=_gravity;
      _gravity=0;
      if (oldGravity <= 0) {
        if (_jump) {
          AudioManager.getInstance().playVaryingPositionedSound(calcEntityPositionRelativeToPlayer(),_footstepSounds[TeraMath.fastAbs(_parent.getWorldProvider().getRandom().randomInt()) % 5]);
          _jump=false;
          _gravity=_jumpIntensity;
        }
 else         if (!_touchingGround) {
          AudioManager.getInstance().playVaryingPositionedSound(calcEntityPositionRelativeToPlayer(),_footstepSounds[TeraMath.fastAbs(_parent.getWorldProvider().getRandom().randomInt()) % 5]);
          _touchingGround=true;
        }
      }
 else {
        _touchingGround=false;
      }
    }
 else {
      _touchingGround=false;
    }
  }
 else {
    _gravity=0f;
  }
  oldPosition.set(getPosition());
  getPosition().x+=_velocity.x;
  getPosition().z+=_velocity.z;
  _stepCounter+=java.lang.Math.max(TeraMath.fastAbs(_velocity.x),TeraMath.fastAbs(_velocity.z));
  if (!_godMode) {
    if (horizontalHitTest(oldPosition)) {
      handleHorizontalCollision();
    }
  }
}
