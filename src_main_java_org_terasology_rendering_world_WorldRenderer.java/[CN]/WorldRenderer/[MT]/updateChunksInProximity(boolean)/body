{
  int newChunkPosX=calcCamChunkOffsetX();
  int newChunkPosZ=calcCamChunkOffsetZ();
  int viewingDistance=Config.getInstance().getActiveViewingDistance();
  if (_chunkPosX != newChunkPosX || _chunkPosZ != newChunkPosZ || force || _pendingChunks) {
    if (_chunksInProximity.size() == 0 || force || _pendingChunks) {
      _chunksInProximity.clear();
      for (int x=-(viewingDistance / 2); x < (viewingDistance / 2); x++) {
        for (int z=-(viewingDistance / 2); z < (viewingDistance / 2); z++) {
          NewChunk c=_chunkProvider.getChunk(newChunkPosX + x,0,newChunkPosZ + z);
          if (c != null && c.getChunkState() == NewChunk.State.Complete && _worldProvider.getWorldViewAround(c.getPos()) != null) {
            _chunksInProximity.add(c);
          }
 else {
            _pendingChunks=true;
          }
        }
      }
    }
 else {
      int vd2=viewingDistance / 2;
      Rect2i oldView=new Rect2i(_chunkPosX - vd2,_chunkPosZ - vd2,viewingDistance,viewingDistance);
      Rect2i newView=new Rect2i(newChunkPosX - vd2,newChunkPosZ - vd2,viewingDistance,viewingDistance);
      List<Rect2i> removeRects=Rect2i.subtractEqualsSized(oldView,newView);
      for (      Rect2i r : removeRects) {
        for (int x=r.minX(); x < r.maxX(); ++x) {
          for (int y=r.minY(); y < r.maxY(); ++y) {
            NewChunk c=_chunkProvider.getChunk(x,0,y);
            _chunksInProximity.remove(c);
          }
        }
      }
      List<Rect2i> addRects=Rect2i.subtractEqualsSized(newView,oldView);
      for (      Rect2i r : addRects) {
        for (int x=r.minX(); x < r.maxX(); ++x) {
          for (int y=r.minY(); y < r.maxY(); ++y) {
            NewChunk c=_chunkProvider.getChunk(x,0,y);
            if (c != null && c.getChunkState() == NewChunk.State.Complete && _worldProvider.getWorldViewAround(c.getPos()) != null) {
              _chunksInProximity.add(c);
            }
 else {
              _pendingChunks=true;
            }
          }
        }
      }
    }
    _chunkPosX=newChunkPosX;
    _chunkPosZ=newChunkPosZ;
    Collections.sort(_chunksInProximity,new ChunkProximityComparator());
    return true;
  }
  return false;
}
