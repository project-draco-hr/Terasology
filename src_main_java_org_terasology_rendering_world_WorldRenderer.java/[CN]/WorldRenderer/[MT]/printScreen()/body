{
  GL11.glReadBuffer(GL11.GL_FRONT);
  final int width=Display.getWidth();
  final int height=Display.getHeight();
  final int bpp=4;
  final ByteBuffer buffer=BufferUtils.createByteBuffer(width * height * bpp);
  GL11.glReadPixels(0,0,width,height,(bpp == 3) ? GL11.GL_RGB : GL11.GL_RGBA,GL11.GL_UNSIGNED_BYTE,buffer);
  Runnable r=new Runnable(){
    @Override public void run(){
      Calendar cal=Calendar.getInstance();
      SimpleDateFormat sdf=new SimpleDateFormat("yyMMddHHmmssSSS");
      Path file=PathManager.getInstance().getScreenshotPath().resolve(sdf.format(cal.getTime()) + ".png");
      BufferedImage image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);
      for (int x=0; x < width; x++)       for (int y=0; y < height; y++) {
        int i=(x + width * y) * bpp;
        int r=buffer.get(i) & 0xFF;
        int g=buffer.get(i + 1) & 0xFF;
        int b=buffer.get(i + 2) & 0xFF;
        image.setRGB(x,height - (y + 1),(0xFF << 24) | (r << 16) | (g << 8)| b);
      }
      try (OutputStream stream=new BufferedOutputStream(Files.newOutputStream(file))){
        ImageIO.write(image,"png",stream);
      }
 catch (      IOException e) {
        logger.warn("Could not save screenshot!",e);
      }
    }
  }
;
  CoreRegistry.get(GameEngine.class).submitTask("Write screenshot",r);
}
