{
  Map<Class<? extends Component>,Component> componentMap=Maps.newHashMap();
  if (entityData.hasParentPrefab() && !entityData.getParentPrefab().isEmpty() && prefabManager.exists(entityData.getParentPrefab())) {
    Prefab prefab=prefabManager.getPrefab(entityData.getParentPrefab());
    for (    Component component : prefab.listComponents()) {
      String componentName=MetadataUtil.getComponentClassName(component.getClass());
      if (!containsIgnoreCase(componentName,entityData.getRemovedComponentList())) {
        componentMap.put(component.getClass(),componentLibrary.copy(component));
      }
    }
    componentMap.put(EntityInfoComponent.class,new EntityInfoComponent(entityData.getParentPrefab(),true));
  }
  for (  EntityData.Component componentData : entityData.getComponentList()) {
    Class<? extends Component> componentClass=componentSerializer.getComponentClass(componentData);
    if (componentClass == null)     continue;
    Component existingComponent=componentMap.get(componentClass);
    if (existingComponent == null) {
      Component newComponent=componentSerializer.deserialize(componentData);
      componentMap.put(componentClass,newComponent);
    }
 else {
      componentSerializer.deserializeOnto(existingComponent,componentData);
    }
  }
  if (ignoringEntityId) {
    return entityManager.create(componentMap.values());
  }
 else {
    return entityManager.createEntityWithId(entityData.getId(),componentMap.values());
  }
}
