{
  if (input.readChar() != 'T' || input.readChar() != 'E' || input.readChar() != 'R' || input.readChar() != 'A')   throw new IOException("Not a valid binary file");
  int fileVersion=input.readInt();
  short numTypes=input.readShort();
  for (int i=0; i < numTypes; ++i) {
    short typeId=input.readShort();
    byte size=input.readByte();
    String name=input.readUTF();
    TypeInfo info=typeNameMap.get(name);
    if (info != null && info.size() == size) {
      typeLookup.put(typeId,info);
    }
 else {
      if (info != null) {
        logger.log(Level.SEVERE,String.format("Size mismatch for type %s, expected %d but found %d",name,info.size(),size));
      }
 else {
        logger.log(Level.SEVERE,String.format("Unknown type %s",name));
      }
      if (size == TypeInfo.VARIABLE_LENGTH) {
        throw new IOException("Unknown variable length type, cannot continue data read");
      }
      typeLookup.put(typeId,new UnknownTypeInfo(size));
    }
  }
  short numPersistableTypes=input.readShort();
  for (int i=0; i < numPersistableTypes; ++i) {
    short id=input.readShort();
    String name=input.readUTF();
    Class<? extends Persistable> clazz=persistableTypeMap.get(name);
    if (clazz != null) {
      persistableTypeLookup.put(id,clazz);
    }
 else {
      logger.warning(String.format("Unknown persistable class \"%s\" will be skipped",name));
    }
  }
  loadNextPersistable();
}
