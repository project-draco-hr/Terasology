{
  Biome selfBiome=view.getBiome(x,y,z);
  Block selfBlock=view.getBlock(x,y,z);
  ChunkVertexFlag vertexFlag=ChunkVertexFlag.NORMAL;
  if (selfBlock.isWater()) {
    if (view.getBlock(x,y + 1,z).isWater()) {
      vertexFlag=ChunkVertexFlag.WATER;
    }
 else {
      vertexFlag=ChunkVertexFlag.WATER_SURFACE;
    }
  }
 else   if (selfBlock.isLava()) {
    vertexFlag=ChunkVertexFlag.LAVA;
  }
 else   if (selfBlock.isWaving() && selfBlock.isDoubleSided()) {
    vertexFlag=ChunkVertexFlag.WAVING;
  }
 else   if (selfBlock.isWaving()) {
    vertexFlag=ChunkVertexFlag.WAVING_BLOCK;
  }
  Map<Side,Block> adjacentBlocks=Maps.newEnumMap(Side.class);
  for (  Side side : Side.values()) {
    Vector3i offset=side.getVector3i();
    Block blockToCheck=view.getBlock(x + offset.x,y + offset.y,z + offset.z);
    adjacentBlocks.put(side,blockToCheck);
  }
  BlockAppearance blockAppearance=selfBlock.getAppearance(adjacentBlocks);
  ChunkMesh.RenderType renderType=ChunkMesh.RenderType.TRANSLUCENT;
  if (!selfBlock.isTranslucent()) {
    renderType=ChunkMesh.RenderType.OPAQUE;
  }
  if (selfBlock.isWater() || selfBlock.isIce()) {
    renderType=ChunkMesh.RenderType.WATER_AND_ICE;
  }
  if (selfBlock.isDoubleSided()) {
    renderType=ChunkMesh.RenderType.BILLBOARD;
  }
  if (blockAppearance.getPart(BlockPart.CENTER) != null) {
    Vector4f colorOffset=selfBlock.calcColorOffsetFor(BlockPart.CENTER,selfBiome);
    blockAppearance.getPart(BlockPart.CENTER).appendTo(chunkMesh,x,y,z,colorOffset,renderType,vertexFlag);
  }
  boolean[] drawDir=new boolean[6];
  for (  Side side : Side.values()) {
    drawDir[side.ordinal()]=blockAppearance.getPart(BlockPart.fromSide(side)) != null && isSideVisibleForBlockTypes(adjacentBlocks.get(side),selfBlock,side);
  }
  if (selfBlock.isLiquid()) {
    Block bottomBlock=adjacentBlocks.get(Side.BOTTOM);
    for (    Side side : Side.horizontalSides()) {
      Vector3i offset=side.getVector3i();
      Block adjacentBelow=view.getBlock(x + offset.x,y - 1,z + offset.z);
      Block adjacent=adjacentBlocks.get(side);
      boolean visible=(blockAppearance.getPart(BlockPart.fromSide(side)) != null && isSideVisibleForBlockTypes(adjacentBelow,selfBlock,side) && !isSideVisibleForBlockTypes(bottomBlock,adjacent,side.reverse()));
      drawDir[side.ordinal()]|=visible;
    }
    Block blockToCheck=adjacentBlocks.get(Side.TOP);
    drawDir[Side.TOP.ordinal()]|=!blockToCheck.isLiquid();
    if (bottomBlock.isLiquid() || bottomBlock.isInvisible()) {
      for (      Side dir : Side.values()) {
        if (drawDir[dir.ordinal()]) {
          Vector4f colorOffset=selfBlock.calcColorOffsetFor(BlockPart.fromSide(dir),selfBiome);
          selfBlock.getLoweredLiquidMesh(dir).appendTo(chunkMesh,x,y,z,colorOffset,renderType,vertexFlag);
        }
      }
      return;
    }
  }
  for (  Side dir : Side.values()) {
    if (drawDir[dir.ordinal()]) {
      Vector4f colorOffset=selfBlock.calcColorOffsetFor(BlockPart.fromSide(dir),selfBiome);
      if (selfBlock.isGrass() && dir != Side.TOP && dir != Side.BOTTOM) {
        blockAppearance.getPart(BlockPart.fromSide(dir)).appendTo(chunkMesh,x,y,z,colorOffset,renderType,ChunkVertexFlag.COLOR_MASK);
      }
 else {
        blockAppearance.getPart(BlockPart.fromSide(dir)).appendTo(chunkMesh,x,y,z,colorOffset,renderType,vertexFlag);
      }
    }
  }
}
