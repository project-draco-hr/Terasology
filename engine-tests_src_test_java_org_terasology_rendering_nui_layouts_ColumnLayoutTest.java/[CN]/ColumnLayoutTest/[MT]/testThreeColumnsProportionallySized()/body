{
  columnLayout.setAutoSizeColumns(false);
  columnLayout.setColumnWidths(0.5f,0.2f,0.3f);
  when(canvas.calculateRestrictedSize(eq(itemAt1x1),any(Vector2i.class))).thenReturn(new Vector2i(50,10));
  when(canvas.calculateRestrictedSize(eq(itemAt2x1),any(Vector2i.class))).thenReturn(new Vector2i(5,5));
  when(canvas.calculateRestrictedSize(eq(itemAt3x1),any(Vector2i.class))).thenReturn(new Vector2i(10,10));
  when(canvas.calculateRestrictedSize(eq(itemAt1x2),any(Vector2i.class))).thenReturn(new Vector2i(20,10));
  when(canvas.calculateRestrictedSize(eq(itemAt2x2),any(Vector2i.class))).thenReturn(new Vector2i(5,5));
  when(canvas.calculateRestrictedSize(eq(itemAt3x2),any(Vector2i.class))).thenReturn(new Vector2i(20,10));
  Vector2i availableSize=new Vector2i(200,200);
  Vector2i result=columnLayout.getPreferredContentSize(canvas,availableSize);
  assertEquals(100,result.x);
  assertEquals(20,result.y);
  when(canvas.size()).thenReturn(availableSize);
  columnLayout.onDraw(canvas);
  verify(canvas).drawWidget(itemAt1x1,Rect2i.createFromMinAndSize(0,0,100,100));
  verify(canvas).drawWidget(itemAt2x1,Rect2i.createFromMinAndSize(100,0,40,100));
  verify(canvas).drawWidget(itemAt3x1,Rect2i.createFromMinAndSize(100 + 40,0,60,100));
  verify(canvas).drawWidget(itemAt1x2,Rect2i.createFromMinAndSize(0,100,100,100));
  verify(canvas).drawWidget(itemAt2x2,Rect2i.createFromMinAndSize(100,100,40,100));
  verify(canvas).drawWidget(itemAt3x2,Rect2i.createFromMinAndSize(100 + 40,100,60,100));
}
