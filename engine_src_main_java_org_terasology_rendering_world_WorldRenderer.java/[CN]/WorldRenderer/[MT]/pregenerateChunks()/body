{
  boolean complete=true;
  int newChunkPosX=calcCamChunkOffsetX();
  int newChunkPosZ=calcCamChunkOffsetZ();
  int viewingDistance=config.getRendering().getViewDistance().getChunkDistance();
  chunkProvider.update();
  for (  Vector3i pos : Region3i.createFromCenterExtents(new Vector3i(newChunkPosX,0,newChunkPosZ),new Vector3i(viewingDistance / 2,0,viewingDistance / 2))) {
    ChunkImpl chunk=chunkProvider.getChunk(pos);
    if (chunk == null || chunk.getChunkState() != ChunkImpl.State.COMPLETE) {
      complete=false;
    }
 else     if (chunk.isDirty()) {
      ChunkView view=worldProvider.getLocalView(chunk.getPos());
      if (view == null) {
        continue;
      }
      chunk.setDirty(false);
      ChunkMesh[] newMeshes=new ChunkMesh[VERTICAL_SEGMENTS];
      for (int seg=0; seg < VERTICAL_SEGMENTS; seg++) {
        newMeshes[seg]=chunkTessellator.generateMesh(view,chunk.getPos(),ChunkConstants.SIZE_Y / VERTICAL_SEGMENTS,seg * (ChunkConstants.SIZE_Y / VERTICAL_SEGMENTS));
      }
      chunk.setPendingMesh(newMeshes);
      if (chunk.getPendingMesh() != null) {
        for (int j=0; j < chunk.getPendingMesh().length; j++) {
          chunk.getPendingMesh()[j].generateVBOs();
        }
        if (chunk.getMesh() != null) {
          for (int j=0; j < chunk.getMesh().length; j++) {
            chunk.getMesh()[j].dispose();
          }
        }
        chunk.setMesh(chunk.getPendingMesh());
        chunk.setPendingMesh(null);
      }
      return false;
    }
  }
  return complete;
}
