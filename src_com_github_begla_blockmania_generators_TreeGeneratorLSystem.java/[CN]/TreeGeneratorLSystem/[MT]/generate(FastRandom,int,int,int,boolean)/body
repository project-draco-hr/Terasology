{
  String axiom=new String(_initialAxiom);
  Stack<Vector3f> _stackPosition=new Stack<Vector3f>();
  Stack<Matrix4f> _stackOrientation=new Stack<Matrix4f>();
  for (int i=0; i < _iterations; i++) {
    String temp="";
    for (int j=0; j < axiom.length(); j++) {
      String c=String.valueOf(axiom.charAt(j));
      if (_ruleSet.containsKey(c))       temp+=_ruleSet.get(c);
 else       temp+=c;
    }
    axiom=temp;
  }
  Vector3f position=new Vector3f(0,0,0);
  Matrix4f rotation=new Matrix4f();
  rotation.setIdentity();
  rotation.setRotation(new AxisAngle4f(new Vector3f(0,0,1),(float)Math.PI / 2));
  beforeExecution(rand);
  for (int i=0; i < axiom.length(); i++) {
    char c=axiom.charAt(i);
    Matrix4f tempRotation=new Matrix4f();
    tempRotation.setIdentity();
switch (c) {
case 'G':
case 'F':
      _generatorManager.getParent().setBlock(posX + (int)position.x,posY + (int)position.y,posZ + (int)position.z,BlockManager.getInstance().getBlock("Tree trunk").getId(),update,false,true);
    if (_stackOrientation.size() > 1 && _generateLeafBlocks) {
      int size=1;
      for (int x=-size; x <= size; x++) {
        for (int y=-size; y <= size; y++) {
          for (int z=-size; z <= size; z++) {
            if (Math.abs(x) == size && Math.abs(y) == size && Math.abs(z) == size)             continue;
            if (_generatorManager.getParent().getBlock(posX + (int)position.x + x,posY + (int)position.y + y,posZ + z + (int)position.z) == 0x0)             _generatorManager.getParent().setBlock(posX + (int)position.x + x,posY + (int)position.y + y,posZ + z + (int)position.z,_leafType,update,false,false);
          }
        }
      }
    }
  Vector3f dir=new Vector3f(1,0,0);
rotation.transform(dir);
position.add(dir);
break;
case '[':
_stackOrientation.push(new Matrix4f(rotation));
_stackPosition.push(new Vector3f(position));
break;
case ']':
rotation=_stackOrientation.pop();
position=_stackPosition.pop();
break;
case '+':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(0,0,1),(float)Math.toRadians(_angleInDegree)));
rotation.mul(tempRotation);
break;
case '-':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(0,0,-1),(float)Math.toRadians(_angleInDegree)));
rotation.mul(tempRotation);
break;
case '&':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(0,1,0),(float)Math.toRadians(_angleInDegree)));
rotation.mul(tempRotation);
break;
case '^':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(0,-1,0),(float)Math.toRadians(_angleInDegree)));
rotation.mul(tempRotation);
break;
case '*':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(1,0,0),(float)Math.toRadians(_angleInDegree)));
rotation.mul(tempRotation);
break;
case '/':
tempRotation.setIdentity();
tempRotation.setRotation(new AxisAngle4f(new Vector3f(-1,0,0),(float)Math.toRadians(_angleInDegree)));
rotation.mul(tempRotation);
break;
}
}
}
