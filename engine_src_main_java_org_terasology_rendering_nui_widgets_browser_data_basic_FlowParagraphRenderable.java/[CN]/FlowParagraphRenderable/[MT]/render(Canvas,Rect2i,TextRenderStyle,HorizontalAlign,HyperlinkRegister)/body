{
  int y=0;
  int width=region.width();
  int insetHeight=getInsetHeight(defaultStyle);
  if (insetDocument != null) {
    Rect2i insetRegion;
    if (left) {
      insetRegion=Rect2i.createFromMinAndSize(region.minX(),region.minY(),insetWidth,insetHeight);
    }
 else {
      insetRegion=Rect2i.createFromMinAndSize(region.maxX() - insetWidth,region.minY(),insetWidth,insetHeight);
    }
    DocumentRenderer.drawDocumentInRegion(insetDocument,canvas,defaultStyle.getFont(false),defaultStyle.getColor(false),insetRegion,hyperlinkRegister);
  }
  updateCacheIfNeeded(defaultStyle,width,insetHeight);
  for (  LaidFlowLine<FlowRenderable> line : lineBuilderCache.laidLines) {
    int x=0;
    int insetXAdvance;
    int availableWidth;
    if (left && y < insetHeight) {
      insetXAdvance=insetWidth;
      availableWidth=width - insetWidth;
    }
 else {
      insetXAdvance=0;
      availableWidth=width;
    }
    int lineHeight=line.getHeight();
    int lineWidth=line.getWidth();
    int alignOffset=horizontalAlign.getOffset(lineWidth,availableWidth);
    for (    FlowRenderable flowRenderable : line.getFlowRenderables()) {
      int elementWidth=flowRenderable.getWidth(defaultStyle);
      Rect2i renderableRegion=Rect2i.createFromMinAndSize(insetXAdvance + alignOffset + region.minX()+ x,region.minY() + y,elementWidth,lineHeight);
      String hyperlink=flowRenderable.getAction();
      if (hyperlink != null) {
        hyperlinkRegister.registerHyperlink(renderableRegion,hyperlink);
      }
      flowRenderable.render(canvas,renderableRegion,defaultStyle);
      x+=elementWidth;
    }
    y+=lineHeight;
  }
}
