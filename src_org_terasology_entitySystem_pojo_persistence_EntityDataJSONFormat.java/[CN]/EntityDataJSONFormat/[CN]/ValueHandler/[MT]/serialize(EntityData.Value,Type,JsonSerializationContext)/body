{
  if (src.getBooleanCount() > 1) {
    return context.serialize(src.getBooleanList());
  }
 else   if (src.getBooleanCount() == 1) {
    return context.serialize(src.getBoolean(0));
  }
 else   if (src.getDoubleCount() > 1) {
    return context.serialize(src.getDoubleList());
  }
 else   if (src.getDoubleCount() == 1) {
    return context.serialize(src.getDouble(0));
  }
 else   if (src.getFloatCount() > 1) {
    return context.serialize(src.getFloatList());
  }
 else   if (src.getFloatCount() == 1) {
    return context.serialize(src.getFloat(0));
  }
 else   if (src.getIntegerCount() > 1) {
    return context.serialize(src.getIntegerList());
  }
 else   if (src.getIntegerCount() == 1) {
    return context.serialize(src.getInteger(0));
  }
 else   if (src.getLongCount() > 1) {
    return context.serialize(src.getLongList());
  }
 else   if (src.getLongCount() == 1) {
    return context.serialize(src.getLong(0));
  }
 else   if (src.getStringCount() > 1) {
    return context.serialize(src.getStringList());
  }
 else   if (src.getStringCount() == 1) {
    return context.serialize(src.getString(0));
  }
 else   if (src.getValueCount() > 0) {
    return context.serialize(src.getValueList());
  }
 else   if (src.hasBytes()) {
    return context.serialize(src.getBytes().toByteArray());
  }
 else   if (src.getNameValueCount() > 0) {
    JsonObject obj=new JsonObject();
    for (    EntityData.NameValue nameValue : src.getNameValueList()) {
      obj.add(nameValue.getName(),context.serialize(nameValue.getValue()));
    }
    return obj;
  }
  return JsonNull.INSTANCE;
}
