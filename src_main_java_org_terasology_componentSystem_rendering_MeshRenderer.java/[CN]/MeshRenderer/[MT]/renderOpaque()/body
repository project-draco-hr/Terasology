{
  boolean carryingTorch=CoreRegistry.get(LocalPlayer.class).isCarryingTorch();
  Vector3d cameraPosition=worldRenderer.getActiveCamera().getPosition();
  for (  EntityRef entity : manager.iteratorEntities(MeshComponent.class,AABBCollisionComponent.class,LocationComponent.class)) {
    MeshComponent meshComp=entity.getComponent(MeshComponent.class);
    if (meshComp.renderType != MeshComponent.RenderType.Normal || meshComp.mesh == null)     continue;
    AABBCollisionComponent collision=entity.getComponent(AABBCollisionComponent.class);
    LocationComponent location=entity.getComponent(LocationComponent.class);
    Vector3f worldPos=location.getWorldPosition();
    Vector3d extents=new Vector3d(collision.getExtents());
    float worldScale=location.getWorldScale();
    extents.scale(worldScale);
    AABB aabb=new AABB(new Vector3d(worldPos),new Vector3d(collision.getExtents()));
    if (worldRenderer.isAABBVisible(aabb)) {
      glPushMatrix();
      glTranslated(worldPos.x - cameraPosition.x,worldPos.y - cameraPosition.y,worldPos.z - cameraPosition.z);
      AxisAngle4f rot=new AxisAngle4f();
      rot.set(location.getWorldRotation());
      glRotatef(TeraMath.RAD_TO_DEG * rot.angle,rot.x,rot.y,rot.z);
      glScalef(worldScale,worldScale,worldScale);
      meshComp.material.enable();
      meshComp.material.setFloat("light",worldRenderer.getRenderingLightValueAt(worldPos));
      meshComp.material.setInt("carryingTorch",carryingTorch ? 1 : 0);
      meshComp.material.bindTextures();
      meshComp.mesh.render();
      glPopMatrix();
    }
  }
}
