{
  Vector3f cameraPosition=worldRenderer.getActiveCamera().getPosition();
  ShaderProgram shader=ShaderManager.getInstance().getShaderProgram("gelatinousCube");
  shader.enable();
  for (  EntityRef entity : gelatinous) {
    MeshComponent meshComp=entity.getComponent(MeshComponent.class);
    LocationComponent location=entity.getComponent(LocationComponent.class);
    if (location == null)     continue;
    Quat4f worldRot=location.getWorldRotation();
    Vector3f worldPos=location.getWorldPosition();
    float worldScale=location.getWorldScale();
    AABB aabb=mesh.getAABB().transform(worldRot,worldPos,worldScale);
    if (worldRenderer.isAABBVisible(aabb)) {
      glPushMatrix();
      glTranslated(worldPos.x - cameraPosition.x,worldPos.y - cameraPosition.y,worldPos.z - cameraPosition.z);
      AxisAngle4f rot=new AxisAngle4f();
      rot.set(worldRot);
      glRotatef(TeraMath.RAD_TO_DEG * rot.angle,rot.x,rot.y,rot.z);
      glScalef(worldScale,worldScale,worldScale);
      shader.setFloat4("colorOffset",meshComp.color.x,meshComp.color.y,meshComp.color.z,meshComp.color.w);
      shader.setFloat("light",worldRenderer.getRenderingLightValueAt(worldPos));
      mesh.render();
      glPopMatrix();
    }
  }
}
