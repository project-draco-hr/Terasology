{
  final Task[] spies=new Task[2];
  Interpreter interpreter=new Interpreter(null);
  Node one=create(new Mocker(){
    @Override public void mock(    Task spy){
      when(spy.update(anyInt())).thenReturn(Status.RUNNING,Status.FAILURE);
      spies[0]=spy;
    }
  }
);
  Node two=create(new Mocker(){
    @Override public void mock(    Task spy){
      when(spy.update(anyInt())).thenReturn(Status.RUNNING);
      spies[1]=spy;
    }
  }
);
  SelectorNode node=new SelectorNode();
  node.children().add(one);
  node.children().add(two);
  Task selector=node.createTask();
  interpreter.start(selector);
  interpreter.tick(0);
  Assert.assertEquals(Status.RUNNING,selector.getStatus());
  interpreter.tick(0);
  Assert.assertEquals(Status.RUNNING,selector.getStatus());
  interpreter.tick(0);
  Assert.assertEquals(Status.RUNNING,selector.getStatus());
  verify(spies[0]).onTerminate(Status.FAILURE);
  verify(spies[1]).onInitialize();
}
