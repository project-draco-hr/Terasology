{
switch (exp) {
case 0:
    return 1L;
case 1:
  return base;
case 2:
return base * base;
case 3:
return base * base * base;
}
if (exp < 0) {
if (base == 0L) {
throw new ArithmeticException("0^" + exp + " causes division by zero");
}
if (base == 1L) {
return 1L;
}
if (base == -1L) {
if (exp % 2 == 0) {
return 1L;
}
return -1L;
}
return 0L;
}
long temp=base;
exp--;
while (true) {
if ((exp & 1) != 0) {
base*=temp;
}
exp>>=1;
if (exp == 0) {
break;
}
temp*=temp;
}
return base;
}
