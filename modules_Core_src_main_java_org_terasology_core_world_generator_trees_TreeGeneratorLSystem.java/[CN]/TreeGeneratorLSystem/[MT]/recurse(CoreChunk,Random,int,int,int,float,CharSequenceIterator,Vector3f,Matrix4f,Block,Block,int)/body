{
  Matrix4f tempRotation=new Matrix4f();
  while (axiomIterator.hasNext()) {
    char c=axiomIterator.nextChar();
switch (c) {
case 'G':
case 'F':
      safelySetBlock(view,posX + (int)position.x + 1,posY + (int)position.y,posZ + (int)position.z,bark);
    safelySetBlock(view,posX + (int)position.x - 1,posY + (int)position.y,posZ + (int)position.z,bark);
  safelySetBlock(view,posX + (int)position.x,posY + (int)position.y,posZ + (int)position.z + 1,bark);
safelySetBlock(view,posX + (int)position.x,posY + (int)position.y,posZ + (int)position.z - 1,bark);
if (depth > 1) {
int size=1;
for (int x=-size; x <= size; x++) {
  for (int y=-size; y <= size; y++) {
    for (int z=-size; z <= size; z++) {
      if (Math.abs(x) == size && Math.abs(y) == size && Math.abs(z) == size) {
        continue;
      }
      safelySetBlock(view,posX + (int)position.x + x+ 1,posY + (int)position.y + y,posZ + z + (int)position.z,leaf);
      safelySetBlock(view,posX + (int)position.x + x - 1,posY + (int)position.y + y,posZ + z + (int)position.z,leaf);
      safelySetBlock(view,posX + (int)position.x + x,posY + (int)position.y + y,posZ + z + (int)position.z+ 1,leaf);
      safelySetBlock(view,posX + (int)position.x + x,posY + (int)position.y + y,posZ + z + (int)position.z - 1,leaf);
    }
  }
}
}
Vector3f dir=new Vector3f(1f,0f,0f);
rotation.transformVector(dir);
position.add(dir);
break;
case '[':
recurse(view,rand,posX,posY,posZ,angleOffset,axiomIterator,new Vector3f(position),new Matrix4f(rotation),bark,leaf,depth);
break;
case ']':
return;
case '+':
tempRotation=new Matrix4f(new Quat4f(new Vector3f(0f,0f,1f),angle + angleOffset),Vector3f.ZERO,1.0f);
rotation.mul(tempRotation);
break;
case '-':
tempRotation=new Matrix4f(new Quat4f(new Vector3f(0f,0f,-1f),angle + angleOffset),Vector3f.ZERO,1.0f);
rotation.mul(tempRotation);
break;
case '&':
tempRotation=new Matrix4f(new Quat4f(new Vector3f(0f,1f,0f),angle + angleOffset),Vector3f.ZERO,1.0f);
rotation.mul(tempRotation);
break;
case '^':
tempRotation=new Matrix4f(new Quat4f(new Vector3f(0f,-1f,0f),angle + angleOffset),Vector3f.ZERO,1.0f);
rotation.mul(tempRotation);
break;
case '*':
tempRotation=new Matrix4f(new Quat4f(new Vector3f(1f,0f,0f),angle),Vector3f.ZERO,1.0f);
rotation.mul(tempRotation);
break;
case '/':
tempRotation=new Matrix4f(new Quat4f(new Vector3f(-1f,0f,0f),angle),Vector3f.ZERO,1.0f);
rotation.mul(tempRotation);
break;
default :
if (depth == maxDepth - 1) {
break;
}
LSystemRule rule=ruleSet.get(c);
if (rule == null) {
break;
}
float weightedFailureProbability=TeraMath.pow(1f - rule.getProbability(),maxDepth - depth);
if (rand.nextFloat() < weightedFailureProbability) {
break;
}
recurse(view,rand,posX,posY,posZ,angleOffset,new CharSequenceIterator(rule.getAxiom()),position,rotation,bark,leaf,depth + 1);
}
}
}
