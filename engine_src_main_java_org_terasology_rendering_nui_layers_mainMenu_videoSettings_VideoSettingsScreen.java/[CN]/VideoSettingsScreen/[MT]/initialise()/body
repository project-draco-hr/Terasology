{
  UIDropdown<Preset> videoQuality=find("graphicsPreset",UIDropdown.class);
  if (videoQuality != null) {
    videoQuality.setOptions(Lists.newArrayList(Preset.CUSTOM,Preset.MINIMAL,Preset.NICE,Preset.EPIC,Preset.INSANE,Preset.UBER));
    videoQuality.bindSelection(new PresetBinding(config.getRendering()));
  }
  UIDropdown<EnvironmentalEffects> environmentalEffects=find("environmentEffects",UIDropdown.class);
  if (environmentalEffects != null) {
    environmentalEffects.setOptions(Lists.newArrayList(EnvironmentalEffects.OFF,EnvironmentalEffects.LOW,EnvironmentalEffects.HIGH));
    environmentalEffects.bindSelection(new EnvironmentEffectsBinding(config.getRendering()));
  }
  UIDropdown<ViewDistance> viewDistance=find("viewDistance",UIDropdown.class);
  if (viewDistance != null) {
    viewDistance.setOptions(Arrays.asList(ViewDistance.values()));
    viewDistance.bindSelection(BindHelper.bindBeanProperty("viewDistance",config.getRendering(),ViewDistance.class));
  }
  UIDropdown<WaterReflection> waterReflection=find("reflections",UIDropdown.class);
  if (waterReflection != null) {
    waterReflection.setOptions(Lists.newArrayList(WaterReflection.SKY,WaterReflection.GLOBAL,WaterReflection.LOCAL));
    waterReflection.bindSelection(new WaterReflectionBinding(config.getRendering()));
  }
  UIDropdown<Integer> blur=find("blur",UIDropdown.class);
  if (blur != null) {
    blur.setOptions(Lists.newArrayList(0,1,2,3));
    blur.bindSelection(BindHelper.bindBeanProperty("blurIntensity",config.getRendering(),Integer.TYPE));
    blur.setOptionRenderer(new StringTextRenderer<Integer>(){
      @Override public String getString(      Integer value){
switch (value) {
case 1:
          return "Some";
case 2:
        return "Normal";
case 3:
      return "Max";
default :
    return "Off";
}
}
}
);
}
UIDropdown<DynamicShadows> dynamicShadows=find("shadows",UIDropdown.class);
if (dynamicShadows != null) {
dynamicShadows.setOptions(Arrays.asList(DynamicShadows.values()));
dynamicShadows.bindSelection(new DynamicShadowsBinding(config.getRendering()));
}
final UISlider fovSlider=find("fov",UISlider.class);
if (fovSlider != null) {
fovSlider.setIncrement(5.0f);
fovSlider.setPrecision(0);
fovSlider.setMinimum(70);
fovSlider.setRange(50);
fovSlider.bindValue(BindHelper.bindBeanProperty("fieldOfView",config.getRendering(),Float.TYPE));
}
UIDropdown<CameraSetting> cameraSetting=find("camera",UIDropdown.class);
if (cameraSetting != null) {
cameraSetting.setOptions(Arrays.asList(CameraSetting.values()));
cameraSetting.bindSelection(new CameraSettingBinding(config.getRendering()));
}
WidgetUtil.tryBindCheckbox(this,"oculusVrSupport",BindHelper.bindBeanProperty("oculusVrSupport",config.getRendering(),Boolean.TYPE));
WidgetUtil.tryBindCheckbox(this,"cloudShadow",BindHelper.bindBeanProperty("cloudShadows",config.getRendering(),Boolean.TYPE));
WidgetUtil.tryBindCheckbox(this,"parallax",BindHelper.bindBeanProperty("parallaxMapping",config.getRendering(),Boolean.TYPE));
WidgetUtil.tryBindCheckbox(this,"filmGrain",BindHelper.bindBeanProperty("filmGrain",config.getRendering(),Boolean.TYPE));
WidgetUtil.tryBindCheckbox(this,"motionBlur",BindHelper.bindBeanProperty("motionBlur",config.getRendering(),Boolean.TYPE));
WidgetUtil.tryBindCheckbox(this,"bobbing",BindHelper.bindBeanProperty("cameraBobbing",config.getRendering(),Boolean.TYPE));
WidgetUtil.tryBindCheckbox(this,"outline",BindHelper.bindBeanProperty("outline",config.getRendering(),Boolean.TYPE));
WidgetUtil.tryBindCheckbox(this,"vsync",BindHelper.bindBeanProperty("vSync",config.getRendering(),Boolean.TYPE));
WidgetUtil.tryBindCheckbox(this,"eyeAdaptation",BindHelper.bindBeanProperty("eyeAdaptation",config.getRendering(),Boolean.TYPE));
WidgetUtil.trySubscribe(this,"fovReset",new ActivateEventListener(){
@Override public void onActivated(UIWidget widget){
CameraSettingBinding cam;
fovSlider.setValue(100.0f);
}
}
);
WidgetUtil.trySubscribe(this,"close",new ActivateEventListener(){
@Override public void onActivated(UIWidget button){
getManager().popScreen();
}
}
);
}
