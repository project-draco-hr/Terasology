{
  int xInt=(int)TeraMath.fastFloor(x) & 255;
  int yInt=(int)TeraMath.fastFloor(y) & 255;
  int zInt=(int)TeraMath.fastFloor(z) & 255;
  x-=TeraMath.fastFloor(x);
  y-=TeraMath.fastFloor(y);
  z-=TeraMath.fastFloor(z);
  double u=fade(x), v=fade(y), w=fade(z);
  int a=noisePermutations[xInt] + yInt;
  int aa=noisePermutations[a] + zInt;
  int ab=noisePermutations[(a + 1)] + zInt;
  int b=noisePermutations[(xInt + 1)] + yInt;
  int ba=noisePermutations[b] + zInt;
  int bb=noisePermutations[(b + 1)] + zInt;
  return lerp(w,lerp(v,lerp(u,grad(noisePermutations[aa],x,y,z),grad(noisePermutations[ba],x - 1,y,z)),lerp(u,grad(noisePermutations[ab],x,y - 1,z),grad(noisePermutations[bb],x - 1,y - 1,z))),lerp(v,lerp(u,grad(noisePermutations[(aa + 1)],x,y,z - 1),grad(noisePermutations[(ba + 1)],x - 1,y,z - 1)),lerp(u,grad(noisePermutations[(ab + 1)],x,y - 1,z - 1),grad(noisePermutations[(bb + 1)],x - 1,y - 1,z - 1))));
}
