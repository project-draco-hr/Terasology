{
  LocalPlayerComponent localPlayerComp=entity.getComponent(LocalPlayerComponent.class);
  EntityRef selectedItemEntity=inventoryManager.getItemInSlot(entity,localPlayerComp.selectedTool);
  if (selectedItemEntity.equals(EntityRef.NULL)) {
    return;
  }
  if (event.isDown() && lastTimeThrowInteraction == 0) {
    lastTimeThrowInteraction=timer.getTimeInMs();
    return;
  }
  if (localPlayerComp.isDead)   return;
  UIImage crossHair=(UIImage)CoreRegistry.get(GUIManager.class).getWindowById("hud").getElementById("crosshair");
  crossHair.setTextureSize(new Vector2f(22f / 256f,22f / 256f));
  float dropPower=getDropPower();
  crossHair.setTextureOrigin(new Vector2f((46f + 22f * dropPower) / 256f,23f / 256f));
  if (!event.isDown()) {
    dropPower*=25f;
    ItemComponent item=selectedItemEntity.getComponent(ItemComponent.class);
    Camera playerCamera=CoreRegistry.get(WorldRenderer.class).getActiveCamera();
    Vector3f newPosition=new Vector3f(playerCamera.getPosition().x + playerCamera.getViewingDirection().x * 1.5f,playerCamera.getPosition().y + playerCamera.getViewingDirection().y * 1.5f,playerCamera.getPosition().z + playerCamera.getViewingDirection().z * 1.5f);
    Vector3f impulseVector=new Vector3f(playerCamera.getViewingDirection());
    impulseVector.scale(dropPower);
    entity.send(new DropItemRequest(selectedItemEntity,impulseVector,newPosition));
    item.stackCount--;
    if (item.stackCount <= 0) {
      selectedItemEntity.destroy();
    }
    localPlayerComp.handAnimation=0.5f;
    resetDropMark();
  }
  entity.saveComponent(localPlayerComp);
  event.consume();
}
