{
  for (int y=0; y < Configuration.CHUNK_DIMENSIONS.y; y++) {
    for (int x=0; x < Configuration.CHUNK_DIMENSIONS.x; x++) {
      for (int z=0; z < Configuration.CHUNK_DIMENSIONS.z; z++) {
        generateGrassAndFlowers(c,x,y,z);
      }
    }
  }
  FastRandom rand=new FastRandom(c.hashCode());
  for (int y=32; y < Configuration.CHUNK_DIMENSIONS.y; y++) {
    for (int x=0; x < Configuration.CHUNK_DIMENSIONS.x; x+=4) {
      for (int z=0; z < Configuration.CHUNK_DIMENSIONS.z; z+=4) {
        double treeRand=(_rand.randomDouble() + 1.0) / 2.0;
        double treeProb=1.0;
        BIOME_TYPE biome=calcBiomeTypeForGlobalPosition(c.getBlockWorldPosX(x),c.getBlockWorldPosZ(z));
switch (biome) {
case PLAINS:
          treeProb=0.98;
        break;
case MOUNTAINS:
      treeProb=0.9;
    break;
case SNOW:
  treeProb=0.92;
break;
case FOREST:
treeProb=0.1;
break;
}
if (treeRand > treeProb) {
int randX=x + rand.randomInt() % 12 + 6;
int randZ=z + rand.randomInt() % 12 + 6;
if (c.getBlock(randX,y,randZ) == 0x1 || c.getBlock(randX,y,randZ) == 0x17) {
generateTree(c,randX,y,randZ);
}
 else if (c.getBlock(randX,y,randZ) == 0x7) {
c.getParent().getObjectGenerator("cactus").generate(c.getBlockWorldPosX(randX),y + 1,c.getBlockWorldPosZ(randZ),false);
}
}
}
}
}
}
