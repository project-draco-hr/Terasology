{
  ShaderManager.getInstance().enableShader("chunk");
  GL13.glActiveTexture(GL13.GL_TEXTURE1);
  TextureManager.getInstance().bindTexture("custom_lava_still");
  GL13.glActiveTexture(GL13.GL_TEXTURE2);
  TextureManager.getInstance().bindTexture("custom_water_still");
  GL13.glActiveTexture(GL13.GL_TEXTURE0);
  TextureManager.getInstance().bindTexture("terrain");
  int daylight=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"daylight");
  int gamma=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"gamma");
  GL20.glUniform1f(gamma,(float)GAMMA);
  int swimming=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"swimming");
  int lavaTexture=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"textureLava");
  int waterTexture=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"textureWater");
  int textureAtlas=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"textureAtlas");
  GL20.glUniform1i(lavaTexture,1);
  GL20.glUniform1i(waterTexture,2);
  GL20.glUniform1i(textureAtlas,0);
  int tick=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("chunk"),"tick");
  GL20.glUniform1f(tick,_tick);
  GL20.glUniform1f(daylight,getDaylight());
  GL20.glUniform1i(swimming,_player.isHeadUnderWater() ? 1 : 0);
  for (int i=0; i < _visibleChunks.size(); i++) {
    Chunk c=_visibleChunks.get(i);
    c.render(ChunkMesh.RENDER_TYPE.OPAQUE);
    c.render(ChunkMesh.RENDER_TYPE.LAVA);
    if ((Boolean)ConfigurationManager.getInstance().getConfig().get("System.Debug.chunkOutlines")) {
      c.getAABB().render();
    }
  }
  for (int i=0; i < _visibleChunks.size(); i++) {
    Chunk c=_visibleChunks.get(i);
    c.render(ChunkMesh.RENDER_TYPE.BILLBOARD_AND_TRANSLUCENT);
  }
  for (int j=0; j < 2; j++) {
    for (int i=0; i < _visibleChunks.size(); i++) {
      Chunk c=_visibleChunks.get(i);
      if (j == 0) {
        glColorMask(false,false,false,false);
      }
 else {
        glColorMask(true,true,true,true);
      }
      c.render(ChunkMesh.RENDER_TYPE.WATER);
    }
  }
  _mobManager.renderAll();
  ShaderManager.getInstance().enableShader("block");
  _bulletPhysicsRenderer.render();
  ShaderManager.getInstance().enableShader(null);
}
