{
  List<NetData.NetMessage> messages=Lists.newArrayListWithExpectedSize(queuedMessages.size());
  queuedMessages.drainTo(messages);
  for (  NetData.NetMessage message : messages) {
switch (message.getType()) {
case CREATE_ENTITY:
      EntityRef newEntity=entitySerializer.deserialize(message.getCreateEntity().getEntity());
    logger.info("Received new entity: {} with net id {}",newEntity,newEntity.getComponent(NetworkComponent.class).networkId);
  networkSystem.registerNetworkEntity(newEntity);
break;
case UPDATE_ENTITY:
EntityRef currentEntity=networkSystem.getEntity(message.getUpdateEntity().getNetId());
if (currentEntity.exists()) {
entitySerializer.deserializeOnto(currentEntity,message.getUpdateEntity().getEntity());
}
break;
case REMOVE_ENTITY:
int netId=message.getRemoveEntity().getNetId();
EntityRef entity=networkSystem.getEntity(netId);
networkSystem.unregisterNetworkEntity(entity);
entity.destroy();
break;
case EVENT:
Event event=eventSerializer.deserialize(message.getEvent().getEvent());
EntityRef target=networkSystem.getEntity(message.getEvent().getTargetId());
target.send(event);
break;
}
}
}
