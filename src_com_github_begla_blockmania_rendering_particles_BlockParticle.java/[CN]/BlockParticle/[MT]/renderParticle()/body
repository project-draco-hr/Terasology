{
  if (_displayLists[_blockType] == 0) {
    _displayLists[_blockType]=glGenLists(1);
    glNewList(_displayLists[_blockType],GL11.GL_COMPILE);
    drawParticle();
    glEndList();
  }
  BlockParticleEmitter pE=(BlockParticleEmitter)getParent();
  float lightValue=_parent.getParent().getRenderingLightValueAt(_position);
  FloatBuffer colorBuffer=BufferUtils.createFloatBuffer(3);
  Vector4f color=BlockManager.getInstance().getBlock(_blockType).calcColorOffsetFor(Block.SIDE.FRONT,_parent.getParent().getActiveTemperature(),_parent.getParent().getActiveHumidity());
  colorBuffer.put(color.x);
  colorBuffer.put(color.y);
  colorBuffer.put(color.z);
  colorBuffer.flip();
  int colorOffset=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("particle"),"colorOffset");
  int light=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("particle"),"light");
  int texOffsetX=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("particle"),"texOffsetX");
  int texOffsetY=GL20.glGetUniformLocation(ShaderManager.getInstance().getShader("particle"),"texOffsetY");
  GL20.glUniform1f(light,lightValue * _lightOffset);
  GL20.glUniform1f(texOffsetX,_texOffsetX);
  GL20.glUniform1f(texOffsetY,_texOffsetY);
  GL20.glUniform3(colorOffset,colorBuffer);
  glCallList(_displayLists[_blockType]);
}
