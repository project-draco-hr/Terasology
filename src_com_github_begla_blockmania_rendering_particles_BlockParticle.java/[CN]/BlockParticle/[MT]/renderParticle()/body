{
  glDisable(GL11.GL_CULL_FACE);
  glEnable(GL_TEXTURE_2D);
  glEnable(GL_BLEND);
  glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
  BlockParticleEmitter pE=(BlockParticleEmitter)getParent();
  double lightValueSun=pE.getParent().getDaylight() * ((double)pE.getParent().getLightAtPosition(_position,Chunk.LIGHT_TYPE.SUN));
  lightValueSun=Math.pow(0.82,15.0 - lightValueSun);
  double lightValueBlock=pE.getParent().getLightAtPosition(_position,Chunk.LIGHT_TYPE.BLOCK);
  lightValueBlock=lightValueBlock / 15.0;
  float lightValue=(float)Math.max(lightValueSun,lightValueBlock) * _lightOffset;
  glBegin(GL_QUADS);
  GL11.glColor3f(lightValue,lightValue,lightValue);
  GL11.glTexCoord2f(Block.getBlockForType(_blockType).getTextureOffsetFor(Block.SIDE.FRONT).x + _texOffset,Block.getBlockForType(_blockType).getTextureOffsetFor(Block.SIDE.FRONT).y + _texOffset);
  GL11.glVertex3f(-_size,_size,-_size);
  GL11.glTexCoord2f(Block.getBlockForType(_blockType).getTextureOffsetFor(Block.SIDE.FRONT).x + 0.02f + _texOffset,Block.getBlockForType(_blockType).getTextureOffsetFor(Block.SIDE.FRONT).y + _texOffset);
  GL11.glVertex3f(_size,_size,-_size);
  GL11.glTexCoord2f(Block.getBlockForType(_blockType).getTextureOffsetFor(Block.SIDE.FRONT).x + 0.02f + _texOffset,Block.getBlockForType(_blockType).getTextureOffsetFor(Block.SIDE.FRONT).y + 0.02f + _texOffset);
  GL11.glVertex3f(_size,-_size,-_size);
  GL11.glTexCoord2f(Block.getBlockForType(_blockType).getTextureOffsetFor(Block.SIDE.FRONT).x + _texOffset,Block.getBlockForType(_blockType).getTextureOffsetFor(Block.SIDE.FRONT).y + 0.02f + _texOffset);
  GL11.glVertex3f(-_size,-_size,-_size);
  glEnd();
  glDisable(GL_BLEND);
  glDisable(GL11.GL_TEXTURE_2D);
  glEnable(GL11.GL_CULL_FACE);
}
