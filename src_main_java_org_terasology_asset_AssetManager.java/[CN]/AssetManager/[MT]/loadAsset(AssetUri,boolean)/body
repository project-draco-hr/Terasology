{
  if (!uri.isValid())   return null;
  Asset asset=assetCache.get(uri);
  if (asset != null)   return asset;
  List<URL> urls=getAssetURLs(uri);
  if (urls.size() == 0) {
    if (logErrors) {
      logger.log(Level.WARNING,"Unable to resolve asset: " + uri);
    }
    return null;
  }
  for (  URL url : urls) {
    int extensionIndex=url.toString().lastIndexOf('.');
    if (extensionIndex == -1)     continue;
    String extension=url.toString().substring(extensionIndex + 1).toLowerCase(Locale.ENGLISH);
    Map<String,AssetLoader> extensionMap=assetLoaders.get(uri.getAssetType());
    if (extensionMap == null)     continue;
    AssetLoader loader=extensionMap.get(extension);
    if (loader == null)     continue;
    InputStream stream=null;
    try {
      stream=url.openStream();
      urls.remove(url);
      urls.add(0,url);
      asset=loader.load(stream,uri,urls);
      if (asset != null) {
        assetCache.put(uri,asset);
      }
      logger.log(Level.INFO,"Loaded " + uri);
      return asset;
    }
 catch (    IOException ioe) {
      logger.log(Level.SEVERE,"Error reading asset " + uri,ioe);
      return null;
    }
 finally {
      if (stream != null) {
        try {
          stream.close();
        }
 catch (        IOException innerException) {
          logger.log(Level.SEVERE,"Error closing stream for " + uri,innerException);
        }
      }
    }
  }
  logger.log(Level.WARNING,"Unable to resolve asset: " + uri);
  return null;
}
