{
  for (  EntityRef entity : entityManager.iteratorEntities(LocomotiveComponent.class,LocationComponent.class)) {
    LocationComponent location=entity.getComponent(LocationComponent.class);
    Vector3f worldPos=location.getWorldPosition();
    if (!worldProvider.isBlockActive(worldPos)) {
      continue;
    }
    LocomotiveComponent loco=entity.getComponent(LocomotiveComponent.class);
    if (!localPlayer.isValid())     return;
    HitResult hit=physics.rayTrace(localPlayer.getPosition(),new Vector3f(0,-1,0),32);
    if (hit.isHit() && hit.getEntity() == entity) {
      loco.shouldMove=true;
    }
 else {
      loco.shouldMove=false;
    }
    entity.saveComponent(loco);
    if (loco.activated) {
      CharacterMovementComponent charMovement=localPlayer.getEntity().getComponent(CharacterMovementComponent.class);
      if (loco.shouldMove && charMovement.isGrounded) {
        loco.movementDirection=localPlayer.getViewDirection();
        loco.movementDirection=new Vector3f(loco.movementDirection.x,0,loco.movementDirection.z);
        loco.movementDirection.normalize();
        loco.movementDirection.scale(1.5f * delta);
        entity.saveComponent(loco);
        worldPos.add(loco.movementDirection);
        location.setWorldPosition(worldPos);
        entity.saveComponent(location);
        LocationComponent player_location=localPlayer.getEntity().getComponent(LocationComponent.class);
        Vector3f playerPos=localPlayer.getPosition();
        playerPos.add(loco.movementDirection);
        player_location.setWorldPosition(playerPos);
        localPlayer.getEntity().saveComponent(player_location);
      }
    }
  }
}
