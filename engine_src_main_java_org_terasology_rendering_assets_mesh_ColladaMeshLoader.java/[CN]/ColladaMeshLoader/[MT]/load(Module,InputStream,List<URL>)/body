{
  try {
    parseData(stream);
  }
 catch (  ColladaParseException e) {
    logger.error("Unable to load mesh",e);
    return null;
  }
  MeshData data=new MeshData();
  TFloatList colorsMesh=data.getColors();
  TFloatList verticesMesh=data.getVertices();
  TFloatList texCoord0Mesh=data.getTexCoord0();
  TFloatList normalsMesh=data.getNormals();
  TIntList indicesMesh=data.getIndices();
  colorsMesh.addAll(this.colors);
  verticesMesh.addAll(this.vertices);
  texCoord0Mesh.addAll(this.texCoord0);
  normalsMesh.addAll(this.normals);
  indicesMesh.addAll(this.indices);
  if (data.getVertices() == null) {
    throw new IOException("No vertices define");
  }
  if (((null == data.getColors()) || (0 == data.getColors().size())) && ((null == data.getTexCoord0()) || (0 == data.getTexCoord0().size()))) {
    throw new IOException("There must be either texture coordinates or vertex colors provided.");
  }
  if ((null != data.getTexCoord0()) && (0 != data.getTexCoord0().size())) {
    if (data.getTexCoord0().size() / 2 != data.getVertices().size() / 3) {
      throw new IOException("The number of tex coords (" + data.getTexCoord0().size() / 2 + ") does not match the number of vertices (" + data.getVertices().size() / 3 + ").");
    }
  }
  if ((null != data.getColors()) && (0 != data.getColors().size())) {
    if (data.getColors().size() / 4 != data.getVertices().size() / 3) {
      throw new IOException("The number of vertex colors (" + data.getColors().size() / 4 + ") does not match the number of vertices (" + data.getVertices().size() / 3 + ").");
    }
  }
  return data;
}
