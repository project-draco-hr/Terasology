{
  if (cachedPosition.equals(getPosition()) && cachedViewigDirection.equals(getViewingDirection()) && cachedBobbingRotationOffsetFactor == bobbingRotationOffsetFactor && cachedBobbingVerticalOffsetFactor == bobbingVerticalOffsetFactor && cachedFov == fov && cachedZFar == getzFar() && cachedZNear == getzNear()) {
    return;
  }
  tempRightVector.cross(viewingDirection,up);
  tempRightVector.scale(bobbingRotationOffsetFactor);
  projectionMatrix=createPerspectiveProjectionMatrix(fov,getzNear(),getzFar());
  viewMatrix=MatrixUtils.createViewMatrix(0f,bobbingVerticalOffsetFactor * 2.0f,0f,viewingDirection.x,viewingDirection.y + bobbingVerticalOffsetFactor * 2.0f,viewingDirection.z,up.x + tempRightVector.x,up.y + tempRightVector.y,up.z + tempRightVector.z);
  normViewMatrix=MatrixUtils.createViewMatrix(0f,0f,0f,viewingDirection.x,viewingDirection.y,viewingDirection.z,up.x + tempRightVector.x,up.y + tempRightVector.y,up.z + tempRightVector.z);
  reflectionMatrix.setRow(0,1.0f,0.0f,0.0f,0.0f);
  reflectionMatrix.setRow(1,0.0f,-1.0f,0.0f,2f * (-position.y + 32f));
  reflectionMatrix.setRow(2,0.0f,0.0f,1.0f,0.0f);
  reflectionMatrix.setRow(3,0.0f,0.0f,0.0f,1.0f);
  viewMatrixReflected.mul(viewMatrix,reflectionMatrix);
  reflectionMatrix.setRow(1,0.0f,-1.0f,0.0f,0.0f);
  normViewMatrixReflected.mul(normViewMatrix,reflectionMatrix);
  viewProjectionMatrix=MatrixUtils.calcViewProjectionMatrix(viewMatrix,projectionMatrix);
  inverseProjectionMatrix.invert(projectionMatrix);
  inverseViewProjectionMatrix.invert(viewProjectionMatrix);
  cachedPosition.set(getPosition());
  cachedViewigDirection.set(getViewingDirection());
  cachedBobbingVerticalOffsetFactor=bobbingVerticalOffsetFactor;
  cachedBobbingRotationOffsetFactor=bobbingRotationOffsetFactor;
  cachedFov=fov;
  cachedZNear=getzNear();
  cachedZFar=getzFar();
  updateFrustum();
}
