{
  StorageManager storageManager=CoreRegistry.put(StorageManager.class,new StorageManagerInternal((EngineEntityManager)CoreRegistry.get(EntityManager.class)));
  WorldInfo worldInfo=gameManifest.getWorldInfo(TerasologyConstants.MAIN_WORLD);
  if (worldInfo.getSeed() == null || worldInfo.getSeed().isEmpty()) {
    FastRandom random=new FastRandom();
    worldInfo.setSeed(random.randomCharacterString(16));
  }
  logger.info("World seed: \"{}\"",worldInfo.getSeed());
  ChunkGeneratorManager chunkGeneratorManager=ChunkGeneratorManagerImpl.buildChunkGenerator(Arrays.asList(worldInfo.getChunkGenerators()));
  chunkGeneratorManager.setWorldSeed(worldInfo.getSeed());
  chunkGeneratorManager.setWorldBiomeProvider(new WorldBiomeProviderImpl(worldInfo.getSeed()));
  LocalChunkProvider chunkProvider=new LocalChunkProvider(storageManager,chunkGeneratorManager);
  CoreRegistry.get(ComponentSystemManager.class).register(new RelevanceSystem(chunkProvider),"engine:relevanceSystem");
  EntityAwareWorldProvider entityWorldProvider=new EntityAwareWorldProvider(new WorldProviderCoreImpl(worldInfo,chunkProvider));
  WorldProvider worldProvider=new WorldProviderWrapper(entityWorldProvider);
  CoreRegistry.put(WorldProvider.class,worldProvider);
  chunkProvider.setBlockEntityRegistry(entityWorldProvider);
  CoreRegistry.put(BlockEntityRegistry.class,entityWorldProvider);
  CoreRegistry.get(ComponentSystemManager.class).register(entityWorldProvider,"engine:BlockEntityRegistry");
  WorldRenderer worldRenderer=new WorldRenderer(worldProvider,chunkProvider,CoreRegistry.get(LocalPlayerSystem.class));
  CoreRegistry.put(WorldRenderer.class,worldRenderer);
  CoreRegistry.put(LocalPlayer.class,new LocalPlayer());
  CoreRegistry.put(Camera.class,worldRenderer.getActiveCamera());
  CoreRegistry.put(BulletPhysics.class,worldRenderer.getBulletRenderer());
  worldProvider.getTime().setMilliseconds(worldInfo.getTime());
  return true;
}
