{
  if (worldInfo.getSeed() == null || worldInfo.getSeed().isEmpty()) {
    FastRandom random=new FastRandom();
    worldInfo.setSeed(random.randomCharacterString(16));
  }
  logger.info("World seed: \"{}\"",worldInfo.getSeed());
  ChunkGeneratorManager chunkGeneratorManager=ChunkGeneratorManagerImpl.buildChunkGenerator(Arrays.asList(worldInfo.getChunkGenerators()));
  chunkGeneratorManager.setWorldSeed(worldInfo.getSeed());
  chunkGeneratorManager.setWorldBiomeProvider(new WorldBiomeProviderImpl(worldInfo.getSeed()));
  ChunkStore chunkStore=null;
  PathManager.getInstance().setCurrentWorldTitle(worldInfo.getTitle());
  File f=new File(PathManager.getInstance().getCurrentWorldPath(),TerasologyConstants.WORLD_DATA_FILE);
  if (f.exists()) {
    try {
      chunkStore=loadChunkStore(f);
    }
 catch (    IOException e) {
      logger.error("Failed to load chunk store",e);
    }
  }
  if (chunkStore == null) {
    chunkStore=new ChunkStoreGZip();
  }
  BlockManager blockManager=CoreRegistry.get(BlockManager.class);
  LocalChunkProvider chunkProvider=new LocalChunkProvider(chunkStore,chunkGeneratorManager);
  EntityAwareWorldProvider entityWorldProvider=new EntityAwareWorldProvider(new WorldProviderCoreImpl(worldInfo,chunkProvider,blockManager));
  WorldProvider worldProvider=new WorldProviderWrapper(entityWorldProvider);
  CoreRegistry.put(WorldProvider.class,worldProvider);
  chunkProvider.setBlockEntityRegistry(entityWorldProvider);
  CoreRegistry.put(BlockEntityRegistry.class,entityWorldProvider);
  CoreRegistry.get(ComponentSystemManager.class).register(entityWorldProvider,"engine:BlockEntityRegistry");
  WorldRenderer worldRenderer=new WorldRenderer(worldProvider,chunkProvider,CoreRegistry.get(LocalPlayerSystem.class));
  CoreRegistry.put(WorldRenderer.class,worldRenderer);
  CoreRegistry.put(LocalPlayer.class,new LocalPlayer());
  CoreRegistry.put(Camera.class,worldRenderer.getActiveCamera());
  CoreRegistry.put(BulletPhysics.class,worldRenderer.getBulletRenderer());
  CoreRegistry.get(WorldProvider.class).setTime(worldInfo.getTime());
  return true;
}
