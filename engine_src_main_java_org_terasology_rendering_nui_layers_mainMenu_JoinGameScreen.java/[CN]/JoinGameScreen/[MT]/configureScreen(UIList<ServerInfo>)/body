{
  final List<ServerInfo> locals=config.getNetwork().getServers();
  final ServerListDownloader downloader=new ServerListDownloader(config.getNetwork().getMasterServer());
  serverList.bindList(new CombinedListBinding<ServerInfo>(locals,downloader.getServers()));
  serverList.setItemRenderer(new StringTextRenderer<ServerInfo>(){
    @Override public String getString(    ServerInfo value){
      String name=value.getName();
      if (locals.contains(value)) {
        name="(custom) " + name;
      }
      return name;
    }
  }
);
  serverList.subscribe(new ItemActivateEventListener<ServerInfo>(){
    @Override public void onItemActivated(    UIWidget widget,    ServerInfo item){
      join(item.getAddress(),item.getPort());
    }
  }
);
  final ListSelectionBinding<ServerInfo> infoBinding=new ListSelectionBinding<ServerInfo>(serverList);
  UILabel name=find("name",UILabel.class);
  if (name != null) {
    name.bindText(BindHelper.bindBoundBeanProperty("name",infoBinding,ServerInfo.class,String.class));
  }
  UILabel address=find("address",UILabel.class);
  if (address != null) {
    address.bindText(BindHelper.bindBoundBeanProperty("address",infoBinding,ServerInfo.class,String.class));
  }
  UILabel port=find("port",UILabel.class);
  if (port != null) {
    port.bindText(new IntToStringBinding(BindHelper.bindBoundBeanProperty("port",infoBinding,ServerInfo.class,int.class)));
  }
  ReadOnlyBinding<Boolean> localSelectedServerOnly=new ReadOnlyBinding<Boolean>(){
    @Override public Boolean get(){
      if (infoBinding.get() == null) {
        return false;
      }
      return locals.contains(infoBinding.get());
    }
  }
;
  WidgetUtil.trySubscribe(this,"add",new ActivateEventListener(){
    @Override public void onActivated(    UIWidget button){
      getManager().pushScreen(AddServerPopup.ASSET_URI);
    }
  }
);
  UIButton edit=find("edit",UIButton.class);
  if (edit != null) {
    edit.bindEnabled(localSelectedServerOnly);
    edit.subscribe(new ActivateEventListener(){
      @Override public void onActivated(      UIWidget button){
        ServerInfo item=serverList.getSelection();
        if (!extInfo.containsKey(item)) {
          Future<ServerInfoMessage> futureInfo=infoService.requestInfo(item.getAddress(),item.getPort());
          extInfo.put(item,futureInfo);
        }
      }
    }
);
  }
  UIButton removeButton=find("remove",UIButton.class);
  if (removeButton != null) {
    removeButton.bindEnabled(localSelectedServerOnly);
    removeButton.subscribe(new ActivateEventListener(){
      @Override public void onActivated(      UIWidget button){
        if (serverList.getSelection() != null) {
          config.getNetwork().remove(serverList.getSelection());
          serverList.setSelection(null);
        }
      }
    }
);
  }
  UIButton joinButton=find("join",UIButton.class);
  if (joinButton != null) {
    joinButton.bindEnabled(new ReadOnlyBinding<Boolean>(){
      @Override public Boolean get(){
        return infoBinding.get() != null;
      }
    }
);
    joinButton.subscribe(new ActivateEventListener(){
      @Override public void onActivated(      UIWidget button){
        config.save();
        ServerInfo item=serverList.getSelection();
        if (item != null) {
          join(item.getAddress(),item.getPort());
        }
      }
    }
);
  }
  UILabel modules=find("modules",UILabel.class);
  modules.bindText(new ReadOnlyBinding<String>(){
    @Override public String get(){
      Future<ServerInfoMessage> info=extInfo.get(serverList.getSelection());
      if (info != null) {
        if (info.isDone()) {
          int maxElements=9;
          try {
            List<String> codedModInfo=new ArrayList<>();
            ModuleRegistry reg=moduleManager.getRegistry();
            for (            NameVersion entry : info.get().getModuleList()) {
              boolean isInstalled=reg.getModule(entry.getName(),entry.getVersion()) != null;
              Color color=isInstalled ? Color.GREEN : Color.RED;
              codedModInfo.add(FontColor.getColored(entry.toString(),color));
            }
            if (codedModInfo.size() > maxElements) {
              codedModInfo=codedModInfo.subList(0,maxElements - 1);
              codedModInfo.add("...");
            }
            return Joiner.on('\n').join(codedModInfo);
          }
 catch (          InterruptedException|ExecutionException e) {
            e.printStackTrace();
          }
        }
 else {
          return "requested";
        }
      }
      return null;
    }
  }
);
  UILabel worlds=find("worlds",UILabel.class);
  worlds.bindText(new ReadOnlyBinding<String>(){
    @Override public String get(){
      Future<ServerInfoMessage> info=extInfo.get(serverList.getSelection());
      if (info != null) {
        if (info.isDone()) {
          try {
            List<String> codedWorldInfo=new ArrayList<>();
            for (            WorldInfo wi : info.get().getWorldInfoList()) {
              float timeInDays=wi.getTime() / (float)WorldTime.DAY_LENGTH;
              codedWorldInfo.add("World: " + wi.getTitle());
              codedWorldInfo.add(String.format("World Time: %.2f days",timeInDays));
            }
            return Joiner.on('\n').join(codedWorldInfo);
          }
 catch (          InterruptedException|ExecutionException e) {
            e.printStackTrace();
          }
        }
 else {
          return "requested";
        }
      }
      return null;
    }
  }
);
  UILabel downloadLabel=find("download",UILabel.class);
  if (downloadLabel != null) {
    downloadLabel.bindText(new ReadOnlyBinding<String>(){
      @Override public String get(){
        return downloader.getStatus();
      }
    }
);
  }
}
