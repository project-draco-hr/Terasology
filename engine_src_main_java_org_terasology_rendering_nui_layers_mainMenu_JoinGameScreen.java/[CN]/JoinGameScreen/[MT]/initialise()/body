{
  serverList=find("serverList",UIList.class);
  if (serverList != null) {
    List<ServerInfo> locals=config.getNetwork().getServers();
    serverList.bindList(new OnlineServerListBinding(locals));
    serverList.setItemRenderer(new StringTextRenderer<ServerInfo>(){
      @Override public String getString(      ServerInfo value){
        return value.getName();
      }
    }
);
    serverList.subscribe(new ItemActivateEventListener<ServerInfo>(){
      @Override public void onItemActivated(      UIWidget widget,      ServerInfo item){
        join(item.getAddress(),item.getPort());
      }
    }
);
    final ListSelectionBinding<ServerInfo> infoBinding=new ListSelectionBinding<ServerInfo>(serverList);
    UILabel name=find("name",UILabel.class);
    name.bindText(BindHelper.bindBoundBeanProperty("name",infoBinding,ServerInfo.class,String.class));
    UILabel address=find("address",UILabel.class);
    address.bindText(BindHelper.bindBoundBeanProperty("address",infoBinding,ServerInfo.class,String.class));
    UILabel port=find("port",UILabel.class);
    port.bindText(new IntToStringBinding(BindHelper.bindBoundBeanProperty("port",infoBinding,ServerInfo.class,int.class)));
    WidgetUtil.trySubscribe(this,"add",new ActivateEventListener(){
      @Override public void onActivated(      UIWidget button){
        getManager().pushScreen(AddServerPopup.ASSET_URI);
      }
    }
);
    UIButton edit=find("edit",UIButton.class);
    if (edit != null) {
      edit.bindEnabled(new ReadOnlyBinding<Boolean>(){
        @Override public Boolean get(){
          if (infoBinding.get() == null) {
            return false;
          }
          return locals.contains(infoBinding.get());
        }
      }
);
      edit.subscribe(new ActivateEventListener(){
        @Override public void onActivated(        UIWidget button){
          AddServerPopup popup=getManager().pushScreen(AddServerPopup.ASSET_URI,AddServerPopup.class);
          popup.setServerInfo(infoBinding.get());
        }
      }
);
    }
    WidgetUtil.trySubscribe(this,"remove",new ActivateEventListener(){
      @Override public void onActivated(      UIWidget button){
        if (serverList.getSelection() != null) {
          config.getNetwork().remove(serverList.getSelection());
          serverList.setSelection(null);
        }
      }
    }
);
    WidgetUtil.trySubscribe(this,"join",new ActivateEventListener(){
      @Override public void onActivated(      UIWidget button){
        config.save();
        ServerInfo item=serverList.getSelection();
        if (item != null) {
          join(item.getAddress(),item.getPort());
        }
      }
    }
);
    Binding<Boolean> hasSelection=new ReadOnlyBinding<Boolean>(){
      @Override public Boolean get(){
        return infoBinding.get() != null;
      }
    }
;
    UIButton editButton=find("edit",UIButton.class);
    UIButton removeButton=find("remove",UIButton.class);
    UIButton joinButton=find("join",UIButton.class);
    removeButton.bindEnabled(hasSelection);
    joinButton.bindEnabled(hasSelection);
  }
  WidgetUtil.trySubscribe(this,"close",new ActivateEventListener(){
    @Override public void onActivated(    UIWidget button){
      config.save();
      getManager().popScreen();
    }
  }
);
}
