{
  Vector3f cameraPosition=worldRenderer.getActiveCamera().getPosition();
  Quat4f worldRot=new Quat4f();
  Vector3f worldPos=new Vector3f();
  AxisAngle4f rot=new AxisAngle4f();
  Matrix4f matrix=new Matrix4f();
  Transform trans=new Transform();
  Transform normTrans=new Transform();
  ShaderProgram shader=ShaderManager.getInstance().getShaderProgram("block");
  shader.setInt("textured",0);
  shader.setFloat("light",worldRenderer.getRenderingLightValue());
  glPushMatrix();
  glTranslated(-cameraPosition.x,-cameraPosition.y,-cameraPosition.z);
  float[] openglMat=new float[16];
  FloatBuffer mBuffer=BufferUtils.createFloatBuffer(16);
  for (  EntityRef entity : itemMesh) {
    MeshComponent meshComp=entity.getComponent(MeshComponent.class);
    LocationComponent location=entity.getComponent(LocationComponent.class);
    if (location == null || meshComp.mesh == null) {
      continue;
    }
    if (meshComp.mesh.isDisposed()) {
      logger.error("Attempted to render disposed ITEM mesh");
      continue;
    }
    location.getWorldRotation(worldRot);
    location.getWorldPosition(worldPos);
    float worldScale=location.getWorldScale();
    matrix.set(worldRot,worldPos,worldScale);
    trans.set(matrix);
    AABB aabb=meshComp.mesh.getAABB().transform(trans);
    if (worldRenderer.isAABBVisible(aabb)) {
      glPushMatrix();
      trans.getOpenGLMatrix(openglMat);
      mBuffer.put(openglMat);
      mBuffer.flip();
      glMultMatrix(mBuffer);
      meshComp.mesh.render();
      glPopMatrix();
    }
  }
  glPopMatrix();
}
