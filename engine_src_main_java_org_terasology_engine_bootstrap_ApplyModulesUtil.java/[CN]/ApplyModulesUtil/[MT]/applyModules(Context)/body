{
  ModuleManager moduleManager=context.get(ModuleManager.class);
  CopyStrategyLibrary copyStrategyLibrary=context.get(CopyStrategyLibrary.class);
  copyStrategyLibrary.clear();
  for (  Class<? extends CopyStrategy> copyStrategy : moduleManager.getEnvironment().getSubtypesOf(CopyStrategy.class)) {
    if (copyStrategy.getAnnotation(RegisterCopyStrategy.class) == null) {
      continue;
    }
    Class targetType=ReflectionUtil.getTypeParameterForSuper(copyStrategy,CopyStrategy.class,0);
    if (targetType != null) {
      try {
        copyStrategyLibrary.register(targetType,copyStrategy.newInstance());
      }
 catch (      InstantiationException|IllegalAccessException e) {
        logger.error("Cannot register CopyStrategy '{}' - failed to instantiate",copyStrategy,e);
      }
    }
 else {
      logger.error("Cannot register CopyStrategy '{}' - unable to determine target type",copyStrategy);
    }
  }
  ReflectFactory reflectFactory=context.get(ReflectFactory.class);
  TypeSerializationLibrary typeSerializationLibrary=TypeSerializationLibrary.createDefaultLibrary(reflectFactory,copyStrategyLibrary);
  typeSerializationLibrary.add(CollisionGroup.class,new CollisionGroupTypeHandler(context.get(CollisionGroupManager.class)));
  context.put(TypeSerializationLibrary.class,typeSerializationLibrary);
  EntitySystemLibrary library=new EntitySystemLibrary(context,typeSerializationLibrary);
  context.put(EntitySystemLibrary.class,library);
  ComponentLibrary componentLibrary=library.getComponentLibrary();
  context.put(ComponentLibrary.class,componentLibrary);
  context.put(EventLibrary.class,library.getEventLibrary());
  registerComponents(componentLibrary,moduleManager.getEnvironment());
  BlockFamilyFactoryRegistry blockFamilyFactoryRegistry=context.get(BlockFamilyFactoryRegistry.class);
  loadFamilies((DefaultBlockFamilyFactoryRegistry)blockFamilyFactoryRegistry,moduleManager.getEnvironment());
  ModuleAwareAssetTypeManager assetTypeManager=context.get(ModuleAwareAssetTypeManager.class);
  PrefabFormat prefabFormat=new PrefabFormat(componentLibrary,typeSerializationLibrary);
  assetTypeManager.registerCoreFormat(Prefab.class,prefabFormat);
  PrefabDeltaFormat prefabDeltaFormat=new PrefabDeltaFormat(componentLibrary,typeSerializationLibrary);
  assetTypeManager.registerCoreDeltaFormat(Prefab.class,prefabDeltaFormat);
  assetTypeManager.switchEnvironment(moduleManager.getEnvironment());
}
