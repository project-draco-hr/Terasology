{
  Object[] processedParametersWithoutSender;
  try {
    processedParametersWithoutSender=processParameters(rawParameters,sender,false);
  }
 catch (  CommandParameterParseException e) {
    String warning="Invalid parameter '" + e.getParameter() + "'";
    String message=e.getMessage();
    if (message != null) {
      warning+=": " + message;
    }
    throw new CommandSuggestionException(warning);
  }
  CommandParameter suggestedParameter=null;
  for (int i=0; i < processedParametersWithoutSender.length; i++) {
    if (processedParametersWithoutSender[i] == null) {
      suggestedParameter=parameters.get(i);
      break;
    }
  }
  if (suggestedParameter == null) {
    return Sets.newHashSet();
  }
  Set<Object> result=null;
  try {
    result=suggestedParameter.suggest(sender,processedParametersWithoutSender);
  }
 catch (  Throwable t) {
    throw new CommandSuggestionException(t.getCause());
  }
  if (result == null) {
    return Sets.newHashSet();
  }
  if (result.getClass().getComponentType() != suggestedParameter.getType()) {
    Class<?> requiredComponentClass=suggestedParameter.getType();
    Class<?> requiredClass=Array.newInstance(requiredComponentClass,0).getClass();
    Class<?> providedClass=result.getClass();
    throw new CommandSuggestionException("The 'suggest' method of command class " + getClass().getCanonicalName() + " returns a suggestion of an invalid type. Required: "+ requiredClass.getCanonicalName()+ "; provided: "+ providedClass.getCanonicalName());
  }
  Set<String> composedResult=composeAll(result,suggestedParameter);
  return Sets.filter(composedResult,new Predicate<String>(){
    @Override public boolean apply(    String input){
      return input != null && (currentValue == null || input.startsWith(currentValue));
    }
  }
);
}
