{
  super.onDraw(canvas);
  canvas.addInteractionRegion(mouseInteractionListener);
  try (SubRegion subRegion=canvas.subRegion(canvas.getRegion(),false)){
    canvas.setDrawOnTop(true);
    for (    UIWidget widget : getWidgets()) {
      if (!widget.isVisible()) {
        continue;
      }
      if (widget instanceof RenderableNode) {
        RenderableNode renderableNode=(RenderableNode)widget;
        for (        Port port : renderableNode.getPorts()) {
          Port targetPort=port.getTargetPort();
          if (port.isInput() || targetPort == null || !targetPort.node.isVisible()) {
            continue;
          }
          drawConnection(canvas,port,targetPort,port == activeConnectionStart ? Color.BLACK : Color.GREY);
        }
      }
    }
    if (activeConnectionStart != null) {
      drawConnection(canvas,activeConnectionStart,mouseWorldPosition,Color.WHITE);
    }
    if (selectedNode != null) {
      renderNodeBorder(selectedNode,Color.GREEN,canvas);
    }
    if (newNode != null) {
      Vector2i screenStart=worldToScreen(mouseWorldPosition);
      Vector2f worldEnd=new Vector2f(mouseWorldPosition);
      worldEnd.add(newNode.getSize());
      Vector2i screenEnd=worldToScreen(worldEnd);
      canvas.drawWidget(newNode,Rect2i.createFromMinAndMax(screenStart,screenEnd));
    }
    canvas.setDrawOnTop(false);
  }
 }
