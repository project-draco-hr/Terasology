{
  if (receivingModule == null) {
    joinStatus.setErrorMessage("Module download error");
    channelHandlerContext.getChannel().close();
    return;
  }
  try {
    downloadingModule.write(moduleData.getModule().toByteArray());
    lengthReceived+=moduleData.getModule().size();
    joinStatus.setCurrentProgress((float)lengthReceived / receivingModule.getSize());
    if (lengthReceived == receivingModule.getSize()) {
      downloadingModule.close();
      String moduleName=String.format("%s-%s.jar",receivingModule.getId(),receivingModule.getVersion());
      Path finalPath=PathManager.getInstance().getHomeModPath().normalize().resolve(moduleName);
      if (finalPath.normalize().startsWith(PathManager.getInstance().getHomeModPath())) {
        if (Files.exists(finalPath)) {
          logger.error("File already exists at {}",finalPath);
          joinStatus.setErrorMessage("Module download error");
          channelHandlerContext.getChannel().close();
          return;
        }
        Files.copy(tempModuleLocation,finalPath);
        ModuleLoader loader=new ModuleLoader(moduleManager.getModuleMetadataReader());
        loader.setModuleInfoPath(TerasologyConstants.MODULE_INFO_FILENAME);
        moduleManager.getRegistry().add(loader.load(finalPath));
        receivingModule=null;
        if (missingModules.isEmpty()) {
          sendJoin();
        }
      }
 else {
        logger.error("Module rejected");
        joinStatus.setErrorMessage("Module download error");
        channelHandlerContext.getChannel().close();
      }
    }
  }
 catch (  IOException e) {
    logger.error("Error saving module",e);
    joinStatus.setErrorMessage("Module download error");
    channelHandlerContext.getChannel().close();
  }
}
