{
  Vector3f newPos=new Vector3f();
  Quat4f newRot=new Quat4f();
  for (  EntityRef entity : entityManager.iteratorEntities(SkeletalMeshComponent.class,LocationComponent.class)) {
    SkeletalMeshComponent skeletalMeshComp=entity.getComponent(SkeletalMeshComponent.class);
    LocationComponent loc=entity.getComponent(LocationComponent.class);
    if (skeletalMeshComp.animation != null && skeletalMeshComp.animation.getFrameCount() > 0) {
      skeletalMeshComp.animationTime+=delta * skeletalMeshComp.animationRate;
      float framePos=skeletalMeshComp.animationTime / skeletalMeshComp.animation.getTimePerFrame();
      while ((int)framePos >= skeletalMeshComp.animation.getFrameCount()) {
        framePos-=skeletalMeshComp.animation.getFrameCount();
      }
      int frameId=(int)framePos;
      MeshAnimationFrame frameA=skeletalMeshComp.animation.getFrame(frameId);
      MeshAnimationFrame frameB=skeletalMeshComp.animation.getFrame((frameId + 1) % skeletalMeshComp.animation.getFrameCount());
      float interpolationVal=framePos - frameId;
      for (int i=0; i < skeletalMeshComp.animation.getBoneCount(); ++i) {
        EntityRef boneEntity=skeletalMeshComp.boneEntities.get(skeletalMeshComp.animation.getBoneName(i));
        if (boneEntity == null) {
          continue;
        }
        LocationComponent boneLoc=boneEntity.getComponent(LocationComponent.class);
        if (boneLoc != null) {
          newPos.interpolate(frameA.getPosition(i),frameB.getPosition(i),interpolationVal);
          boneLoc.setLocalPosition(newPos);
          newRot.interpolate(frameA.getRotation(i),frameB.getRotation(i),interpolationVal);
          newRot.normalize();
          boneLoc.setLocalRotation(newRot);
          boneEntity.saveComponent(boneLoc);
        }
      }
      entity.saveComponent(skeletalMeshComp);
    }
  }
}
