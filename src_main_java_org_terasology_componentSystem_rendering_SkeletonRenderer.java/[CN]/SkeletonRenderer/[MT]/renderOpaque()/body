{
  boolean carryingTorch=CoreRegistry.get(LocalPlayer.class).isCarryingTorch();
  Vector3f cameraPosition=worldRenderer.getActiveCamera().getPosition();
  Quat4f worldRot=new Quat4f();
  Vector3f worldPos=new Vector3f();
  Matrix4f matrix=new Matrix4f();
  Transform trans=new Transform();
  Transform normTrans=new Transform();
  glPushMatrix();
  glTranslated(-cameraPosition.x,-cameraPosition.y,-cameraPosition.z);
  for (  EntityRef entity : entityManager.iteratorEntities(SkeletalMeshComponent.class,LocationComponent.class)) {
    SkeletalMeshComponent skeletalMesh=entity.getComponent(SkeletalMeshComponent.class);
    if (skeletalMesh.mesh == null || skeletalMesh.material == null) {
      continue;
    }
    skeletalMesh.material.enable();
    skeletalMesh.material.setInt("carryingTorch",carryingTorch ? 1 : 0);
    skeletalMesh.material.setFloat("light",1);
    skeletalMesh.material.bindTextures();
    float[] openglMat=new float[16];
    FloatBuffer mBuffer=BufferUtils.createFloatBuffer(16);
    LocationComponent location=entity.getComponent(LocationComponent.class);
    location.getWorldRotation(worldRot);
    location.getWorldPosition(worldPos);
    float worldScale=location.getWorldScale();
    matrix.set(worldRot,worldPos,worldScale);
    trans.set(matrix);
    glPushMatrix();
    trans.getOpenGLMatrix(openglMat);
    mBuffer.put(openglMat);
    mBuffer.flip();
    glMultMatrix(mBuffer);
    skeletalMesh.material.setFloat("light",worldRenderer.getRenderingLightValueAt(worldPos));
    skeletalMesh.mesh.render();
    glPopMatrix();
  }
  glPopMatrix();
}
