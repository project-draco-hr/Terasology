{
  final UIText worldName=find("worldName",UIText.class);
  if (worldName != null) {
    int gameNum=1;
    for (    GameInfo info : GameProvider.getSavedGames()) {
      if (info.getManifest().getTitle().startsWith(DEFAULT_GAME_NAME_PREFIX)) {
        String remainder=info.getManifest().getTitle().substring(DEFAULT_GAME_NAME_PREFIX.length());
        try {
          gameNum=Math.max(gameNum,Integer.parseInt(remainder) + 1);
        }
 catch (        NumberFormatException e) {
          logger.trace("Could not parse {} as integer (not an error)",remainder,e);
        }
      }
    }
    worldName.setText(DEFAULT_GAME_NAME_PREFIX + gameNum);
  }
  final UIText seed=find("seed",UIText.class);
  if (seed != null) {
    seed.setText(new FastRandom().nextString(32));
  }
  final UIDropdown<WorldGeneratorInfo> worldGenerator=find("worldGenerator",UIDropdown.class);
  if (worldGenerator != null) {
    worldGenerator.setOptions(worldGeneratorManager.getWorldGenerators());
    worldGenerator.bindSelection(new Binding<WorldGeneratorInfo>(){
      @Override public WorldGeneratorInfo get(){
        return worldGeneratorManager.getWorldGeneratorInfo(config.getWorldGeneration().getDefaultGenerator());
      }
      @Override public void set(      WorldGeneratorInfo value){
        if (value != null) {
          config.getWorldGeneration().setDefaultGenerator(value.getUri());
        }
      }
    }
);
    worldGenerator.setOptionRenderer(new StringTextRenderer<WorldGeneratorInfo>(){
      @Override public String getString(      WorldGeneratorInfo value){
        return value.getDisplayName();
      }
    }
);
  }
  UIScreenUtil.trySubscribe(this,"close",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      nuiManager.popScreen();
    }
  }
);
  UIScreenUtil.trySubscribe(this,"play",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      GameManifest gameManifest=new GameManifest();
      gameManifest.setTitle(worldName.getText());
      gameManifest.setSeed(seed.getText());
      for (      String moduleName : config.getDefaultModSelection().listModules()) {
        Module module=moduleManager.getLatestModuleVersion(moduleName);
        if (module != null) {
          gameManifest.addModule(module.getId(),module.getVersion());
        }
      }
      WorldInfo worldInfo=new WorldInfo(TerasologyConstants.MAIN_WORLD,gameManifest.getSeed(),(long)(WorldTime.DAY_LENGTH * 0.025f),worldGenerator.getSelection().getUri());
      gameManifest.addWorld(worldInfo);
      gameEngine.changeState(new StateLoading(gameManifest,(loadingAsServer) ? NetworkMode.SERVER : NetworkMode.NONE));
    }
  }
);
  UIScreenUtil.trySubscribe(this,"previewSeed",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      PreviewWorldScreen screen=nuiManager.pushScreen("engine:previewWorldScreen",PreviewWorldScreen.class);
      if (screen != null) {
        screen.bindSeed(BindHelper.bindBeanProperty("text",seed,String.class));
      }
    }
  }
);
  UIScreenUtil.trySubscribe(this,"mods",new ButtonEventListener(){
    @Override public void onButtonActivated(    UIButton button){
      nuiManager.pushScreen("engine:selectModsScreen");
    }
  }
);
}
