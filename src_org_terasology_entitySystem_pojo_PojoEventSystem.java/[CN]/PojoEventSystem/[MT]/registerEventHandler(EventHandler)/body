{
  Class handlerClass=handler.getClass();
  if (!Modifier.isPublic(handlerClass.getModifiers())) {
    logger.warning(String.format("Cannot register handler %s, must be public",handler.getClass().getName()));
    return;
  }
  logger.info("Registering event handler " + handlerClass.getName());
  for (  Method method : handlerClass.getMethods()) {
    ReceiveEvent receiveEventAnnotation=method.getAnnotation(ReceiveEvent.class);
    if (receiveEventAnnotation != null) {
      if (!Modifier.isPublic(method.getModifiers())) {
        logger.warning(String.format("Cannot register %s of class %s, as it must be public",method.getName(),handlerClass.getName()));
      }
      Class<?>[] types=method.getParameterTypes();
      if (types.length == 3 && Event.class.isAssignableFrom(types[0]) && EntityRef.class.isAssignableFrom(types[1]) && Component.class.isAssignableFrom(types[2])) {
        if (receiveEventAnnotation.components().length == 0) {
          if (!types[2].equals(Component.class)) {
            Multimap<Class<? extends Component>,EventHandlerInfo> componentMap=componentSpecificHandlers.get((Class<? extends Event>)types[0]);
            if (componentMap == null) {
              componentMap=HashMultimap.create();
              componentSpecificHandlers.put((Class<? extends Event>)types[0],componentMap);
            }
            componentMap.put((Class<? extends Component>)types[2],new EventHandlerInfo(handler,method));
          }
        }
 else {
          for (          Class<? extends Component> c : receiveEventAnnotation.components()) {
            Multimap<Class<? extends Component>,EventHandlerInfo> componentMap=componentSpecificHandlers.get((Class<? extends Event>)types[0]);
            if (componentMap == null) {
              componentMap=HashMultimap.create();
              componentSpecificHandlers.put((Class<? extends Event>)types[0],componentMap);
            }
            componentMap.put(c,new EventHandlerInfo(handler,method));
          }
        }
      }
 else {
        logger.warning("Invalid event handler method: " + method.getName());
      }
    }
  }
}
