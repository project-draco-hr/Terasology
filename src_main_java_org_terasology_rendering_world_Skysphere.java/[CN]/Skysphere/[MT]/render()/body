{
  glDisable(GL_CULL_FACE);
  glDisable(GL_DEPTH_TEST);
  glEnable(GL13.GL_TEXTURE_CUBE_MAP);
  GL13.glActiveTexture(GL13.GL_TEXTURE0);
  GL11.glBindTexture(GL13.GL_TEXTURE_CUBE_MAP,textureIds.get(0));
  GL13.glActiveTexture(GL13.GL_TEXTURE1);
  GL11.glBindTexture(GL13.GL_TEXTURE_CUBE_MAP,textureIds.get(1));
  sunPosAngle=(float)java.lang.Math.toRadians(360.0 * parent.getWorldProvider().getTime().getDays() - 90.0);
  Vector4d sunNormalise=new Vector4d(0.0f,java.lang.Math.cos(sunPosAngle),java.lang.Math.sin(sunPosAngle),1.0);
  sunNormalise.normalize();
  Vector3d zenithColor=new Vector3d();
  if (sunNormalise.y >= -0.35)   zenithColor=getAllWeatherZenith((float)sunNormalise.y);
  ShaderProgram shader=ShaderManager.getInstance().getShaderProgram("sky");
  shader.enable();
  shader.setInt("texCubeStars",0);
  shader.setInt("texCubeSky",1);
  shader.setFloat4("sunPos",0.0f,(float)java.lang.Math.cos(sunPosAngle),(float)java.lang.Math.sin(sunPosAngle),1.0f);
  shader.setFloat("time",parent.getWorldProvider().getTime().getDays());
  shader.setFloat("sunAngle",(float)sunPosAngle);
  shader.setFloat("turbidity",(float)turbidity);
  shader.setFloat3("zenith",(float)zenithColor.x,(float)zenithColor.y,(float)zenithColor.z);
  shader.setFloat("daylight",(float)getDaylight());
  drawSphere();
  glDisable(GL13.GL_TEXTURE_CUBE_MAP);
  glEnable(GL_CULL_FACE);
  glEnable(GL_DEPTH_TEST);
}
