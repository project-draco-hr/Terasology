{
  float dx=(float)_noiseMatrixSize / (float)width;
  float dy=(float)_noiseMatrixSize / (float)height;
  float dz=(float)_noiseMatrixSize / (float)depth;
  int j=0;
  int i=0;
  ByteBuffer image=BufferUtils.createByteBuffer(width * height * depth* 4);
  for (i=0; i < width; i++) {
    for (j=0; j < height; j++) {
      for (int k=0; k < depth; k++) {
        image.put((byte)(((float)_pGen.noise(i * dx,j * dy,k * dz) * 255.0 * 0.5)));
        image.put((byte)(((float)_pGen.noise(i * dx,j * dy,k * dz) * 255.0 * 0.5)));
        image.put((byte)(((float)_pGen.noise(i * dx,j * dy,k * dz) * 255.0 * 0.5)));
        image.put((byte)(((float)_pGen.noise(i * dx,j * dy,k * dz) * 255.0 * 0.5)));
      }
    }
  }
  image.rewind();
  GL11.glGenTextures(textureCloudsId);
  GL11.glBindTexture(GL12.GL_TEXTURE_3D,textureCloudsId.get(0));
  GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_WRAP_S,GL_REPEAT);
  GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL12.GL_TEXTURE_WRAP_R,GL_REPEAT);
  GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_WRAP_T,GL_REPEAT);
  GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_MAG_FILTER,GL_LINEAR);
  GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_MIN_FILTER,GL_LINEAR);
  glPixelStorei(GL_UNPACK_ALIGNMENT,1);
  GL12.glTexImage3D(GL12.GL_TEXTURE_3D,0,GL_RGBA,width,height,depth,0,GL_RGBA,GL_UNSIGNED_BYTE,image);
}
