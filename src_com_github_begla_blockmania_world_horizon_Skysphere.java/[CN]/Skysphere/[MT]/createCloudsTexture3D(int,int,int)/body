{
  float dx=(float)_noiseMatrixSize / (float)width;
  float dy=(float)_noiseMatrixSize / (float)height;
  float dz=(float)_noiseMatrixSize / (float)depth;
  Vector3f tempVector=new Vector3f();
  _noisePermutations=new Vector3f[512];
  int j=0;
  int i=0;
  for (i=0; i < 512; i++) {
    _noisePermutations[i]=new Vector3f();
    _noisePermutations[i].x=rnd();
    _noisePermutations[i].y=rnd();
    _noisePermutations[i].z=rnd();
  }
  ByteBuffer image=BufferUtils.createByteBuffer(width * height * depth* 3);
  for (i=0; i < width; i++) {
    for (j=0; j < height; j++) {
      for (int k=0; k < depth; k++) {
        tempVector.set(noise3D(i * dx,j * dy,k * dz));
        image.put((byte)((tempVector.x + 1) * 0.5 * 255.0));
        image.put((byte)((tempVector.y + 1) * 0.5 * 255.0));
        image.put((byte)((tempVector.z + 1) * 0.5 * 255.0));
      }
    }
  }
  image.rewind();
  GL11.glGenTextures(textureCloudsId);
  GL11.glBindTexture(GL12.GL_TEXTURE_3D,textureCloudsId.get(0));
  GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_WRAP_S,GL_REPEAT);
  GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL12.GL_TEXTURE_WRAP_R,GL_REPEAT);
  GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_WRAP_T,GL_REPEAT);
  GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_MAG_FILTER,GL_LINEAR);
  GL11.glTexParameteri(GL12.GL_TEXTURE_3D,GL11.GL_TEXTURE_MIN_FILTER,GL_LINEAR);
  glPixelStorei(GL_UNPACK_ALIGNMENT,1);
  GL12.glTexImage3D(GL12.GL_TEXTURE_3D,0,GL_RGB,width,height,depth,0,GL_RGB,GL_UNSIGNED_BYTE,image);
}
