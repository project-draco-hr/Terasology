{
  if (joinStatus.getStatus() == JoinStatus.Status.COMPLETE) {
    ServerInfoMessage serverInfo=networkSystem.getServer().getInfo();
    gameManifest.setTitle(serverInfo.getGameName());
    for (    WorldInfo worldInfo : serverInfo.getWorldInfoList()) {
      gameManifest.addWorld(worldInfo);
    }
    Map<String,Short> blockMap=Maps.newHashMap();
    for (    Entry<Integer,String> entry : serverInfo.getBlockIds().entrySet()) {
      String name=entry.getValue();
      short id=entry.getKey().shortValue();
      Short oldId=blockMap.put(name,id);
      if (oldId != null && oldId != id) {
        logger.warn("Overwriting Id {} for {} with Id {}",oldId,name,id);
      }
    }
    Map<String,Short> biomeMap=Maps.newHashMap();
    for (    Entry<Short,String> entry : serverInfo.getBiomeIds().entrySet()) {
      String name=entry.getValue();
      short id=entry.getKey();
      Short oldId=biomeMap.put(name,id);
      if (oldId != null && oldId != id) {
        logger.warn("Overwriting Biome Id {} for {} with Id {}",oldId,name,id);
      }
    }
    gameManifest.setRegisteredBlockFamilies(serverInfo.getRegisterBlockFamilyList());
    gameManifest.setBlockIdMap(blockMap);
    gameManifest.setBiomeIdMap(biomeMap);
    gameManifest.setTime(networkSystem.getServer().getInfo().getTime());
    ModuleManager moduleManager=CoreRegistry.get(ModuleManager.class);
    Set<Module> moduleSet=Sets.newLinkedHashSet();
    for (    NameVersion moduleInfo : networkSystem.getServer().getInfo().getModuleList()) {
      Module module=moduleManager.getRegistry().getModule(moduleInfo.getName(),moduleInfo.getVersion());
      if (module == null) {
        StateMainMenu mainMenu=new StateMainMenu("Missing required module: " + moduleInfo);
        CoreRegistry.get(GameEngine.class).changeState(mainMenu);
        return false;
      }
 else {
        logger.debug("Activating module: {}:{}",moduleInfo.getName(),moduleInfo.getVersion());
        gameManifest.addModule(module.getId(),module.getVersion());
        moduleSet.add(module);
      }
    }
    moduleManager.loadEnvironment(moduleSet,true);
    CoreRegistry.get(Game.class).load(gameManifest);
    ApplyModulesUtil.applyModules();
    return true;
  }
 else   if (joinStatus.getStatus() == JoinStatus.Status.FAILED) {
    StateMainMenu mainMenu=new StateMainMenu("Failed to connect to server: " + joinStatus.getErrorMessage());
    CoreRegistry.get(GameEngine.class).changeState(mainMenu);
  }
  return false;
}
